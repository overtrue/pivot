{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "responses-section-demo",
  "type": "registry:example",
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/responses-section.json"
  ],
  "files": [
    {
      "path": "registry/default/example/responses-section-demo.tsx",
      "content": "import { I18nProvider } from \"@/registry/default/lib/i18n\";\nimport { ResponsesSection } from \"@/registry/default/ui/responses-section\";\n\nexport default function ResponsesSectionDemo() {\n  // 用户管理 API 的响应示例\n  const userApiResponses = {\n    \"200\": {\n      description: \"成功获取用户信息\",\n      content: {\n        \"application/json\": {\n          schema: {\n            type: \"object\" as const,\n            properties: {\n              id: {\n                type: \"string\" as const,\n                format: \"uuid\" as const,\n                description: \"用户唯一标识符\",\n              },\n              email: {\n                type: \"string\" as const,\n                format: \"email\" as const,\n                description: \"用户邮箱\",\n              },\n              name: {\n                type: \"string\" as const,\n                description: \"用户姓名\",\n              },\n              status: {\n                type: \"string\" as const,\n                enum: [\"active\", \"inactive\", \"pending\"],\n                description: \"用户状态\",\n              },\n              createdAt: {\n                type: \"string\" as const,\n                format: \"date-time\" as const,\n                description: \"创建时间\",\n              },\n            },\n          },\n          example: {\n            id: \"123e4567-e89b-12d3-a456-426614174000\",\n            email: \"john.doe@example.com\",\n            name: \"John Doe\",\n            status: \"active\",\n            createdAt: \"2024-01-15T10:30:00Z\",\n          },\n        },\n      },\n      headers: {\n        \"X-Rate-Limit-Remaining\": {\n          description: \"剩余请求次数\",\n          schema: { type: \"integer\" as const },\n        },\n        \"X-Request-ID\": {\n          description: \"请求追踪 ID\",\n          schema: { type: \"string\" as const, format: \"uuid\" as const },\n        },\n      },\n    },\n    \"400\": {\n      description: \"请求参数错误\",\n      content: {\n        \"application/json\": {\n          schema: {\n            type: \"object\" as const,\n            properties: {\n              error: {\n                type: \"string\" as const,\n                description: \"错误类型\",\n              },\n              message: {\n                type: \"string\" as const,\n                description: \"错误描述\",\n              },\n              details: {\n                type: \"array\" as const,\n                description: \"详细错误信息\",\n                items: {\n                  type: \"object\" as const,\n                  properties: {\n                    field: { type: \"string\" as const },\n                    code: { type: \"string\" as const },\n                    message: { type: \"string\" as const },\n                  },\n                },\n              },\n            },\n          },\n          example: {\n            error: \"VALIDATION_ERROR\",\n            message: \"请求参数验证失败\",\n            details: [\n              {\n                field: \"email\",\n                code: \"INVALID_FORMAT\",\n                message: \"邮箱格式不正确\",\n              },\n            ],\n          },\n        },\n      },\n    },\n    \"401\": {\n      description: \"未授权访问\",\n      content: {\n        \"application/json\": {\n          schema: {\n            type: \"object\" as const,\n            properties: {\n              error: { type: \"string\" as const },\n              message: { type: \"string\" as const },\n            },\n          },\n          example: {\n            error: \"UNAUTHORIZED\",\n            message: \"访问令牌无效或已过期\",\n          },\n        },\n      },\n    },\n    \"404\": {\n      description: \"用户不存在\",\n      content: {\n        \"application/json\": {\n          schema: {\n            type: \"object\" as const,\n            properties: {\n              error: { type: \"string\" as const },\n              message: { type: \"string\" as const },\n            },\n          },\n          example: {\n            error: \"USER_NOT_FOUND\",\n            message: \"指定的用户不存在\",\n          },\n        },\n      },\n    },\n    \"500\": {\n      description: \"服务器内部错误\",\n      content: {\n        \"application/json\": {\n          schema: {\n            type: \"object\" as const,\n            properties: {\n              error: { type: \"string\" as const },\n              message: { type: \"string\" as const },\n              requestId: { type: \"string\" as const },\n            },\n          },\n          example: {\n            error: \"INTERNAL_SERVER_ERROR\",\n            message: \"服务器遇到了一个意外的情况\",\n            requestId: \"req_abc123def456\",\n          },\n        },\n      },\n    },\n  };\n\n  // 文件上传 API 的响应示例\n  const fileUploadResponses = {\n    \"201\": {\n      description: \"文件上传成功\",\n      content: {\n        \"application/json\": {\n          schema: {\n            type: \"object\" as const,\n            properties: {\n              id: { type: \"string\" as const, description: \"文件 ID\" },\n              filename: { type: \"string\" as const, description: \"文件名\" },\n              size: {\n                type: \"integer\" as const,\n                description: \"文件大小（字节）\",\n              },\n              mimeType: { type: \"string\" as const, description: \"MIME 类型\" },\n              url: {\n                type: \"string\" as const,\n                format: \"uri\" as const,\n                description: \"文件访问 URL\",\n              },\n              uploadedAt: {\n                type: \"string\" as const,\n                format: \"date-time\" as const,\n                description: \"上传时间\",\n              },\n            },\n          },\n          example: {\n            id: \"file_xyz789\",\n            filename: \"document.pdf\",\n            size: 1048576,\n            mimeType: \"application/pdf\",\n            url: \"https://cdn.example.com/files/document.pdf\",\n            uploadedAt: \"2024-01-15T10:30:00Z\",\n          },\n        },\n      },\n    },\n    \"413\": {\n      description: \"文件过大\",\n      content: {\n        \"application/json\": {\n          schema: {\n            type: \"object\" as const,\n            properties: {\n              error: { type: \"string\" as const },\n              message: { type: \"string\" as const },\n              maxSize: {\n                type: \"integer\" as const,\n                description: \"最大允许大小（字节）\",\n              },\n            },\n          },\n          example: {\n            error: \"FILE_TOO_LARGE\",\n            message: \"文件大小超过限制\",\n            maxSize: 10485760,\n          },\n        },\n      },\n    },\n    \"415\": {\n      description: \"不支持的文件类型\",\n      content: {\n        \"application/json\": {\n          schema: {\n            type: \"object\" as const,\n            properties: {\n              error: { type: \"string\" as const },\n              message: { type: \"string\" as const },\n              allowedTypes: {\n                type: \"array\" as const,\n                items: { type: \"string\" as const },\n                description: \"允许的文件类型\",\n              },\n            },\n          },\n          example: {\n            error: \"UNSUPPORTED_MEDIA_TYPE\",\n            message: \"不支持的文件类型\",\n            allowedTypes: [\"image/jpeg\", \"image/png\", \"application/pdf\"],\n          },\n        },\n      },\n    },\n  };\n\n  // 分页列表 API 的响应示例\n  const paginatedListResponses = {\n    \"200\": {\n      description: \"成功获取列表数据\",\n      content: {\n        \"application/json\": {\n          schema: {\n            type: \"object\" as const,\n            properties: {\n              data: {\n                type: \"array\" as const,\n                description: \"数据列表\",\n                items: {\n                  type: \"object\" as const,\n                  properties: {\n                    id: { type: \"string\" as const },\n                    title: { type: \"string\" as const },\n                    status: { type: \"string\" as const },\n                    createdAt: {\n                      type: \"string\" as const,\n                      format: \"date-time\" as const,\n                    },\n                  },\n                },\n              },\n              pagination: {\n                type: \"object\" as const,\n                description: \"分页信息\",\n                properties: {\n                  page: { type: \"integer\" as const, description: \"当前页码\" },\n                  limit: { type: \"integer\" as const, description: \"每页数量\" },\n                  total: { type: \"integer\" as const, description: \"总记录数\" },\n                  totalPages: {\n                    type: \"integer\" as const,\n                    description: \"总页数\",\n                  },\n                  hasNext: {\n                    type: \"boolean\" as const,\n                    description: \"是否有下一页\",\n                  },\n                  hasPrev: {\n                    type: \"boolean\" as const,\n                    description: \"是否有上一页\",\n                  },\n                },\n              },\n            },\n          },\n          example: {\n            data: [\n              {\n                id: \"item_001\",\n                title: \"示例项目 1\",\n                status: \"active\",\n                createdAt: \"2024-01-15T10:30:00Z\",\n              },\n              {\n                id: \"item_002\",\n                title: \"示例项目 2\",\n                status: \"pending\",\n                createdAt: \"2024-01-14T15:20:00Z\",\n              },\n            ],\n            pagination: {\n              page: 1,\n              limit: 20,\n              total: 150,\n              totalPages: 8,\n              hasNext: true,\n              hasPrev: false,\n            },\n          },\n        },\n      },\n    },\n  };\n\n  return (\n    <I18nProvider>\n      <div className=\"space-y-8 min-w-md\">\n        <div>\n          <h4 className=\"text-sm font-medium mb-3\">用户管理 API 响应</h4>\n          <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n            包含成功响应和各种错误情况的完整响应定义\n          </p>\n          <ResponsesSection responses={userApiResponses as any} />\n        </div>\n\n        <div>\n          <h4 className=\"text-sm font-medium mb-3\">文件上传 API 响应</h4>\n          <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n            文件上传接口的响应，包含文件信息和错误处理\n          </p>\n          <ResponsesSection responses={fileUploadResponses as any} />\n        </div>\n\n        <div>\n          <h4 className=\"text-sm font-medium mb-3\">分页列表 API 响应</h4>\n          <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n            带分页信息的列表数据响应格式\n          </p>\n          <ResponsesSection responses={paginatedListResponses as any} />\n        </div>\n      </div>\n    </I18nProvider>\n  );\n}\n",
      "type": "registry:example",
      "target": "components/example/responses-section-demo.tsx"
    }
  ]
}