{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "format-badge",
  "type": "registry:ui",
  "dependencies": [
    "react"
  ],
  "files": [
    {
      "path": "registry/pivot/format-badge.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport React from \"react\";\n\n// Define format types\ntype FormatType =\n  | \"int32\"\n  | \"int64\"\n  | \"float\"\n  | \"double\"\n  | \"date\"\n  | \"date-time\"\n  | \"email\"\n  | \"uuid\"\n  | \"uri\"\n  | \"hostname\"\n  | \"ipv4\"\n  | \"ipv6\"\n  | \"byte\"\n  | \"binary\"\n  | \"password\"\n  | string;\n\n// Define more abstract theme names\ntype FormatTheme =\n  | \"primary\"\n  | \"secondary\"\n  | \"success\"\n  | \"warning\"\n  | \"danger\"\n  | \"neutral\";\n\ninterface FormatBadgeProps {\n  format: FormatType;\n  theme?: FormatTheme | \"auto\"; // Theme prop using new names\n  className?: string;\n}\n\n// Map themes to colors using new names (only text color)\nconst formatThemeColors: Record<FormatTheme, string> = {\n  primary: \"text-blue-800 dark:text-blue-400\", // Was number\n  secondary: \"text-purple-800 dark:text-purple-400\", // Was date\n  success: \"text-green-800 dark:text-green-400\", // Was identifier\n  warning: \"text-yellow-800 dark:text-yellow-400\", // Was binary\n  danger: \"text-red-800 dark:text-red-400\", // Was sensitive\n  neutral: \"text-neutral-500 dark:text-neutral-400\", // Was default\n};\n\n// Helper to determine theme from format if theme is 'auto' (returns new theme names)\nconst getThemeForFormat = (format: FormatType): FormatTheme => {\n  if ([\"int32\", \"int64\", \"float\", \"double\"].includes(format)) return \"primary\";\n  if ([\"date\", \"date-time\"].includes(format)) return \"secondary\";\n  if ([\"email\", \"uuid\", \"uri\", \"hostname\", \"ipv4\", \"ipv6\"].includes(format))\n    return \"success\";\n  if ([\"byte\", \"binary\"].includes(format)) return \"warning\";\n  if ([\"password\"].includes(format)) return \"danger\";\n  return \"neutral\"; // Default to neutral\n};\n\nconst FormatBadge = React.forwardRef<HTMLSpanElement, FormatBadgeProps>(\n  ({ format, theme = \"auto\", className }, ref) => {\n    // Determine the final theme name\n    const finalTheme = theme === \"auto\" ? getThemeForFormat(format) : theme;\n\n    // Get color class from the theme map\n    const colorClass =\n      formatThemeColors[finalTheme] || formatThemeColors.neutral; // Fallback to neutral\n\n    return (\n      <span\n        ref={ref}\n        className={cn(\"text-xs font-medium font-mono\", colorClass, className)}\n      >\n        {format}\n      </span>\n    );\n  },\n);\n\nFormatBadge.displayName = \"FormatBadge\";\n\nexport { FormatBadge, type FormatTheme, type FormatType };\n",
      "type": "registry:ui"
    }
  ]
}