{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "i18n-demo",
  "type": "registry:example",
  "dependencies": [
    "react"
  ],
  "registryDependencies": [
    "button",
    "card",
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/required-marker.json",
    "https://pivotkit.vercel.app/r/try-it-out-panel.json"
  ],
  "files": [
    {
      "path": "registry/example/i18n-demo.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { I18nProvider, useI18n } from \"@/registry/lib/i18n\";\nimport { RequiredMarker } from \"@/registry/pivot/required-marker\";\nimport { TryItOutPanel } from \"@/registry/pivot/try-it-out-panel\";\nimport { useState } from \"react\";\n\n// 演示组件 - 在没有 I18nProvider 的情况下使用\nconst ComponentWithoutProvider = () => {\n  const { t, locale, setLocale } = useI18n();\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>组件（无 Provider）</CardTitle>\n        <CardDescription>\n          这个组件在没有 I18nProvider 包装的情况下使用 useI18n hook\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex items-center gap-2\">\n          <span>当前语言: {locale}</span>\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => setLocale(locale === \"en\" ? \"zh\" : \"en\")}\n          >\n            切换语言 (会显示警告)\n          </Button>\n        </div>\n\n        <div className=\"space-y-2\">\n          <p>翻译示例:</p>\n          <ul className=\"list-disc list-inside space-y-1 text-sm\">\n            <li>{t(\"Required\")}: <RequiredMarker /></li>\n            <li>{t(\"Parameters\")}</li>\n            <li>{t(\"Request Body\")}</li>\n            <li>{t(\"Send Request\")}</li>\n            <li>{t(\"Loading...\")}</li>\n          </ul>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// 演示组件 - 在有 I18nProvider 的情况下使用\nconst ComponentWithProvider = () => {\n  const { t, locale, setLocale } = useI18n();\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>组件（有 Provider）</CardTitle>\n        <CardDescription>\n          这个组件在 I18nProvider 包装下使用 useI18n hook，支持语言切换\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex items-center gap-2\">\n          <span>当前语言: {locale}</span>\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => setLocale(locale === \"en\" ? \"zh\" : \"en\")}\n          >\n            切换语言\n          </Button>\n        </div>\n\n        <div className=\"space-y-2\">\n          <p>翻译示例:</p>\n          <ul className=\"list-disc list-inside space-y-1 text-sm\">\n            <li>{t(\"Required\")}: <RequiredMarker /></li>\n            <li>{t(\"Parameters\")}</li>\n            <li>{t(\"Request Body\")}</li>\n            <li>{t(\"Send Request\")}</li>\n            <li>{t(\"Loading...\")}</li>\n          </ul>\n        </div>\n\n        <div className=\"mt-4\">\n          <TryItOutPanel\n            method=\"POST\"\n            path=\"/api/users\"\n            baseUrl=\"https://api.example.com\"\n            operation={{\n              summary: \"Create a new user\",\n              parameters: [\n                {\n                  name: \"userId\",\n                  in: \"path\",\n                  required: true,\n                  schema: { type: \"string\" as const },\n                  description: \"User ID\"\n                }\n              ],\n              requestBody: {\n                required: true,\n                description: \"User data\",\n                content: {\n                  \"application/json\": {\n                    schema: {\n                      type: \"object\" as const,\n                      properties: {\n                        name: { type: \"string\" as const },\n                        email: { type: \"string\" as const }\n                      }\n                    }\n                  }\n                }\n              },\n              responses: {\n                \"201\": {\n                  description: \"User created successfully\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\" as const,\n                        properties: {\n                          id: { type: \"string\" as const },\n                          name: { type: \"string\" as const },\n                          email: { type: \"string\" as const }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }}\n            collapsible={true}\n            defaultCollapsed={false}\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default function I18nDemo() {\n  const [showWithProvider, setShowWithProvider] = useState(true);\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"space-y-2\">\n        <h1 className=\"text-3xl font-bold\">i18n 系统重构演示</h1>\n        <p className=\"text-muted-foreground\">\n          演示重构后的 i18n 系统如何在有无 Provider 的情况下工作\n        </p>\n      </div>\n\n      <div className=\"flex gap-2\">\n        <Button\n          variant={showWithProvider ? \"default\" : \"outline\"}\n          onClick={() => setShowWithProvider(true)}\n        >\n          有 Provider\n        </Button>\n        <Button\n          variant={!showWithProvider ? \"default\" : \"outline\"}\n          onClick={() => setShowWithProvider(false)}\n        >\n          无 Provider\n        </Button>\n      </div>\n\n      {showWithProvider ? (\n        <I18nProvider>\n          <ComponentWithProvider />\n        </I18nProvider>\n      ) : (\n        <ComponentWithoutProvider />\n      )}\n\n      <Card>\n        <CardHeader>\n          <CardTitle>重构说明</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <h3 className=\"font-semibold\">主要改进:</h3>\n            <ul className=\"list-disc list-inside space-y-1 text-sm\">\n              <li><strong>向后兼容</strong>: 现有的 I18nProvider 和 useI18n 继续正常工作</li>\n              <li><strong>默认语言支持</strong>: 组件在没有 Provider 时自动使用英文作为默认语言</li>\n              <li><strong>优雅降级</strong>: setLocale 在没有 Provider 时会显示警告而不是抛出错误</li>\n              <li><strong>独立翻译函数</strong>: 提供 t() 函数可在组件外部使用</li>\n              <li><strong>工厂函数</strong>: createTranslator() 可创建指定语言的翻译函数</li>\n            </ul>\n          </div>\n\n          <div className=\"space-y-2\">\n            <h3 className=\"font-semibold\">使用方式:</h3>\n            <pre className=\"bg-muted p-3 rounded text-sm overflow-x-auto\">\n              {`// 在组件中使用 (推荐)\nconst { t } = useI18n();\n\n// 在组件外部使用\nimport { t } from \"@/registry/lib/i18n\";\n\n// 创建特定语言的翻译函数\nimport { createTranslator } from \"@/registry/lib/i18n\";\nconst tZh = createTranslator(\"zh\");`}\n            </pre>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": "components/example/i18n-demo.tsx"
    }
  ]
}