{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "resizable-sidebar",
  "type": "registry:ui",
  "dependencies": [
    "react"
  ],
  "files": [
    {
      "path": "registry/default/ui/resizable-sidebar.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\n\ninterface ResizableSidebarProps {\n  children: React.ReactNode;\n  className?: string;\n  defaultWidth?: number;\n  minWidth?: number;\n  maxWidth?: number;\n  sidebarClassName?: string;\n  onWidthChange?: (width: number) => void;\n  stickyPosition?: boolean; // 是否启用粘性定位\n  topOffset?: string; // 粘性定位的顶部偏移量，例如 \"0px\"\n}\n\nconst ResizableSidebar = React.forwardRef<HTMLDivElement, ResizableSidebarProps>(\n  (\n    {\n      children,\n      className,\n      defaultWidth = 280,\n      minWidth = 280,\n      maxWidth = 350,\n      sidebarClassName,\n      onWidthChange,\n      stickyPosition = true, // 默认启用粘性定位\n      topOffset = \"0px\", // 默认顶部偏移量为0\n    },\n    ref,\n  ) => {\n    const [sidebarWidth, setSidebarWidth] = useState(defaultWidth);\n    const [isDragging, setIsDragging] = useState(false);\n\n    const sidebarRef = useRef<HTMLDivElement>(null);\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    // Combine refs\n    useEffect(() => {\n      if (typeof ref === \"function\") {\n        ref(rootRef.current);\n      } else if (ref) {\n        ref.current = rootRef.current;\n      }\n    }, [ref]);\n\n    // 初始化 CSS 变量\n    useEffect(() => {\n      if (rootRef.current) {\n        rootRef.current.style.setProperty(\n          \"--sidebar-width\",\n          `${sidebarWidth}px`,\n        );\n      }\n    }, [sidebarWidth]);\n\n    // 开始拖动\n    const startDragging = useCallback((e: React.MouseEvent) => {\n      e.preventDefault();\n      setIsDragging(true);\n    }, []);\n\n    // 处理拖动过程\n    useEffect(() => {\n      const handleMouseMove = (e: MouseEvent) => {\n        if (!isDragging || !rootRef.current) return;\n\n        // 计算新宽度\n        let newWidth = e.clientX;\n\n        // 限制宽度范围\n        if (newWidth < minWidth) newWidth = minWidth;\n        if (newWidth > maxWidth) newWidth = maxWidth;\n\n        // 直接更新 CSS 变量，避免 React 状态更新引起重新渲染\n        rootRef.current.style.setProperty(\"--sidebar-width\", `${newWidth}px`);\n      };\n\n      const handleMouseUp = () => {\n        if (isDragging && rootRef.current) {\n          // 获取当前 CSS 变量值并更新 React 状态\n          const currentWidth =\n            rootRef.current.style.getPropertyValue(\"--sidebar-width\");\n          const numWidth = parseInt(currentWidth, 10);\n          if (!isNaN(numWidth)) {\n            setSidebarWidth(numWidth);\n            onWidthChange?.(numWidth);\n          }\n        }\n        setIsDragging(false);\n      };\n\n      if (isDragging) {\n        document.addEventListener(\"mousemove\", handleMouseMove);\n        document.addEventListener(\"mouseup\", handleMouseUp);\n      }\n\n      return () => {\n        document.removeEventListener(\"mousemove\", handleMouseMove);\n        document.removeEventListener(\"mouseup\", handleMouseUp);\n      };\n    }, [isDragging, minWidth, maxWidth, onWidthChange]);\n\n    return (\n      <div\n        ref={rootRef}\n        className={cn(className, isDragging && \"select-none cursor-ew-resize\")}\n      >\n        <div\n          ref={sidebarRef}\n          className={cn(\n            \"flex-shrink-0 relative\",\n            stickyPosition && \"sticky top-0 h-screen\",\n            sidebarClassName,\n          )}\n          style={{\n            width: \"var(--sidebar-width)\",\n            top: stickyPosition ? topOffset : undefined,\n          }}\n        >\n          {children}\n\n          {/* 调整大小手柄 */}\n          <div\n            className=\"absolute top-0 right-0 bottom-0 w-1 bg-transparent hover:bg-neutral-400 dark:hover:bg-neutral-500 cursor-ew-resize z-10 transition-colors\"\n            onMouseDown={startDragging}\n          />\n        </div>\n      </div>\n    );\n  },\n);\n\nResizableSidebar.displayName = \"ResizableSidebar\";\n\nexport {\n  ResizableSidebar,\n  type ResizableSidebarProps\n};\n\n",
      "type": "registry:ui",
      "target": "components/ui/resizable-sidebar.tsx"
    }
  ]
}