{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "type-indicator",
  "type": "registry:ui",
  "dependencies": [
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/lib"
  ],
  "files": [
    {
      "path": "registry/pivot/type-indicator.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useI18n } from \"@/registry/lib/i18n\";\nimport React from \"react\";\n\n// Define theme names for data types\ntype DataTypeTheme =\n  | \"primary\"\n  | \"secondary\"\n  | \"success\"\n  | \"warning\"\n  | \"danger\"\n  | \"info\"\n  | \"neutral\";\n\n// Define data types\ntype DataType =\n  | \"string\"\n  | \"number\"\n  | \"integer\"\n  | \"boolean\"\n  | \"array\"\n  | \"object\"\n  | \"null\";\n\ninterface TypeIndicatorProps {\n  type: DataType;\n  theme?: DataTypeTheme | \"auto\"; // Add theme prop\n  className?: string;\n  children?: React.ReactNode;\n}\n\n// Map themes to text colors\nconst dataTypeThemeColors: Record<DataTypeTheme, string> = {\n  primary: \"text-blue-800 dark:text-blue-400\", // number/integer\n  secondary: \"text-purple-800 dark:text-purple-400\", // array\n  success: \"text-green-800 dark:text-green-400\", // string\n  warning: \"text-yellow-800 dark:text-yellow-400\", // boolean\n  danger: \"text-red-800 dark:text-red-400\", // (Currently unused, could be for invalid/error types)\n  info: \"text-indigo-800 dark:text-indigo-400\", // object\n  neutral: \"text-neutral-500 dark:text-neutral-400\", // null & default\n};\n\n// Helper to determine theme from data type if theme is 'auto'\nconst getThemeForDataType = (type: DataType): DataTypeTheme => {\n  switch (type) {\n    case \"string\":\n      return \"success\";\n    case \"number\":\n    case \"integer\":\n      return \"primary\";\n    case \"boolean\":\n      return \"warning\";\n    case \"array\":\n      return \"secondary\";\n    case \"object\":\n      return \"info\";\n    case \"null\":\n      return \"neutral\";\n    default: // Should not happen with current DataType, but good practice\n      return \"neutral\";\n  }\n};\n\nconst TypeIndicator = React.forwardRef<HTMLSpanElement, TypeIndicatorProps>(\n  ({ type, theme = \"auto\", className, children }, ref) => {\n    const { t } = useI18n();\n\n    // Determine the final theme name\n    const finalTheme = theme === \"auto\" ? getThemeForDataType(type) : theme;\n\n    // Get text color class from the theme map\n    const colorClass =\n      dataTypeThemeColors[finalTheme] || dataTypeThemeColors.neutral; // Fallback to neutral\n\n    // Get type display\n    const getTypeDisplay = () => {\n      if (children) return children;\n      return type;\n    };\n\n    return (\n      <span\n        ref={ref}\n        className={cn(\"text-xs font-medium font-mono\", colorClass, className)}\n      >\n        {getTypeDisplay()}\n      </span>\n    );\n  },\n);\n\nTypeIndicator.displayName = \"TypeIndicator\";\n\nexport { TypeIndicator, type DataType, type DataTypeTheme };\n",
      "type": "registry:ui",
      "target": "components/pivot/type-indicator.tsx"
    }
  ]
}