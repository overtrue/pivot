{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "try-it-out-panel",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/method-label.json"
  ],
  "files": [
    {
      "path": "registry/pivot/try-it-out-panel.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useI18n } from \"@/registry/lib/i18n\";\nimport { resolveRef } from \"@/registry/lib/utils/resolve-ref\";\nimport { MethodLabel } from \"@/registry/pivot/method-label\";\nimport type { ResponseData } from \"@/types/project\";\nimport { ChevronDown, ChevronUp, Send } from \"lucide-react\";\nimport type { OpenAPIV3 } from 'openapi-types';\nimport React, { useState } from \"react\";\n\n// Import types from the centralized types file\n\n// Local interface definitions that are specific to this component\ninterface AuthState {\n  apiKey?: { [name: string]: string };\n  http?: { [scheme: string]: string };\n  oauth2?: { [flow: string]: { token: string; scopes: string[] } };\n  openIdConnect?: { token: string };\n}\n\ninterface TryItOutPanelProps {\n  operation: OpenAPIV3.OperationObject; // 必需的，不是可选的\n  method: string;\n  path: string;\n  baseUrl?: string;\n  components?: OpenAPIV3.ComponentsObject;\n  collapsible?: boolean;\n  defaultCollapsed?: boolean;\n  className?: string;\n}\n\nconst TryItOutPanel = React.forwardRef<HTMLDivElement, TryItOutPanelProps>(\n  ({\n    operation,\n    method,\n    path,\n    baseUrl = '',\n    components,\n    collapsible = false,\n    defaultCollapsed = false,\n    className,\n  }, ref) => {\n    const { t } = useI18n();\n\n    // State\n    const [paramValues, setParamValues] = useState<Record<string, string>>({});\n    const [requestBodyValue, setRequestBodyValue] = useState<string>('');\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [response, setResponse] = useState<ResponseData | null>(null);\n    const [headers, setHeaders] = useState<Record<string, string>>({\n      'Content-Type': 'application/json',\n    });\n    const [error, setError] = useState<string | null>(null);\n    const [collapsed, setCollapsed] = useState<boolean>(defaultCollapsed);\n    const [authState, setAuthState] = useState<AuthState>({});\n    const [activeSecurityScheme, setActiveSecurityScheme] = useState<string | null>(null);\n\n    // Helper functions\n    const toggleCollapse = () => {\n      if (collapsible) {\n        setCollapsed(!collapsed);\n      }\n    };\n\n    const resolveParameters = () => {\n      const resolvedParams: OpenAPIV3.ParameterObject[] = [];\n\n      if (operation.parameters) {\n        operation.parameters.forEach((param) => {\n          if ('$ref' in param) {\n            const resolvedParam = resolveRef<OpenAPIV3.ParameterObject>(param, components, 'parameters');\n            if (resolvedParam) {\n              resolvedParams.push(resolvedParam);\n            }\n          } else {\n            resolvedParams.push(param);\n          }\n        });\n      }\n\n      return resolvedParams;\n    };\n\n    const resolveRequestBody = () => {\n      if (!operation.requestBody) return null;\n      return operation.requestBody;\n    };\n\n    const resolveSecuritySchemes = () => {\n      const securityRequirements: OpenAPIV3.SecurityRequirementObject[] = operation.security ||\n        (components?.securitySchemes ? [Object.keys(components.securitySchemes).reduce((obj: OpenAPIV3.SecurityRequirementObject, key) => {\n          obj[key] = [];\n          return obj;\n        }, {})] : []);\n\n      if (!securityRequirements.length || !components?.securitySchemes) return [];\n\n      const resolvedSchemes: { name: string; scheme: OpenAPIV3.SecuritySchemeObject; scopes: string[] }[] = [];\n\n      securityRequirements.forEach(requirement => {\n        Object.entries(requirement).forEach(([schemeName, scopes]) => {\n          const schemeOrRef = components.securitySchemes?.[schemeName];\n          if (schemeOrRef) {\n            const scheme = resolveRef<OpenAPIV3.SecuritySchemeObject>(schemeOrRef, components, 'securitySchemes');\n            if (scheme) {\n              resolvedSchemes.push({\n                name: schemeName,\n                scheme,\n                scopes\n              });\n            }\n          }\n        });\n      });\n\n      return resolvedSchemes;\n    };\n\n    const handleParamChange = (name: string, value: string) => {\n      setParamValues((prev) => ({\n        ...prev,\n        [name]: value,\n      }));\n    };\n\n    const handleRequestBodyChange = (value: string) => {\n      setRequestBodyValue(value);\n    };\n\n    const handleHeaderChange = (name: string, value: string) => {\n      setHeaders((prev) => ({\n        ...prev,\n        [name]: value,\n      }));\n    };\n\n    const handleAuthChange = (scheme: { name: string; scheme: OpenAPIV3.SecuritySchemeObject; scopes: string[] }, value: string) => {\n      const { name, scheme: schemeObj } = scheme;\n\n      setAuthState(prev => {\n        const newState = { ...prev };\n\n        switch (schemeObj.type) {\n          case 'apiKey':\n            if (!newState.apiKey) newState.apiKey = {};\n            newState.apiKey[name] = value;\n            break;\n          case 'http':\n            if (!newState.http) newState.http = {};\n            newState.http[schemeObj.scheme || ''] = value;\n            break;\n          case 'oauth2':\n            if (!newState.oauth2) newState.oauth2 = {};\n            if (!newState.oauth2[name]) {\n              newState.oauth2[name] = { token: value, scopes: scheme.scopes };\n            } else {\n              newState.oauth2[name].token = value;\n              newState.oauth2[name].scopes = scheme.scopes;\n            }\n            break;\n          case 'openIdConnect':\n            newState.openIdConnect = { token: value };\n            break;\n        }\n\n        return newState;\n      });\n    };\n\n    const buildRequestUrl = () => {\n      let url = baseUrl + path;\n      const parameters = resolveParameters();\n\n      // Replace path parameters\n      parameters\n        .filter((param) => param.in === 'path')\n        .forEach((param) => {\n          const value = paramValues[param.name] || '';\n          url = url.replace(`{${param.name}}`, encodeURIComponent(value));\n        });\n\n      // Add query parameters\n      const queryParams = parameters\n        .filter((param) => param.in === 'query' && paramValues[param.name])\n        .map((param) => `${param.name}=${encodeURIComponent(paramValues[param.name] || '')}`);\n\n      if (queryParams.length > 0) {\n        url += `?${queryParams.join('&')}`;\n      }\n\n      return url;\n    };\n\n    const buildRequestHeaders = () => {\n      const requestHeaders: Record<string, string> = { ...headers };\n      const parameters = resolveParameters();\n      const securitySchemes = resolveSecuritySchemes();\n\n      // Add header parameters\n      parameters\n        .filter((param) => param.in === 'header' && paramValues[param.name])\n        .forEach((param) => {\n          requestHeaders[param.name] = paramValues[param.name] || '';\n        });\n\n      // Add auth headers\n      if (securitySchemes.length > 0) {\n        securitySchemes.forEach(({ name, scheme }) => {\n          switch (scheme.type) {\n            case 'apiKey':\n              if (scheme.in === 'header' && authState.apiKey?.[name]) {\n                requestHeaders[scheme.name || ''] = authState.apiKey[name];\n              }\n              break;\n            case 'http':\n              if (scheme.scheme === 'basic' && authState.http?.['basic']) {\n                requestHeaders['Authorization'] = `Basic ${authState.http['basic']}`;\n              } else if (scheme.scheme === 'bearer' && authState.http?.['bearer']) {\n                requestHeaders['Authorization'] = `Bearer ${authState.http['bearer']}`;\n              }\n              break;\n            case 'oauth2':\n              if (authState.oauth2?.[name]?.token) {\n                requestHeaders['Authorization'] = `Bearer ${authState.oauth2[name].token}`;\n              }\n              break;\n            case 'openIdConnect':\n              if (authState.openIdConnect?.token) {\n                requestHeaders['Authorization'] = `Bearer ${authState.openIdConnect.token}`;\n              }\n              break;\n          }\n        });\n      }\n\n      return requestHeaders;\n    };\n\n    const addAuthQueryParams = (url: string) => {\n      const securitySchemes = resolveSecuritySchemes();\n      let updatedUrl = url;\n      const urlObj = new URL(updatedUrl, window.location.origin);\n\n      securitySchemes.forEach(({ name, scheme }) => {\n        if (scheme.type === 'apiKey' && scheme.in === 'query' && authState.apiKey?.[name]) {\n          urlObj.searchParams.set(scheme.name || '', authState.apiKey[name]);\n        }\n      });\n\n      return urlObj.pathname + urlObj.search;\n    };\n\n    const sendRequest = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        setResponse(null);\n\n        let url = buildRequestUrl();\n        url = addAuthQueryParams(url);\n\n        const requestHeaders = buildRequestHeaders();\n        const requestBody = resolveRequestBody();\n        let body: string | undefined = undefined;\n\n        if (requestBody && requestBodyValue) {\n          try {\n            JSON.parse(requestBodyValue);\n            body = requestBodyValue;\n          } catch (e) {\n            setError('请求体不是有效的JSON');\n            setIsLoading(false);\n            return;\n          }\n        }\n\n        const startTime = Date.now();\n\n        const response = await fetch(url, {\n          method: method.toUpperCase(),\n          headers: requestHeaders,\n          body: ['GET', 'HEAD'].includes(method.toUpperCase()) ? undefined : body,\n        });\n\n        const endTime = Date.now();\n        const duration = endTime - startTime;\n\n        const responseHeaders: Record<string, string> = {};\n        response.headers.forEach((value, key) => {\n          responseHeaders[key] = value;\n        });\n\n        let responseBody = '';\n        const contentType = response.headers.get('content-type') || '';\n\n        if (contentType.includes('application/json')) {\n          const jsonBody = await response.json();\n          responseBody = JSON.stringify(jsonBody, null, 2);\n        } else if (\n          contentType.includes('text/') ||\n          contentType.includes('application/xml') ||\n          contentType.includes('application/javascript')\n        ) {\n          responseBody = await response.text();\n        } else {\n          responseBody = '无法显示二进制响应内容';\n        }\n\n        setResponse({\n          status: response.status,\n          statusText: response.statusText,\n          headers: responseHeaders,\n          data: responseBody,\n          time: duration,\n        });\n\n      } catch (err) {\n        console.error(t('Request error') + ':', err);\n        setError(err instanceof Error ? err.message : t('Error sending request'));\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    const getStatusStyle = (status: number) => {\n      if (status >= 200 && status < 300) {\n        return 'bg-green-100 dark:bg-green-900/50 text-green-800 dark:text-green-300';\n      } else if (status >= 400 && status < 500) {\n        return 'bg-yellow-100 dark:bg-yellow-900/50 text-yellow-800 dark:text-yellow-300';\n      } else if (status >= 500) {\n        return 'bg-red-100 dark:bg-red-900/50 text-red-800 dark:text-red-300';\n      }\n      return 'bg-neutral-100 dark:bg-neutral-700 text-neutral-800 dark:text-neutral-300';\n    };\n\n    const renderAuthInputs = () => {\n      const securitySchemes = resolveSecuritySchemes();\n\n      if (!securitySchemes.length) return null;\n\n      return (\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-sm font-medium text-neutral-700 dark:text-neutral-300\">{t('Authentication')}</h3>\n          </div>\n          <div className=\"space-y-3\">\n            {securitySchemes.length > 1 && (\n              <div className=\"mb-2\">\n                <label className=\"text-xs text-neutral-600 dark:text-neutral-400 block mb-1\">{t('Select authentication method')}</label>\n                <select\n                  className=\"w-full px-2 py-2 border dark:border-neutral-700 rounded text-sm dark:bg-neutral-700 dark:text-neutral-200\"\n                  value={activeSecurityScheme || ''}\n                  onChange={(e) => setActiveSecurityScheme(e.target.value || null)}\n                >\n                  <option value=\"\">{t('No authentication')}</option>\n                  {securitySchemes.map((scheme, index) => (\n                    <option key={index} value={scheme.name}>\n                      {scheme.name} ({scheme.scheme.type})\n                    </option>\n                  ))}\n                </select>\n              </div>\n            )}\n\n            {securitySchemes\n              .filter(scheme => !activeSecurityScheme || scheme.name === activeSecurityScheme)\n              .map((scheme, index) => {\n                const { name, scheme: schemeObj } = scheme;\n\n                switch (schemeObj.type) {\n                  case 'apiKey':\n                    return (\n                      <div key={index} className=\"p-3 border dark:border-neutral-700 rounded bg-blue-50 dark:bg-blue-900/30\">\n                        <div className=\"text-xs font-semibold text-blue-800 dark:text-blue-300 mb-2\">{t('API Key')} ({schemeObj.in})</div>\n                        <label className=\"text-xs text-neutral-600 dark:text-neutral-400 block mb-1\">\n                          {schemeObj.name} {schemeObj.description && `- ${schemeObj.description}`}\n                        </label>\n                        <input\n                          type=\"text\"\n                          className=\"w-full px-2 py-1 border dark:border-neutral-700 rounded text-sm dark:bg-neutral-700 dark:text-neutral-200\"\n                          placeholder={`输入 ${schemeObj.name} 值`}\n                          value={authState.apiKey?.[name] || ''}\n                          onChange={(e) => handleAuthChange(scheme, e.target.value)}\n                        />\n                      </div>\n                    );\n\n                  case 'http':\n                    if (schemeObj.scheme === 'basic') {\n                      return (\n                        <div key={index} className=\"p-3 border dark:border-neutral-700 rounded bg-green-50 dark:bg-green-900/30\">\n                          <div className=\"text-xs font-semibold text-green-800 dark:text-green-300 mb-2\">{t('HTTP Basic')}</div>\n                          <label className=\"text-xs text-neutral-600 dark:text-neutral-400 block mb-1\">\n                            Base64 编码的用户名:密码\n                            {schemeObj.description && ` - ${schemeObj.description}`}\n                          </label>\n                          <input\n                            type=\"text\"\n                            className=\"w-full px-2 py-1 border dark:border-neutral-700 rounded text-sm dark:bg-neutral-700 dark:text-neutral-200\"\n                            placeholder=\"输入 Base64 编码的认证信息\"\n                            value={authState.http?.['basic'] || ''}\n                            onChange={(e) => handleAuthChange(scheme, e.target.value)}\n                          />\n                        </div>\n                      );\n                    } else if (schemeObj.scheme === 'bearer') {\n                      return (\n                        <div key={index} className=\"p-3 border dark:border-neutral-700 rounded bg-purple-50 dark:bg-purple-900/30\">\n                          <div className=\"text-xs font-semibold text-purple-800 dark:text-purple-300 mb-2\">\n                            Bearer Token {schemeObj.bearerFormat && `(${schemeObj.bearerFormat})`}\n                          </div>\n                          <label className=\"text-xs text-neutral-600 dark:text-neutral-400 block mb-1\">\n                            Token {schemeObj.description && ` - ${schemeObj.description}`}\n                          </label>\n                          <input\n                            type=\"text\"\n                            className=\"w-full px-2 py-1 border dark:border-neutral-700 rounded text-sm dark:bg-neutral-700 dark:text-neutral-200\"\n                            placeholder=\"输入 Bearer Token\"\n                            value={authState.http?.['bearer'] || ''}\n                            onChange={(e) => handleAuthChange(scheme, e.target.value)}\n                          />\n                        </div>\n                      );\n                    }\n                    break;\n\n                  case 'oauth2':\n                    return (\n                      <div key={index} className=\"p-3 border dark:border-neutral-700 rounded bg-orange-50 dark:bg-orange-900/30\">\n                        <div className=\"text-xs font-semibold text-orange-800 dark:text-orange-300 mb-2\">OAuth 2.0</div>\n                        {scheme.scopes.length > 0 && (\n                          <div className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-2\">\n                            <div className=\"font-medium mb-1\">{t('Required Permissions')}:</div>\n                            <ul className=\"list-disc list-inside space-y-0.5\">\n                              {scheme.scopes.map((scope, i) => (\n                                <li key={i} className=\"text-neutral-600 dark:text-neutral-400\">{scope}</li>\n                              ))}\n                            </ul>\n                          </div>\n                        )}\n                        <label className=\"text-xs text-neutral-600 dark:text-neutral-400 block mb-1\">\n                          Access Token\n                        </label>\n                        <input\n                          type=\"text\"\n                          className=\"w-full px-2 py-1 border dark:border-neutral-700 rounded text-sm dark:bg-neutral-700 dark:text-neutral-200\"\n                          placeholder=\"输入 OAuth2 Access Token\"\n                          value={authState.oauth2?.[name]?.token || ''}\n                          onChange={(e) => handleAuthChange(scheme, e.target.value)}\n                        />\n                      </div>\n                    );\n\n                  case 'openIdConnect':\n                    return (\n                      <div key={index} className=\"p-3 border dark:border-neutral-700 rounded bg-indigo-50 dark:bg-indigo-900/30\">\n                        <div className=\"text-xs font-semibold text-indigo-800 dark:text-indigo-300 mb-2\">\n                          OpenID Connect ({schemeObj.openIdConnectUrl})\n                        </div>\n                        <label className=\"text-xs text-neutral-600 dark:text-neutral-400 block mb-1\">\n                          ID Token\n                          {schemeObj.description && ` - ${schemeObj.description}`}\n                        </label>\n                        <input\n                          type=\"text\"\n                          className=\"w-full px-2 py-1 border dark:border-neutral-700 rounded text-sm dark:bg-neutral-700 dark:text-neutral-200\"\n                          placeholder=\"输入 OpenID Token\"\n                          value={authState.openIdConnect?.token || ''}\n                          onChange={(e) => handleAuthChange(scheme, e.target.value)}\n                        />\n                      </div>\n                    );\n                }\n\n                return null;\n              })}\n          </div>\n        </div>\n      );\n    };\n\n    return (\n      <div ref={ref} className={cn(\"border dark:border-neutral-700 rounded-lg overflow-hidden bg-white dark:bg-neutral-800 transition-all\", className)}>\n        <div\n          className={`bg-neutral-50 dark:bg-neutral-800/70 px-4 py-3 flex items-center justify-between ${collapsible ? 'cursor-pointer' : ''}`}\n          onClick={collapsible ? toggleCollapse : undefined}\n        >\n          <div className=\"flex items-center min-w-0\">\n            <MethodLabel method={method.toUpperCase() as any} className=\"mr-2 flex-shrink-0\" />\n            <div className=\"text-sm text-neutral-800 dark:text-neutral-200 font-mono truncate overflow-hidden\">\n              {path}\n            </div>\n          </div>\n          {collapsible && (\n            <div className=\"text-neutral-500 dark:text-neutral-400 flex-shrink-0 ml-2\">\n              {collapsed ? <ChevronDown size={18} /> : <ChevronUp size={18} />}\n            </div>\n          )}\n        </div>\n\n        {!collapsed && (\n          <div className=\"p-4 space-y-4\">\n            {/* Parameter inputs */}\n            {resolveParameters().length > 0 && (\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-sm font-medium text-neutral-700 dark:text-neutral-300\">{t('Request Parameters')}</h3>\n                </div>\n                <div className=\"space-y-3\">\n                  {resolveParameters().map(param => (\n                    <div key={param.name} className=\"grid grid-cols-12 gap-2 items-start\">\n                      <div className=\"col-span-7\">\n                        <div className=\"flex items-center gap-1\">\n                          <span className={`text-sm ${param.required ? 'font-semibold' : ''} dark:text-neutral-300`}>\n                            {param.name} {param.required && <span className=\"text-red-500 dark:text-red-400\">*</span>}\n                          </span>\n                          <span className=\"text-xs bg-neutral-100 dark:bg-neutral-700 px-1 py-0.5 rounded dark:text-neutral-300\">{param.in}</span>\n                        </div>\n                      </div>\n                      <div className=\"col-span-5\">\n                        <input\n                          type=\"text\"\n                          value={paramValues[param.name] || ''}\n                          onChange={(e) => handleParamChange(param.name, e.target.value)}\n                          className=\"w-full px-2 py-1 border dark:border-neutral-700 rounded text-sm dark:bg-neutral-700 dark:text-neutral-200\"\n                          placeholder={`Enter ${param.name} value`}\n                        />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Authentication section */}\n            {renderAuthInputs()}\n\n            {/* Request body input */}\n            {resolveRequestBody() && (\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-sm font-medium text-neutral-700 dark:text-neutral-300\">{t('Request Body')}</h3>\n                </div>\n                <div className=\"text-xs text-neutral-500 dark:text-neutral-400 mb-1\">\n                  {(() => {\n                    const requestBody = resolveRequestBody();\n                    if (requestBody && 'description' in requestBody) {\n                      return requestBody.description || 'Please enter request body data';\n                    }\n                    return 'Please enter request body data';\n                  })()}\n                </div>\n                <div className=\"bg-neutral-50 dark:bg-neutral-700 p-1 rounded-md border dark:border-neutral-600\">\n                  <textarea\n                    className=\"w-full bg-transparent p-2 font-mono text-sm resize-y dark:text-neutral-200\"\n                    value={requestBodyValue}\n                    onChange={(e) => handleRequestBodyChange(e.target.value)}\n                    rows={5}\n                    placeholder=\"{ /* Request body data */ }\"\n                  />\n                </div>\n              </div>\n            )}\n\n            {/* Custom request headers */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-sm font-medium text-neutral-700 dark:text-neutral-300\">{t('Request Headers')}</h3>\n              </div>\n              <div className=\"space-y-2\">\n                {Object.entries(headers).map(([key, value]) => (\n                  <div key={key} className=\"grid grid-cols-12 gap-2 items-center\">\n                    <div className=\"col-span-4\">\n                      <input\n                        type=\"text\"\n                        value={key}\n                        onChange={(e) => {\n                          const newHeaders = { ...headers };\n                          const oldValue = newHeaders[key];\n                          delete newHeaders[key];\n                          const newKey = e.target.value;\n                          if (newKey && newKey.trim()) {\n                            newHeaders[newKey] = oldValue || '';\n                          }\n                          setHeaders(newHeaders);\n                        }}\n                        className=\"w-full px-2 py-1 border dark:border-neutral-700 rounded text-sm dark:bg-neutral-700 dark:text-neutral-200\"\n                        placeholder=\"Header name\"\n                      />\n                    </div>\n                    <div className=\"col-span-6\">\n                      <input\n                        type=\"text\"\n                        value={value}\n                        onChange={(e) => handleHeaderChange(key, e.target.value)}\n                        className=\"w-full px-2 py-1 border dark:border-neutral-700 rounded text-sm dark:bg-neutral-700 dark:text-neutral-200\"\n                        placeholder=\"Value\"\n                      />\n                    </div>\n                    <div className=\"col-span-2 flex justify-end\">\n                      <button\n                        onClick={() => {\n                          const newHeaders = { ...headers };\n                          delete newHeaders[key];\n                          setHeaders(newHeaders);\n                        }}\n                        className=\"px-2 py-1 bg-neutral-100 dark:bg-neutral-700 hover:bg-neutral-200 dark:hover:bg-neutral-600 text-neutral-700 dark:text-neutral-300 rounded text-sm transition-colors\"\n                      >\n                        {t('Remove')}\n                      </button>\n                    </div>\n                  </div>\n                ))}\n                <button\n                  onClick={() => {\n                    setHeaders((prev) => ({\n                      ...prev,\n                      [`Header-${Object.keys(headers).length}`]: '',\n                    }));\n                  }}\n                  className=\"text-xs px-3 py-1 rounded bg-neutral-100 dark:bg-neutral-700 hover:bg-neutral-200 dark:hover:bg-neutral-600 text-neutral-700 dark:text-neutral-300 transition-colors inline-flex items-center\"\n                >\n                  {t('Add Header')}\n                </button>\n              </div>\n            </div>\n\n            {/* Send request button */}\n            <div className=\"pt-2\">\n              <button\n                onClick={sendRequest}\n                disabled={isLoading}\n                className={`px-3 py-1.5 rounded-md text-white text-sm font-medium inline-flex items-center ${isLoading\n                  ? 'bg-blue-400 dark:bg-blue-500/50 cursor-not-allowed'\n                  : 'bg-blue-600 hover:bg-blue-700 dark:bg-blue-600 dark:hover:bg-blue-500'\n                  } transition-colors`}\n              >\n                <Send size={14} className=\"mr-1.5\" />\n                {isLoading ? t(\"Sending...\") : t(\"Send Request\")}\n              </button>\n            </div>\n\n            {/* Error message */}\n            {error && (\n              <div className=\"mt-4 p-3 bg-red-50 dark:bg-red-900/30 text-red-700 dark:text-red-300 rounded-md border border-red-100 dark:border-red-800\">\n                <p className=\"text-sm font-medium\">{t('Request error')}</p>\n                <p className=\"text-sm\">{error}</p>\n              </div>\n            )}\n\n            {/* Response results */}\n            {response && (\n              <div className=\"mt-4 border dark:border-neutral-700 rounded-md overflow-hidden\">\n                <div className=\"bg-neutral-50 dark:bg-neutral-800/70 p-3 border-b dark:border-neutral-700 flex justify-between items-center\">\n                  <div className=\"flex items-center\">\n                    <span className={`px-2 py-1 rounded text-xs font-medium ${getStatusStyle(response.status)}`}>\n                      {response.status} {response.statusText}\n                    </span>\n                    <span className=\"ml-2 text-sm text-neutral-600 dark:text-neutral-400\">\n                      {response.time}ms\n                    </span>\n                  </div>\n                </div>\n                <div className=\"divide-y dark:divide-neutral-700\">\n                  {/* Response headers */}\n                  <div className=\"p-3\">\n                    <h4 className=\"text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2\">{t('Response Headers')}</h4>\n                    <div className=\"bg-neutral-50 dark:bg-neutral-700 p-3 rounded-md border dark:border-neutral-600 overflow-x-auto\">\n                      <pre className=\"text-xs font-mono dark:text-neutral-300\">\n                        {Object.entries(response.headers).map(([key, value]) => (\n                          `${key}: ${value}\\n`\n                        ))}\n                      </pre>\n                    </div>\n                  </div>\n\n                  {/* Response body */}\n                  <div className=\"p-3\">\n                    <h4 className=\"text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2\">{t('Response')}</h4>\n                    <div className=\"bg-neutral-900 text-neutral-100 p-3 rounded-md overflow-x-auto\">\n                      <pre className=\"text-xs font-mono whitespace-pre-wrap\">\n                        {response.data}\n                      </pre>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nTryItOutPanel.displayName = \"TryItOutPanel\";\n\nexport { TryItOutPanel, type TryItOutPanelProps };\n\n",
      "type": "registry:ui",
      "target": "components/pivot/try-it-out-panel.tsx"
    }
  ]
}