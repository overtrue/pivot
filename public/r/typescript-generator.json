{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "typescript-generator",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "react"
  ],
  "files": [
    {
      "path": "registry/pivot/typescript-generator.tsx",
      "content": "import type { CodeGenerator, CodeGeneratorParams } from \"@/types/project\";\nimport { Braces } from \"lucide-react\";\nimport React from \"react\";\n\n// TypeScriptGenerator implementation\nexport class TypeScriptGeneratorClass implements CodeGenerator {\n  id = \"typescript\";\n  label = \"TypeScript\";\n\n  getIcon() {\n    return <Braces size={16} />;\n  }\n\n  generateCode(params: CodeGeneratorParams): string {\n    const { endpoint, method, requestBodyExample, requestBody } = params;\n\n    return `// Using fetch API\nasync function call${method}() {\n  const response = await fetch(\"${endpoint}\", {\n    method: \"${method}\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }${[\"POST\", \"PUT\", \"PATCH\"].includes(method) && requestBody\n        ? `,\n    body: JSON.stringify(\n${JSON.stringify(requestBodyExample, null, 4)\n          .split(\"\\n\")\n          .map((line) => \"      \" + line)\n          .join(\"\\n\")}\n    )`\n        : \"\"\n      }\n  });\n\n  const data = await response.json();\n  return data;\n}`;\n  }\n}\n\n// React component wrapper\ninterface TypeScriptGeneratorProps {\n  params: CodeGeneratorParams;\n  className?: string;\n}\n\nconst TypeScriptGeneratorComponent = React.forwardRef<HTMLDivElement, TypeScriptGeneratorProps>(\n  ({ params, className }, ref) => {\n    const generator = new TypeScriptGeneratorClass();\n    const code = generator.generateCode(params);\n\n    return (\n      <div ref={ref} className={className}>\n        <div className=\"flex items-center gap-2 mb-2\">\n          {generator.getIcon()}\n          <span className=\"font-medium\">{generator.label}</span>\n        </div>\n        <pre className=\"bg-neutral-100 dark:bg-neutral-800 p-4 rounded-md overflow-x-auto\">\n          <code className=\"text-sm language-typescript\">{code}</code>\n        </pre>\n      </div>\n    );\n  },\n);\n\nTypeScriptGeneratorComponent.displayName = \"TypeScriptGenerator\";\n\nexport {\n  TypeScriptGeneratorComponent as TypeScriptGenerator,\n  type TypeScriptGeneratorProps\n};\n\n",
      "type": "registry:ui"
    }
  ]
}