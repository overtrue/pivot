{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "responses-section",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/hooks.json",
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/response-group.json",
    "https://pivotkit.vercel.app/r/section-title.json",
    "https://pivotkit.vercel.app/r/status-code.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/responses-section.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useOpenApi } from \"@/registry/default/hooks/use-openapi\";\nimport { useI18n } from \"@/registry/default/lib/i18n\";\nimport type { OpenAPIV3 } from \"openapi-types\";\nimport React, { useMemo, useState } from \"react\";\n\nimport { ResponseGroup } from \"@/registry/default/ui/response-group\";\nimport { SectionTitle } from \"@/registry/default/ui/section-title\";\nimport { StatusCode } from \"@/registry/default/ui/status-code\";\n\n// 简化的接口设计\ninterface ResponsesSectionProps {\n  responses: OpenAPIV3.ResponsesObject;\n  components?: OpenAPIV3.ComponentsObject;\n  spec?: OpenAPIV3.Document;\n  defaultActiveStatus?: string;\n  onStatusSelect?: (status: string) => void;\n  className?: string;\n}\n\n// 提取状态码排序逻辑\nconst getSortedStatusCodes = (responses: OpenAPIV3.ResponsesObject): string[] => {\n  const codes = Object.keys(responses).filter(code => code !== 'default');\n  const defaultCode = responses.default ? ['default'] : [];\n\n  return [\n    ...codes.sort((a, b) => parseInt(a) - parseInt(b)),\n    ...defaultCode\n  ];\n};\n\n// 提取智能状态选择逻辑\nconst getDefaultStatus = (statusCodes: string[]): string | null => {\n  if (statusCodes.length === 0) return null;\n\n  // 优先选择 2xx 状态码，然后是 default，最后是第一个可用状态码\n  const successCode = statusCodes.find(code => /^2\\d\\d$/.test(code));\n  if (successCode) return successCode;\n\n  const defaultCode = statusCodes.find(code => code === 'default');\n  if (defaultCode) return defaultCode;\n\n  return statusCodes[0];\n};\n\n// 提取错误状态组件\nconst ErrorState = ({ message, tip }: { message: string; tip?: string }) => (\n  <div className=\"text-red-600 dark:text-red-400 text-sm p-4 bg-red-50 dark:bg-red-900/30 rounded border border-red-200 dark:border-red-800\">\n    {message}\n    {tip && (\n      <div className=\"text-xs mt-2\">\n        💡 {tip}\n      </div>\n    )}\n  </div>\n);\n\nconst ResponsesSection = React.forwardRef<\n  HTMLDivElement,\n  ResponsesSectionProps\n>(({\n  responses,\n  components,\n  spec,\n  defaultActiveStatus,\n  onStatusSelect,\n  className = \"\"\n}, ref) => {\n  const { t } = useI18n();\n  const openapi = useOpenApi(spec || null, components);\n\n  // 简化的状态管理\n  const sortedStatusCodes = useMemo(() => getSortedStatusCodes(responses), [responses]);\n  const initialStatus = defaultActiveStatus || getDefaultStatus(sortedStatusCodes);\n  const [activeStatus, setActiveStatus] = useState<string | null>(initialStatus);\n\n  // 简化的状态选择处理\n  const handleStatusSelect = (status: string) => {\n    setActiveStatus(status);\n    onStatusSelect?.(status);\n  };\n\n  // 获取当前响应\n  const activeResponse = useMemo(() => {\n    if (!activeStatus) return null;\n    const response = responses[activeStatus];\n    if (!response) return null;\n\n    // 检查是否是引用对象\n    if (typeof response === \"object\" && response !== null && \"$ref\" in response) {\n      // 如果有引用，尝试解析\n      return openapi.resolve<OpenAPIV3.ResponseObject>(response, \"responses\");\n    } else {\n      // 如果没有引用，直接使用原始数据\n      return response as OpenAPIV3.ResponseObject;\n    }\n  }, [activeStatus, responses, openapi]);\n\n  // 如果没有响应定义\n  if (sortedStatusCodes.length === 0) {\n    return (\n      <div ref={ref} className={cn(\"space-y-4\", className)}>\n        <SectionTitle title={t(\"Responses\")} className=\"text-lg\" />\n        <div className=\"text-yellow-600 dark:text-yellow-400 text-sm p-4 bg-yellow-50 dark:bg-yellow-900/30 rounded border border-yellow-200 dark:border-yellow-800\">\n          {t(\"No responses defined for this operation\")}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div ref={ref} className={cn(\"space-y-4\", className)}>\n      <SectionTitle title={t(\"Responses\")} className=\"text-lg\" />\n\n      {/* 状态码选择器 */}\n      <div className=\"flex flex-wrap gap-2\">\n        {sortedStatusCodes.map((status) => (\n          <button\n            key={status}\n            onClick={() => handleStatusSelect(status)}\n            className=\"relative\"\n          >\n            <StatusCode\n              code={status === \"default\" ? \"default\" : status}\n              className={cn(\n                \"cursor-pointer transition-all\",\n                status === activeStatus\n                  ? \"opacity-100\"\n                  : \"opacity-60 hover:opacity-100\",\n              )}\n            />\n          </button>\n        ))}\n      </div>\n\n      {/* 响应内容 */}\n      {activeStatus && activeResponse && (\n        <div className=\"rounded\">\n          <ResponseGroup\n            status={activeStatus}\n            response={activeResponse}\n            components={components}\n          />\n        </div>\n      )}\n\n      {/* 解析错误状态 */}\n      {activeStatus && !activeResponse && (\n        <ErrorState\n          message={t(\"Could not resolve response %s\").replace(\"%s\", activeStatus)}\n          tip={!openapi.hasComponents ? t(\"Tip: Provide components or wrap with OpenAPIProvider\") : undefined}\n        />\n      )}\n    </div>\n  );\n});\n\nResponsesSection.displayName = \"ResponsesSection\";\n\nexport { ResponsesSection, type ResponsesSectionProps };\n",
      "type": "registry:ui",
      "target": "components/pivot/responses-section.tsx"
    }
  ]
}