{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "responses-section",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/response-group.json",
    "https://pivotkit.vercel.app/r/section-title.json",
    "https://pivotkit.vercel.app/r/status-code.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/responses-section.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useI18n } from \"@/registry/default/lib/i18n\";\nimport type { OpenAPIV3 } from \"openapi-types\";\n\nimport { ResponseGroup } from \"@/registry/default/ui/response-group\";\nimport { SectionTitle } from \"@/registry/default/ui/section-title\";\nimport { StatusCode } from \"@/registry/default/ui/status-code\";\nimport React, { useState } from \"react\";\n\ninterface ResponsesSectionProps {\n  responses: OpenAPIV3.ResponsesObject;\n  components?: OpenAPIV3.ComponentsObject;\n  spec?: OpenAPIV3.Document; // 可选，如果提供则使用完整的OpenAPI规范\n  className?: string;\n}\n\nconst ResponsesSection = React.forwardRef<\n  HTMLDivElement,\n  ResponsesSectionProps\n>(({ responses, components, spec, className = \"\" }, ref) => {\n  const { t } = useI18n();\n  const [activeStatus, setActiveStatus] = useState<string | null>(null);\n\n  // 简化的解析逻辑，如果没有 useOpenApi hook 可用\n  const resolveResponse = (response: any): OpenAPIV3.ResponseObject | null => {\n    if (!response) return null;\n\n    // 如果是引用对象，尝试解析\n    if (typeof response === \"object\" && \"$ref\" in response) {\n      // 简化的引用解析\n      return null; // 在实际应用中需要完整的引用解析\n    }\n\n    return response as OpenAPIV3.ResponseObject;\n  };\n\n  // 对状态码进行分组\n  const statusGroups: Record<string, string[]> = {\n    \"1xx\": [],\n    \"2xx\": [],\n    \"3xx\": [],\n    \"4xx\": [],\n    \"5xx\": [],\n    default: [],\n    other: [],\n  };\n\n  // 分类状态码\n  Object.keys(responses).forEach((status) => {\n    if (status === \"default\") {\n      if (statusGroups.default) {\n        statusGroups.default.push(status);\n      }\n    } else if (/^[1-5]\\d\\d$/.test(status)) {\n      const group = `${status[0]}xx`;\n      if (statusGroups[group]) {\n        statusGroups[group].push(status);\n      }\n    } else {\n      if (statusGroups.other) {\n        statusGroups.other.push(status);\n      }\n    }\n  });\n\n  // 确定默认活动状态\n  if (activeStatus === null) {\n    // 按优先级查找: 2xx, 默认, 其他任何状态\n    for (const group of [\n      \"2xx\",\n      \"default\",\n      \"1xx\",\n      \"3xx\",\n      \"4xx\",\n      \"5xx\",\n      \"other\",\n    ]) {\n      const groupStatuses = statusGroups[group];\n      if (groupStatuses && groupStatuses.length > 0 && groupStatuses[0]) {\n        setActiveStatus(groupStatuses[0]);\n        break;\n      }\n    }\n  }\n\n  // 所有可用的状态码\n  const allStatusCodes = Object.values(statusGroups).flat();\n\n  // 通过状态码获取响应对象\n  const getResponseByStatus = (\n    status: string,\n  ): OpenAPIV3.ResponseObject | null => {\n    const response = responses[status];\n    if (!response) return null;\n    return resolveResponse(response);\n  };\n\n  // Current active response\n  const activeResponse = activeStatus\n    ? getResponseByStatus(activeStatus)\n    : null;\n\n  return (\n    <div ref={ref} className={cn(className)}>\n      <SectionTitle title={t(\"Response\")} className=\"text-lg my-3\" />\n\n      {/* Status code list */}\n      <div className=\"mb-4\">\n        <div className=\"flex flex-wrap gap-2\">\n          {allStatusCodes.map((status) => (\n            <button key={status} onClick={() => setActiveStatus(status)}>\n              <StatusCode\n                code={status === \"default\" ? \"default\" : status}\n                className={cn(\n                  \"cursor-pointer\",\n                  status === activeStatus\n                    ? \"opacity-100\"\n                    : \"opacity-80 hover:opacity-100\",\n                )}\n              />\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Active response content */}\n      {activeStatus && activeResponse && (\n        <div className=\"rounded\">\n          <ResponseGroup\n            status={activeStatus}\n            response={activeResponse}\n            components={components}\n          />\n        </div>\n      )}\n\n      {/* Prompt when no response is available */}\n      {(!activeStatus || !activeResponse) && (\n        <div className=\"text-yellow-600 dark:text-yellow-400 text-sm p-3 bg-yellow-50 dark:bg-yellow-900/30 rounded\">\n          {allStatusCodes.length === 0\n            ? t(\"No responses defined\")\n            : t(\"Could not resolve selected response\")}\n        </div>\n      )}\n    </div>\n  );\n});\n\nResponsesSection.displayName = \"ResponsesSection\";\n\nexport { ResponsesSection, type ResponsesSectionProps };\n",
      "type": "registry:ui",
      "target": "components/pivot/responses-section.tsx"
    }
  ]
}