{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "schema-with-example-viewer-demo",
  "type": "registry:example",
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/schema-with-example-viewer.json"
  ],
  "files": [
    {
      "path": "registry/default/example/schema-with-example-viewer-demo.tsx",
      "content": "import { SchemaWithExampleViewer } from \"@/registry/default/ui/schema-with-example-viewer\";\n\nexport default function SchemaWithExampleViewerDemo() {\n  // 用户信息 Schema 和示例\n  const userSchemaWithExample = {\n    schema: {\n      type: \"object\" as const,\n      required: [\"id\", \"email\", \"name\"],\n      properties: {\n        id: {\n          type: \"string\" as const,\n          description: \"用户唯一标识符\",\n          format: \"uuid\" as const\n        },\n        email: {\n          type: \"string\" as const,\n          description: \"用户邮箱地址\",\n          format: \"email\" as const\n        },\n        name: {\n          type: \"string\" as const,\n          description: \"用户姓名\",\n          minLength: 1,\n          maxLength: 100\n        },\n        avatar: {\n          type: \"string\" as const,\n          description: \"用户头像 URL\",\n          format: \"uri\" as const\n        },\n        role: {\n          type: \"string\" as const,\n          description: \"用户角色\",\n          enum: [\"admin\", \"user\", \"moderator\"],\n          default: \"user\"\n        },\n        profile: {\n          type: \"object\" as const,\n          description: \"用户详细资料\",\n          properties: {\n            bio: {\n              type: \"string\" as const,\n              description: \"个人简介\"\n            },\n            phone: {\n              type: \"string\" as const,\n              description: \"电话号码\"\n            },\n            address: {\n              type: \"object\" as const,\n              properties: {\n                country: { type: \"string\" as const, description: \"国家\" },\n                city: { type: \"string\" as const, description: \"城市\" },\n                street: { type: \"string\" as const, description: \"街道地址\" }\n              }\n            }\n          }\n        },\n        createdAt: {\n          type: \"string\" as const,\n          description: \"注册时间\",\n          format: \"date-time\" as const\n        }\n      }\n    },\n    example: {\n      id: \"user_123e4567-e89b-12d3-a456-426614174000\",\n      email: \"john.doe@example.com\",\n      name: \"John Doe\",\n      avatar: \"https://cdn.example.com/avatars/john-doe.jpg\",\n      role: \"admin\",\n      profile: {\n        bio: \"资深软件工程师，专注于 API 设计和微服务架构\",\n        phone: \"+86 138-0013-8000\",\n        address: {\n          country: \"中国\",\n          city: \"北京\",\n          street: \"中关村大街1号\"\n        }\n      },\n      createdAt: \"2024-01-15T10:30:00Z\"\n    }\n  };\n\n  // 产品信息 Schema 和示例\n  const productSchemaWithExample = {\n    schema: {\n      type: \"object\" as const,\n      required: [\"id\", \"name\", \"price\"],\n      properties: {\n        id: {\n          type: \"string\" as const,\n          description: \"产品唯一标识符\"\n        },\n        name: {\n          type: \"string\" as const,\n          description: \"产品名称\",\n          minLength: 1,\n          maxLength: 200\n        },\n        description: {\n          type: \"string\" as const,\n          description: \"产品描述\"\n        },\n        price: {\n          type: \"number\" as const,\n          description: \"产品价格\",\n          minimum: 0\n        },\n        currency: {\n          type: \"string\" as const,\n          description: \"货币代码\",\n          pattern: \"^[A-Z]{3}$\",\n          default: \"CNY\"\n        },\n        category: {\n          type: \"string\" as const,\n          description: \"产品分类\",\n          enum: [\"electronics\", \"clothing\", \"books\", \"home\", \"sports\"]\n        },\n        images: {\n          type: \"array\" as const,\n          description: \"产品图片列表\",\n          items: {\n            type: \"string\" as const,\n            format: \"uri\" as const\n          },\n          maxItems: 10\n        },\n        specifications: {\n          type: \"object\" as const,\n          description: \"产品规格\",\n          additionalProperties: {\n            type: \"string\" as const\n          }\n        },\n        inStock: {\n          type: \"boolean\" as const,\n          description: \"是否有库存\",\n          default: true\n        },\n        stockQuantity: {\n          type: \"integer\" as const,\n          description: \"库存数量\",\n          minimum: 0\n        },\n        tags: {\n          type: \"array\" as const,\n          description: \"产品标签\",\n          items: {\n            type: \"string\" as const\n          }\n        }\n      }\n    },\n    example: {\n      id: \"prod_987fcdeb-51a2-4567-8901-234567890abc\",\n      name: \"iPhone 15 Pro\",\n      description: \"Apple 最新旗舰智能手机，配备 A17 Pro 芯片和钛金属机身\",\n      price: 7999.00,\n      currency: \"CNY\",\n      category: \"electronics\",\n      images: [\n        \"https://cdn.example.com/products/iphone15pro-front.jpg\",\n        \"https://cdn.example.com/products/iphone15pro-back.jpg\"\n      ],\n      specifications: {\n        display: \"6.1英寸 Super Retina XDR\",\n        storage: \"256GB\",\n        color: \"天然钛金属色\",\n        weight: \"187g\"\n      },\n      inStock: true,\n      stockQuantity: 150,\n      tags: [\"smartphone\", \"premium\", \"5g\", \"titanium\"]\n    }\n  };\n\n  // API 响应 Schema 和示例\n  const apiResponseSchemaWithExample = {\n    schema: {\n      type: \"object\" as const,\n      required: [\"success\", \"data\"],\n      properties: {\n        success: {\n          type: \"boolean\" as const,\n          description: \"请求是否成功\"\n        },\n        data: {\n          type: \"object\" as const,\n          description: \"响应数据\",\n          properties: {\n            users: {\n              type: \"array\" as const,\n              description: \"用户列表\",\n              items: {\n                type: \"object\" as const,\n                properties: {\n                  id: { type: \"string\" as const, description: \"用户 ID\" },\n                  name: { type: \"string\" as const, description: \"用户姓名\" },\n                  email: { type: \"string\" as const, format: \"email\" as const, description: \"邮箱\" }\n                }\n              }\n            },\n            pagination: {\n              type: \"object\" as const,\n              description: \"分页信息\",\n              properties: {\n                page: { type: \"integer\" as const, description: \"当前页码\" },\n                pageSize: { type: \"integer\" as const, description: \"每页数量\" },\n                total: { type: \"integer\" as const, description: \"总记录数\" },\n                totalPages: { type: \"integer\" as const, description: \"总页数\" }\n              }\n            }\n          }\n        },\n        message: {\n          type: \"string\" as const,\n          description: \"响应消息\"\n        },\n        timestamp: {\n          type: \"string\" as const,\n          description: \"响应时间戳\",\n          format: \"date-time\" as const\n        },\n        requestId: {\n          type: \"string\" as const,\n          description: \"请求追踪 ID\"\n        }\n      }\n    },\n    example: {\n      success: true,\n      data: {\n        users: [\n          {\n            id: \"user_001\",\n            name: \"Alice Johnson\",\n            email: \"alice@example.com\"\n          },\n          {\n            id: \"user_002\",\n            name: \"Bob Smith\",\n            email: \"bob@example.com\"\n          }\n        ],\n        pagination: {\n          page: 1,\n          pageSize: 20,\n          total: 156,\n          totalPages: 8\n        }\n      },\n      message: \"用户列表获取成功\",\n      timestamp: \"2024-03-15T14:30:00Z\",\n      requestId: \"req_789abc12-def3-4567-8901-234567890def\"\n    }\n  };\n\n  // 错误响应 Schema 和示例\n  const errorResponseSchemaWithExample = {\n    schema: {\n      type: \"object\" as const,\n      required: [\"success\", \"error\"],\n      properties: {\n        success: {\n          type: \"boolean\" as const,\n          description: \"请求是否成功\",\n          enum: [false]\n        },\n        error: {\n          type: \"object\" as const,\n          description: \"错误信息\",\n          required: [\"code\", \"message\"],\n          properties: {\n            code: {\n              type: \"string\" as const,\n              description: \"错误代码\",\n              enum: [\"VALIDATION_ERROR\", \"NOT_FOUND\", \"UNAUTHORIZED\", \"INTERNAL_ERROR\"]\n            },\n            message: {\n              type: \"string\" as const,\n              description: \"错误描述\"\n            },\n            details: {\n              type: \"array\" as const,\n              description: \"详细错误信息\",\n              items: {\n                type: \"object\" as const,\n                properties: {\n                  field: { type: \"string\" as const, description: \"错误字段\" },\n                  message: { type: \"string\" as const, description: \"字段错误描述\" }\n                }\n              }\n            }\n          }\n        },\n        timestamp: {\n          type: \"string\" as const,\n          description: \"错误发生时间\",\n          format: \"date-time\" as const\n        },\n        requestId: {\n          type: \"string\" as const,\n          description: \"请求追踪 ID\"\n        }\n      }\n    },\n    example: {\n      success: false,\n      error: {\n        code: \"VALIDATION_ERROR\",\n        message: \"请求参数验证失败\",\n        details: [\n          {\n            field: \"email\",\n            message: \"邮箱格式不正确\"\n          },\n          {\n            field: \"password\",\n            message: \"密码长度至少8位\"\n          }\n        ]\n      },\n      timestamp: \"2024-03-15T14:35:00Z\",\n      requestId: \"req_error123-456-789-abc-def012345678\"\n    }\n  };\n\n  // 支付信息 Schema 和示例\n  const paymentSchemaWithExample = {\n    schema: {\n      type: \"object\" as const,\n      required: [\"id\", \"amount\", \"currency\", \"status\"],\n      properties: {\n        id: {\n          type: \"string\" as const,\n          description: \"支付唯一标识符\"\n        },\n        orderId: {\n          type: \"string\" as const,\n          description: \"关联订单 ID\"\n        },\n        amount: {\n          type: \"number\" as const,\n          description: \"支付金额\",\n          minimum: 0.01\n        },\n        currency: {\n          type: \"string\" as const,\n          description: \"货币代码\",\n          pattern: \"^[A-Z]{3}$\"\n        },\n        method: {\n          type: \"string\" as const,\n          description: \"支付方式\",\n          enum: [\"credit_card\", \"paypal\", \"bank_transfer\", \"alipay\", \"wechat_pay\"]\n        },\n        status: {\n          type: \"string\" as const,\n          description: \"支付状态\",\n          enum: [\"pending\", \"processing\", \"completed\", \"failed\", \"refunded\"]\n        },\n        gateway: {\n          type: \"string\" as const,\n          description: \"支付网关\"\n        },\n        transactionId: {\n          type: \"string\" as const,\n          description: \"第三方交易 ID\"\n        },\n        cardInfo: {\n          type: \"object\" as const,\n          description: \"信用卡信息（脱敏）\",\n          properties: {\n            last4: { type: \"string\" as const, description: \"卡号后四位\" },\n            brand: { type: \"string\" as const, description: \"卡片品牌\" },\n            expiryMonth: { type: \"integer\" as const, description: \"过期月份\" },\n            expiryYear: { type: \"integer\" as const, description: \"过期年份\" }\n          }\n        },\n        createdAt: {\n          type: \"string\" as const,\n          description: \"创建时间\",\n          format: \"date-time\" as const\n        },\n        completedAt: {\n          type: \"string\" as const,\n          description: \"完成时间\",\n          format: \"date-time\" as const\n        }\n      }\n    },\n    example: {\n      id: \"pay_abc123def456-789-012-345-678901234567\",\n      orderId: \"order_456e7890-a12b-34c5-6789-012345678901\",\n      amount: 10887.80,\n      currency: \"CNY\",\n      method: \"credit_card\",\n      status: \"completed\",\n      gateway: \"stripe\",\n      transactionId: \"txn_stripe_ch_1234567890abcdef\",\n      cardInfo: {\n        last4: \"4242\",\n        brand: \"visa\",\n        expiryMonth: 12,\n        expiryYear: 2027\n      },\n      createdAt: \"2024-03-15T09:20:15Z\",\n      completedAt: \"2024-03-15T09:20:18Z\"\n    }\n  };\n\n  // 数组数据 Schema 和示例\n  const arraySchemaWithExample = {\n    schema: {\n      type: \"array\" as const,\n      description: \"产品分类列表\",\n      items: {\n        type: \"object\" as const,\n        required: [\"id\", \"name\"],\n        properties: {\n          id: {\n            type: \"string\" as const,\n            description: \"分类 ID\"\n          },\n          name: {\n            type: \"string\" as const,\n            description: \"分类名称\"\n          },\n          description: {\n            type: \"string\" as const,\n            description: \"分类描述\"\n          },\n          parentId: {\n            type: \"string\" as const,\n            description: \"父分类 ID\",\n            nullable: true\n          },\n          level: {\n            type: \"integer\" as const,\n            description: \"分类层级\",\n            minimum: 1\n          }\n        }\n      },\n      maxItems: 100\n    },\n    example: [\n      {\n        id: \"cat_electronics\",\n        name: \"电子产品\",\n        description: \"各类电子设备和数码产品\",\n        parentId: null,\n        level: 1\n      },\n      {\n        id: \"cat_smartphones\",\n        name: \"智能手机\",\n        description: \"各品牌智能手机\",\n        parentId: \"cat_electronics\",\n        level: 2\n      },\n      {\n        id: \"cat_laptops\",\n        name: \"笔记本电脑\",\n        description: \"便携式电脑设备\",\n        parentId: \"cat_electronics\",\n        level: 2\n      }\n    ]\n  };\n\n  return (\n    <div className=\"space-y-8 min-w-md\">\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">用户信息 Schema 和示例</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          完整的用户数据模型，包含基本信息、资料和嵌套对象结构\n        </p>\n        <SchemaWithExampleViewer\n          content={{\n            \"application/json\": {\n              schema: userSchemaWithExample.schema,\n              example: userSchemaWithExample.example\n            }\n          }}\n          contentType=\"mediaTypes\"\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">产品信息 Schema 和示例</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          电商产品的完整数据结构，包含价格、规格、库存等信息\n        </p>\n        <SchemaWithExampleViewer\n          content={{\n            \"application/json\": {\n              schema: productSchemaWithExample.schema,\n              example: productSchemaWithExample.example\n            }\n          }}\n          contentType=\"mediaTypes\"\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">API 响应 Schema 和示例</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          标准的 API 响应格式，包含数据、分页信息和元数据\n        </p>\n        <SchemaWithExampleViewer\n          content={{\n            \"application/json\": {\n              schema: apiResponseSchemaWithExample.schema,\n              example: apiResponseSchemaWithExample.example\n            }\n          }}\n          contentType=\"mediaTypes\"\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">错误响应 Schema 和示例</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          API 错误响应的标准格式，包含错误代码和详细信息\n        </p>\n        <SchemaWithExampleViewer\n          content={{\n            \"application/json\": {\n              schema: errorResponseSchemaWithExample.schema,\n              example: errorResponseSchemaWithExample.example\n            }\n          }}\n          contentType=\"mediaTypes\"\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">支付信息 Schema 和示例</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          支付交易的完整数据结构，包含支付方式和卡片信息\n        </p>\n        <SchemaWithExampleViewer\n          content={{\n            \"application/json\": {\n              schema: paymentSchemaWithExample.schema,\n              example: paymentSchemaWithExample.example\n            }\n          }}\n          contentType=\"mediaTypes\"\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">数组数据 Schema 和示例</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          数组类型的数据结构，展示分类列表的层级关系\n        </p>\n        <SchemaWithExampleViewer\n          content={{\n            \"application/json\": {\n              schema: arraySchemaWithExample.schema,\n              example: arraySchemaWithExample.example\n            }\n          }}\n          contentType=\"mediaTypes\"\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": "components/example/schema-with-example-viewer-demo.tsx"
    }
  ]
}