{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "response-content-section",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/utils",
    "https://pivotkit.vercel.app/r/hooks",
    "https://pivotkit.vercel.app/r/i18n",
    "https://pivotkit.vercel.app/r/schema-with-example-viewer"
  ],
  "files": [
    {
      "path": "registry/pivot/response-content-section.tsx",
      "content": "\"use client\";\n\nimport { useI18n } from \"@/registry/lib/i18n\";\nimport type { OpenAPIV3 } from 'openapi-types';\n\nimport { SchemaWithExampleViewer } from \"@/registry/pivot/schema-with-example-viewer\";\nimport React from \"react\";\n\ninterface ResponseContentSectionProps {\n  content: Record<string, OpenAPIV3.MediaTypeObject>;\n  components?: OpenAPIV3.ComponentsObject;\n  className?: string;\n}\n\nconst ResponseContentSection = React.forwardRef<HTMLDivElement, ResponseContentSectionProps>(\n  ({ content, components, className = '' }, ref) => {\n    const { t } = useI18n();\n\n    // 渲染媒体类型的额外信息（如编码）\n    const renderMediaTypeEncoding = (mediaType: OpenAPIV3.MediaTypeObject) => {\n      if (!mediaType.encoding || Object.keys(mediaType.encoding).length === 0) {\n        return null;\n      }\n\n      return (\n        <div className=\"mt-4\">\n          <h5 className=\"text-sm font-medium mb-2\">{t('Encoding')}</h5>\n          <div className=\"space-y-2\">\n            {Object.entries(mediaType.encoding).map(([property, encoding]: [string, OpenAPIV3.EncodingObject]) => (\n              <div key={property} className=\"border rounded p-2 bg-white dark:bg-neutral-800\">\n                <div className=\"font-mono text-sm mb-1 font-medium\">{property}</div>\n                <div className=\"grid grid-cols-[max-content_1fr] gap-x-2 gap-y-1 text-xs\">\n                  {encoding.contentType && (\n                    <>\n                      <div className=\"text-neutral-600 dark:text-neutral-400\">{t('Content Type')}</div>\n                      <div className=\"font-mono\">{encoding.contentType}</div>\n                    </>\n                  )}\n                  {encoding.style && (\n                    <>\n                      <div className=\"text-neutral-600 dark:text-neutral-400\">{t('Style')}</div>\n                      <div className=\"font-mono\">{encoding.style}</div>\n                    </>\n                  )}\n                  {encoding.explode !== undefined && (\n                    <>\n                      <div className=\"text-neutral-600 dark:text-neutral-400\">{t('Explode')}</div>\n                      <div className=\"font-mono\">{encoding.explode.toString()}</div>\n                    </>\n                  )}\n                  {encoding.allowReserved !== undefined && (\n                    <>\n                      <div className=\"text-neutral-600 dark:text-neutral-400\">{t('Allow Reserved')}</div>\n                      <div className=\"font-mono\">{encoding.allowReserved.toString()}</div>\n                    </>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    };\n\n    return (\n      <div ref={ref} className={className}>\n        <SchemaWithExampleViewer\n          content={content}\n          components={components}\n          contentType=\"mediaTypes\"\n          showTitle={true}\n          renderFooter={renderMediaTypeEncoding}\n        />\n      </div>\n    );\n  }\n);\n\nResponseContentSection.displayName = \"ResponseContentSection\";\n\nexport { ResponseContentSection, type ResponseContentSectionProps };\n\n",
      "type": "registry:ui",
      "target": "components/pivot/response-content-section.tsx"
    }
  ]
}