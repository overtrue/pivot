{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "response-content-section",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/schema-with-example-viewer.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/response-content-section.tsx",
      "content": "\"use client\";\n\nimport { useI18n } from \"@/registry/default/lib/i18n\";\nimport type { OpenAPIV3 } from \"openapi-types\";\n\nimport { SchemaWithExampleViewer } from \"@/registry/default/ui/schema-with-example-viewer\";\nimport React from \"react\";\n\ninterface ResponseContentSectionProps {\n  content: Record<string, OpenAPIV3.MediaTypeObject>;\n  components?: OpenAPIV3.ComponentsObject;\n  className?: string;\n}\n\n// 提取编码属性显示组件\nconst EncodingProperty = ({\n  label,\n  value\n}: {\n  label: string;\n  value: any\n}) => (\n  <>\n    <div className=\"text-neutral-600 dark:text-neutral-400\">\n      {label}\n    </div>\n    <div className=\"font-mono\">{typeof value === 'object' ? JSON.stringify(value) : value.toString()}</div>\n  </>\n);\n\n// 提取编码信息渲染组件\nconst MediaTypeEncoding = ({ encoding }: { encoding: OpenAPIV3.EncodingObject }) => {\n  const { t } = useI18n();\n\n  const encodingInfo = [\n    { key: 'contentType', label: t(\"Content Type\") },\n    { key: 'style', label: t(\"Style\") },\n    { key: 'explode', label: t(\"Explode\") },\n    { key: 'allowReserved', label: t(\"Allow Reserved\") }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-[max-content_1fr] gap-x-2 gap-y-1 text-xs\">\n      {encodingInfo.map(({ key, label }) => {\n        const value = encoding[key as keyof OpenAPIV3.EncodingObject];\n        if (value === undefined) return null;\n\n        return (\n          <EncodingProperty key={key} label={label} value={value} />\n        );\n      })}\n    </div>\n  );\n};\n\nconst ResponseContentSection = React.forwardRef<\n  HTMLDivElement,\n  ResponseContentSectionProps\n>(({ content, components, className = \"\" }, ref) => {\n  const { t } = useI18n();\n\n  // 渲染媒体类型的额外信息（如编码）\n  const renderMediaTypeEncoding = (mediaType: OpenAPIV3.MediaTypeObject) => {\n    if (!mediaType.encoding || Object.keys(mediaType.encoding).length === 0) {\n      return null;\n    }\n\n    return (\n      <div className=\"mt-4\">\n        <h5 className=\"text-sm font-medium mb-2\">{t(\"Encoding\")}</h5>\n        <div className=\"space-y-2\">\n          {Object.entries(mediaType.encoding).map(([property, encoding]) => (\n            <div\n              key={property}\n              className=\"border rounded p-2 bg-white dark:bg-neutral-800\"\n            >\n              <div className=\"font-mono text-sm mb-1 font-medium\">\n                {property}\n              </div>\n              <MediaTypeEncoding encoding={encoding} />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div ref={ref} className={className}>\n      <SchemaWithExampleViewer\n        content={content}\n        components={components}\n        contentType=\"mediaTypes\"\n        showTitle={true}\n        renderFooter={renderMediaTypeEncoding}\n      />\n    </div>\n  );\n});\n\nResponseContentSection.displayName = \"ResponseContentSection\";\n\nexport { ResponseContentSection, type ResponseContentSectionProps };\n",
      "type": "registry:ui",
      "target": "components/pivot/response-content-section.tsx"
    }
  ]
}