{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "links-section",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/link-item.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/links-section.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useI18n } from \"@/registry/default/lib/i18n\";\nimport type { OpenAPIV3 } from \"openapi-types\";\n\nimport { resolveRef } from \"@/registry/default/lib/resolve-ref\";\nimport { LinkItem } from \"@/registry/default/ui/link-item\";\nimport React from \"react\";\n\ninterface LinksSectionProps {\n  links: Record<string, OpenAPIV3.LinkObject | OpenAPIV3.ReferenceObject>;\n  components?: OpenAPIV3.ComponentsObject;\n  className?: string;\n}\n\nconst LinksSection = React.forwardRef<HTMLDivElement, LinksSectionProps>(\n  ({ links, components, className }, ref) => {\n    const { t } = useI18n();\n\n    if (!links) {\n      return null;\n    }\n\n    const linkEntries = Object.entries(links);\n\n    if (linkEntries.length === 0) {\n      return null;\n    }\n\n    return (\n      <div ref={ref} className={cn(\"mb-4\", className)}>\n        <h4 className=\"text-sm font-semibold uppercase text-neutral-500 dark:text-neutral-400 mb-2\">\n          {t(\"Links\")}\n        </h4>\n        <div className=\"space-y-3\">\n          {linkEntries.map(([name, linkOrRef]) => {\n            // Resolve link ref\n            const link = resolveRef<OpenAPIV3.LinkObject>(\n              linkOrRef,\n              components,\n              \"links\",\n            );\n\n            if (!link) {\n              const refString =\n                linkOrRef &&\n                typeof linkOrRef === \"object\" &&\n                \"$ref\" in linkOrRef\n                  ? (linkOrRef as OpenAPIV3.ReferenceObject).$ref\n                  : t(\"[unknown reference]\");\n              console.warn(\n                `[LinksSection] Failed to resolve link ref: ${refString} for key ${name}`,\n              );\n              // Optionally render an error state for this link\n              return (\n                <div\n                  key={name}\n                  className=\"text-xs text-red-500 dark:text-red-400 p-1 border border-dashed rounded\"\n                >\n                  {t(\"Failed to resolve link:\") + \" \" + name} ({refString})\n                </div>\n              );\n            }\n\n            return <LinkItem key={name} name={name} {...link} />;\n          })}\n        </div>\n      </div>\n    );\n  },\n);\n\nLinksSection.displayName = \"LinksSection\";\n\nexport { LinksSection };\n",
      "type": "registry:ui",
      "target": "components/ui/links-section.tsx"
    }
  ]
}