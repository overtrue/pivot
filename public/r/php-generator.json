{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "php-generator",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "react"
  ],
  "files": [
    {
      "path": "registry/default/ui/php-generator.tsx",
      "content": "import type { CodeGenerator, CodeGeneratorParams } from \"@/types/project\";\nimport { Code2 } from \"lucide-react\";\nimport React from \"react\";\n\n// Utility function\nfunction replaceDoubleQuotes(str: string): string {\n  return str.replace(/\"/g, \"'\");\n}\n\n// PhpGenerator implementation\nexport class PhpGeneratorClass implements CodeGenerator {\n  id = \"php\";\n  label = \"PHP\";\n\n  getIcon() {\n    return <Code2 size={16} />;\n  }\n\n  generateCode(params: CodeGeneratorParams): string {\n    const { endpoint, method, requestBodyExample, requestBody } = params;\n\n    return `<?php\n// 使用 PHP 的 cURL 扩展\nfunction call_${method.toLowerCase()}() {\n    $url = \"${endpoint}\";\n\n    $curl = curl_init();\n\n    $headers = [\n        \"Content-Type: application/json\",\n        \"Accept: application/json\"\n    ];\n\n    curl_setopt_array($curl, [\n        CURLOPT_URL => $url,\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_HTTPHEADER => $headers,\n        CURLOPT_CUSTOMREQUEST => \"${method}\",${\n          [\"POST\", \"PUT\", \"PATCH\"].includes(method) && requestBody\n            ? `\n        CURLOPT_POSTFIELDS => json_encode(\n${JSON.stringify(requestBodyExample, null, 4)\n  .split(\"\\n\")\n  .map((line) => \"            \" + replaceDoubleQuotes(line))\n  .join(\",\\n\")}\n        ),`\n            : \"\"\n        }\n    ]);\n\n    $response = curl_exec($curl);\n    $err = curl_error($curl);\n\n    curl_close($curl);\n\n    if ($err) {\n        return \"cURL Error: \" . $err;\n    } else {\n        return json_decode($response, true);\n    }\n}`;\n  }\n}\n\n// React component wrapper\ninterface PhpGeneratorProps {\n  params?: CodeGeneratorParams;\n  className?: string;\n}\n\nconst PhpGeneratorComponent = React.forwardRef<\n  HTMLDivElement,\n  PhpGeneratorProps\n>(({ params, className }, ref) => {\n  if (!params) {\n    return (\n      <div ref={ref} className={className}>\n        <div className=\"flex items-center gap-2 mb-2\">\n          <Code2 size={16} />\n          <span className=\"font-medium\">PHP</span>\n        </div>\n        <div className=\"bg-neutral-100 dark:bg-neutral-800 p-4 rounded-md text-neutral-500 dark:text-neutral-400\">\n          No parameters provided for code generation\n        </div>\n      </div>\n    );\n  }\n\n  const generator = new PhpGeneratorClass();\n  const code = generator.generateCode(params);\n\n  return (\n    <div ref={ref} className={className}>\n      <div className=\"flex items-center gap-2 mb-2\">\n        {generator.getIcon()}\n        <span className=\"font-medium\">{generator.label}</span>\n      </div>\n      <pre className=\"bg-neutral-100 dark:bg-neutral-800 p-4 rounded-md overflow-x-auto\">\n        <code className=\"text-sm language-php\">{code}</code>\n      </pre>\n    </div>\n  );\n});\n\nPhpGeneratorComponent.displayName = \"PhpGenerator\";\n\nexport { PhpGeneratorComponent as PhpGenerator, type PhpGeneratorProps };\n",
      "type": "registry:ui",
      "target": "components/pivot/php-generator.tsx"
    }
  ]
}