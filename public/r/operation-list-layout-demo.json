{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "operation-list-layout-demo",
  "type": "registry:example",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/operation-list-layout.json"
  ],
  "files": [
    {
      "path": "registry/default/example/operation-list-layout-demo.tsx",
      "content": "\"use client\";\n\nimport { OperationListLayout } from \"@/registry/default/ui/operation-list-layout\";\nimport type { OpenAPIV3 } from \"openapi-types\";\nimport { useState } from \"react\";\n\n// Mock OpenAPI specification for demo\nconst mockSpec: OpenAPIV3.Document = {\n  openapi: \"3.0.0\",\n  info: {\n    title: \"E-commerce API\",\n    version: \"1.0.0\",\n    description: \"Comprehensive e-commerce platform API with user management, product catalog, and order processing\"\n  },\n  servers: [\n    {\n      url: \"https://api.example.com/v1\",\n      description: \"Production server\"\n    }\n  ],\n  paths: {\n    \"/users\": {\n      get: {\n        tags: [\"User Management\"],\n        operationId: \"getUsers\",\n        summary: \"Get all users\",\n        description: \"Retrieve a list of all users in the system with pagination support\",\n        parameters: [\n          {\n            name: \"page\",\n            in: \"query\",\n            schema: { type: \"integer\", default: 1 },\n            description: \"Page number (default: 1)\"\n          },\n          {\n            name: \"limit\",\n            in: \"query\",\n            schema: { type: \"integer\", default: 10 },\n            description: \"Items per page (default: 10)\"\n          }\n        ],\n        responses: {\n          \"200\": {\n            description: \"Successfully retrieved users list\"\n          }\n        }\n      },\n      post: {\n        tags: [\"User Management\"],\n        operationId: \"createUser\",\n        summary: \"Create new user\",\n        description: \"Create a new user account in the system\",\n        requestBody: {\n          required: true,\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                required: [\"name\", \"email\"],\n                properties: {\n                  name: { type: \"string\" },\n                  email: { type: \"string\", format: \"email\" }\n                }\n              }\n            }\n          }\n        },\n        responses: {\n          \"201\": {\n            description: \"User created successfully\"\n          }\n        }\n      }\n    },\n    \"/users/{id}\": {\n      get: {\n        tags: [\"User Management\"],\n        operationId: \"getUserById\",\n        summary: \"Get user by ID\",\n        description: \"Retrieve detailed information about a specific user\",\n        parameters: [\n          {\n            name: \"id\",\n            in: \"path\",\n            required: true,\n            schema: { type: \"string\" }\n          }\n        ],\n        responses: {\n          \"200\": {\n            description: \"Successfully retrieved user details\"\n          },\n          \"404\": {\n            description: \"User not found\"\n          }\n        }\n      },\n      put: {\n        tags: [\"User Management\"],\n        operationId: \"updateUser\",\n        summary: \"Update user\",\n        description: \"Update an existing user's information\",\n        parameters: [\n          {\n            name: \"id\",\n            in: \"path\",\n            required: true,\n            schema: { type: \"string\" }\n          }\n        ],\n        requestBody: {\n          required: true,\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  name: { type: \"string\" },\n                  email: { type: \"string\", format: \"email\" }\n                }\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"User updated successfully\"\n          }\n        }\n      },\n      delete: {\n        tags: [\"User Management\"],\n        operationId: \"deleteUser\",\n        summary: \"Delete user\",\n        description: \"Delete a user account from the system\",\n        parameters: [\n          {\n            name: \"id\",\n            in: \"path\",\n            required: true,\n            schema: { type: \"string\" }\n          }\n        ],\n        responses: {\n          \"204\": {\n            description: \"User deleted successfully\"\n          }\n        }\n      }\n    },\n    \"/products\": {\n      get: {\n        tags: [\"Product Management\"],\n        operationId: \"getProducts\",\n        summary: \"Get all products\",\n        description: \"Retrieve product catalog with filtering options\",\n        parameters: [\n          {\n            name: \"category\",\n            in: \"query\",\n            schema: { type: \"string\" },\n            description: \"Filter by product category\"\n          },\n          {\n            name: \"search\",\n            in: \"query\",\n            schema: { type: \"string\" },\n            description: \"Search products by name or description\"\n          }\n        ],\n        responses: {\n          \"200\": {\n            description: \"Successfully retrieved products list\"\n          }\n        }\n      },\n      post: {\n        tags: [\"Product Management\"],\n        operationId: \"createProduct\",\n        summary: \"Create product\",\n        description: \"Add a new product to the catalog\",\n        requestBody: {\n          required: true,\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                required: [\"name\", \"price\"],\n                properties: {\n                  name: { type: \"string\" },\n                  description: { type: \"string\" },\n                  price: { type: \"number\", minimum: 0 },\n                  category: { type: \"string\" }\n                }\n              }\n            }\n          }\n        },\n        responses: {\n          \"201\": {\n            description: \"Product created successfully\"\n          }\n        }\n      }\n    },\n    \"/orders\": {\n      get: {\n        tags: [\"Order Management\"],\n        operationId: \"getOrders\",\n        summary: \"Get all orders\",\n        description: \"Retrieve order history with status filtering\",\n        parameters: [\n          {\n            name: \"status\",\n            in: \"query\",\n            schema: {\n              type: \"string\",\n              enum: [\"pending\", \"processing\", \"shipped\", \"delivered\", \"cancelled\"]\n            },\n            description: \"Filter by order status\"\n          }\n        ],\n        responses: {\n          \"200\": {\n            description: \"Successfully retrieved orders list\"\n          }\n        }\n      },\n      post: {\n        tags: [\"Order Management\"],\n        operationId: \"createOrder\",\n        summary: \"Create order\",\n        description: \"Place a new order for products\",\n        requestBody: {\n          required: true,\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                required: [\"items\"],\n                properties: {\n                  items: {\n                    type: \"array\",\n                    items: {\n                      type: \"object\",\n                      required: [\"productId\", \"quantity\"],\n                      properties: {\n                        productId: { type: \"string\" },\n                        quantity: { type: \"integer\", minimum: 1 }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        responses: {\n          \"201\": {\n            description: \"Order created successfully\"\n          }\n        }\n      }\n    }\n  },\n  tags: [\n    {\n      name: \"User Management\",\n      description: \"User-related operations including registration, authentication, and profile management\"\n    },\n    {\n      name: \"Product Management\",\n      description: \"Product catalog operations including listing, searching, and inventory management\"\n    },\n    {\n      name: \"Order Management\",\n      description: \"Order processing operations including creation, tracking, and status updates\"\n    }\n  ],\n  components: {\n    schemas: {\n      User: {\n        type: \"object\",\n        properties: {\n          id: { type: \"string\" },\n          name: { type: \"string\" },\n          email: { type: \"string\", format: \"email\" }\n        }\n      },\n      Product: {\n        type: \"object\",\n        properties: {\n          id: { type: \"string\" },\n          name: { type: \"string\" },\n          description: { type: \"string\" },\n          price: { type: \"number\" },\n          category: { type: \"string\" }\n        }\n      },\n      Order: {\n        type: \"object\",\n        properties: {\n          id: { type: \"string\" },\n          userId: { type: \"string\" },\n          status: {\n            type: \"string\",\n            enum: [\"pending\", \"processing\", \"shipped\", \"delivered\", \"cancelled\"]\n          },\n          total: { type: \"number\" }\n        }\n      }\n    }\n  }\n};\n\nexport default function OperationListLayoutDemo() {\n  const [showNavigation, setShowNavigation] = useState(true);\n  const [showTryPanel, setShowTryPanel] = useState(true);\n\n  return (\n    <div className=\"w-full h-screen\">\n      <OperationListLayout\n        spec={mockSpec}\n        showNavigation={showNavigation}\n        onSelectOperation={(path, method, operation) => {\n          console.log(\"Selected operation:\", path, method, operation);\n        }}\n        showTryPanel={false}\n      />\n    </div>\n  );\n}\n\n",
      "type": "registry:example",
      "target": "components/example/operation-list-layout-demo.tsx"
    }
  ]
}