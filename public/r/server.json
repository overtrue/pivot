{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "server",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/description-display.json",
    "https://pivotkit.vercel.app/r/expand-collapse.json",
    "https://pivotkit.vercel.app/r/server-variable.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/server.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { OpenAPIV3 } from 'openapi-types';\nimport React, { useState } from \"react\";\nimport { DescriptionDisplay } from \"@/registry/default/ui/description-display\";\nimport { ExpandCollapse } from \"@/registry/default/ui/expand-collapse\";\nimport { ServerVariable } from \"@/registry/default/ui/server-variable\";\n\n// 类型别名，供其他组件使用\nexport type ServerObject = OpenAPIV3.ServerObject;\n\ninterface ServerProps {\n  server?: OpenAPIV3.ServerObject;\n  className?: string;\n}\n\nconst Server = React.forwardRef<HTMLDivElement, ServerProps>(\n  ({ server, className }, ref) => {\n    if (!server) {\n      return (\n        <div ref={ref} className={cn(\"rounded mb-4 overflow-hidden\", className)}>\n          <div className=\"p-3 bg-neutral-50 dark:bg-neutral-800\">\n            <div className=\"font-mono text-sm text-neutral-500 dark:text-neutral-400\">\n              No server data available\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    const { url, description, variables } = server;\n    const [isExpanded, setIsExpanded] = useState(false);\n    const hasVariables = variables && Object.keys(variables).length > 0;\n\n    // URL解析与插值逻辑\n    const interpolateUrl = (\n      url: string,\n      variables: Record<string, OpenAPIV3.ServerVariableObject> = {},\n    ) => {\n      let interpolatedUrl = url;\n      Object.entries(variables).forEach(([name, variable]) => {\n        const pattern = new RegExp(`\\\\{${name}\\\\}`, \"g\");\n        interpolatedUrl = interpolatedUrl.replace(pattern, variable.default);\n      });\n      return interpolatedUrl;\n    };\n\n    // 提取URL模板变量，用于高亮显示\n    const extractUrlParts = (url: string) => {\n      const regex = /(\\{[^}]+\\})/g;\n      const parts = url.split(regex);\n      return parts.map((part, index) => {\n        const isVariable = part.startsWith(\"{\") && part.endsWith(\"}\");\n        return { text: part, isVariable, key: `part-${index}` };\n      });\n    };\n\n    const urlParts = extractUrlParts(url);\n    const interpolatedUrl = hasVariables ? interpolateUrl(url, variables) : url;\n\n    return (\n      <div ref={ref} className={cn(\"rounded mb-4 overflow-hidden\", className)}>\n        <div className=\"p-3 bg-neutral-50 dark:bg-neutral-800 flex items-center justify-between\">\n          <div className=\"flex-grow overflow-auto\">\n            <div className=\"font-mono text-sm break-all dark:text-neutral-200\">\n              {urlParts.map((part) => (\n                <span\n                  key={part.key}\n                  className={\n                    part.isVariable\n                      ? \"bg-blue-100 dark:bg-blue-900/50 text-blue-800 dark:text-blue-300 rounded px-1\"\n                      : \"\"\n                  }\n                >\n                  {part.text}\n                </span>\n              ))}\n            </div>\n            {hasVariables && (\n              <div className=\"text-xs text-neutral-600 dark:text-neutral-400 mt-1\">\n                Interpolated URL: {interpolatedUrl}\n              </div>\n            )}\n          </div>\n          {(description || hasVariables) && (\n            <ExpandCollapse\n              isExpanded={isExpanded}\n              onToggle={() => setIsExpanded(!isExpanded)}\n              expandedLabel=\"Collapse\"\n              collapsedLabel=\"Expand\"\n              className=\"ml-3 flex-shrink-0\"\n            />\n          )}\n        </div>\n\n        {isExpanded && (description || hasVariables) && (\n          <div className=\"p-4 border-t dark:border-neutral-700 dark:bg-neutral-800/50\">\n            {description && (\n              <div className=\"mb-4\">\n                <h4 className=\"text-sm font-semibold mb-1 dark:text-neutral-200\">\n                  Description\n                </h4>\n                <DescriptionDisplay description={description} />\n              </div>\n            )}\n\n            {hasVariables && (\n              <div>\n                <h4 className=\"text-sm font-semibold mb-2 dark:text-neutral-200\">\n                  Server Variables:\n                </h4>\n                <div className=\"space-y-3\">\n                  {Object.entries(variables).map(([name, variable]) => (\n                    <ServerVariable\n                      key={name}\n                      name={name}\n                      variable={variable}\n                    />\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n\nServer.displayName = \"Server\";\n\nexport { Server, type ServerProps };\n",
      "type": "registry:ui",
      "target": "components/ui/server.tsx"
    }
  ]
}