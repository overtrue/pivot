{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "navigation-sidebar",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "button",
    "collapsible",
    "input",
    "sidebar",
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/method-label.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/navigation-sidebar.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\";\nimport { cn } from \"@/lib/utils\";\nimport { useI18n } from \"@/registry/default/lib/i18n\";\nimport { MethodLabel } from \"@/registry/default/ui/method-label\";\nimport { ChevronRight, Search } from \"lucide-react\";\nimport type { OpenAPIV3 } from \"openapi-types\";\nimport React, { useState } from \"react\";\n\n// Import types from the centralized types file\n\ninterface NavigationSidebarProps {\n  openapi: OpenAPIV3.Document;\n  activePath?: string | null;\n  activeMethod?: string | null;\n  onSelectOperation?: (path: string, method: string, operation: any) => void;\n  onSelectSchema?: (schemaName: string) => void;\n  className?: string;\n}\n\nconst NavigationSidebar = React.forwardRef<\n  HTMLDivElement,\n  NavigationSidebarProps\n>(\n  (\n    {\n      openapi,\n      activePath = null,\n      activeMethod = null,\n      onSelectOperation = () => { },\n      onSelectSchema,\n      className,\n    },\n    ref,\n  ) => {\n    const { t } = useI18n();\n    const [collapsedTags, setCollapsedTags] = useState<Record<string, boolean>>(\n      {},\n    );\n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [showSearch, setShowSearch] = useState(false);\n\n    const toggleTagCollapse = (tagName: string) => {\n      setCollapsedTags((prev) => ({\n        ...prev,\n        [tagName]: !prev[tagName],\n      }));\n    };\n\n    // Filter paths based on search query\n    const filterPaths = (path: string, method: string, operation: any) => {\n      if (!searchQuery) return true;\n\n      const query = searchQuery.toLowerCase();\n      return (\n        path.toLowerCase().includes(query) ||\n        method.toLowerCase().includes(query) ||\n        operation.summary?.toLowerCase().includes(query) ||\n        operation.description?.toLowerCase().includes(query) ||\n        operation.operationId?.toLowerCase().includes(query)\n      );\n    };\n\n    const tags = openapi.tags || [];\n    const hasCustomTags = tags.length > 0;\n\n    // Render operation item using SidebarMenuItem\n    const renderOperationItem = (path: string, method: string, operation: any) => {\n      const isActive =\n        activePath === path &&\n        activeMethod !== null &&\n        activeMethod.toUpperCase() === method.toUpperCase();\n\n      return (\n        <SidebarMenuItem key={`${method}-${path}`}>\n          <SidebarMenuButton\n            onClick={() => onSelectOperation(path, method, operation)}\n            isActive={isActive}\n            className=\"justify-between text-xs font-mono\"\n          >\n            <span className=\"truncate\">{path}</span>\n            <MethodLabel\n              method={\n                method.toUpperCase() as\n                | \"GET\"\n                | \"POST\"\n                | \"PUT\"\n                | \"DELETE\"\n                | \"PATCH\"\n                | \"OPTIONS\"\n                | \"HEAD\"\n              }\n              className=\"ml-2 flex-shrink-0\"\n              variant=\"compact\"\n            />\n          </SidebarMenuButton>\n        </SidebarMenuItem>\n      );\n    };\n\n    return (\n      <Sidebar ref={ref} className={className}>\n        {/* Header with search */}\n        <SidebarHeader className=\"border-b p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"min-w-0 flex-1\">\n              <h2 className=\"text-sm font-medium truncate\">\n                {openapi.info?.title || \"API Documentation\"}\n              </h2>\n              {openapi.info?.version && (\n                <p className=\"text-xs text-sidebar-foreground/70 mt-0.5\">\n                  v{openapi.info.version}\n                </p>\n              )}\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setShowSearch(!showSearch)}\n              className=\"h-7 w-7 p-0 ml-2 flex-shrink-0\"\n            >\n              <Search className=\"h-3.5 w-3.5\" />\n            </Button>\n          </div>\n\n          {/* Collapsible Search */}\n          {showSearch && (\n            <div className=\"mt-3\">\n              <Input\n                placeholder={t(\"Search...\")}\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"h-8 text-xs\"\n                autoFocus\n              />\n            </div>\n          )}\n        </SidebarHeader>\n\n        {/* Content */}\n        <SidebarContent>\n          {hasCustomTags ? (\n            // Render with tags using SidebarGroup\n            tags.map((tag) => {\n              const isCollapsed = collapsedTags[tag.name];\n              const tagOperations: React.ReactNode[] = [];\n\n              // Collect operations for this tag\n              if (openapi.paths) {\n                Object.entries(openapi.paths).forEach(([path, pathItem]) => {\n                  const operations = Object.entries(\n                    pathItem as OpenAPIV3.PathItemObject,\n                  ).filter(([method]) =>\n                    [\"get\", \"post\", \"put\", \"delete\", \"patch\"].includes(method),\n                  );\n\n                  operations.forEach(([method, operation]) => {\n                    if (\n                      typeof operation === \"object\" &&\n                      operation &&\n                      !Array.isArray(operation) &&\n                      \"responses\" in operation &&\n                      (operation as any).tags?.includes(tag.name) &&\n                      filterPaths(path, method, operation)\n                    ) {\n                      tagOperations.push(renderOperationItem(path, method, operation));\n                    }\n                  });\n                });\n              }\n\n              if (tagOperations.length === 0) return null;\n\n              return (\n                <SidebarGroup key={tag.name}>\n                  <Collapsible\n                    open={!isCollapsed}\n                    onOpenChange={() => toggleTagCollapse(tag.name)}\n                  >\n                    <CollapsibleTrigger asChild>\n                      <SidebarGroupLabel className=\"cursor-pointer hover:bg-sidebar-accent rounded-md p-2 transition-colors\">\n                        <div className=\"flex items-center\">\n                          <ChevronRight\n                            className={cn(\n                              \"h-3 w-3 mr-2 transition-transform\",\n                              !isCollapsed && \"rotate-90\",\n                            )}\n                          />\n                          <span className=\"text-xs font-medium\">{tag.name}</span>\n                        </div>\n                      </SidebarGroupLabel>\n                    </CollapsibleTrigger>\n\n                    <CollapsibleContent>\n                      <SidebarGroupContent>\n                        <SidebarMenu>\n                          {tagOperations}\n                        </SidebarMenu>\n                      </SidebarGroupContent>\n                    </CollapsibleContent>\n                  </Collapsible>\n                </SidebarGroup>\n              );\n            })\n          ) : (\n            // No tags - directly display all paths\n            <SidebarGroup>\n              <SidebarGroupContent>\n                <SidebarMenu>\n                  {openapi.paths &&\n                    Object.entries(openapi.paths).map(([path, pathItem]) => {\n                      const operations = Object.entries(\n                        pathItem as OpenAPIV3.PathItemObject,\n                      ).filter(([method]) =>\n                        [\"get\", \"post\", \"put\", \"delete\", \"patch\"].includes(method),\n                      );\n\n                      return operations\n                        .map(([method, operation]) => {\n                          if (\n                            typeof operation !== \"object\" ||\n                            !operation ||\n                            Array.isArray(operation) ||\n                            !(\"responses\" in operation) ||\n                            !filterPaths(path, method, operation)\n                          ) {\n                            return null;\n                          }\n\n                          return renderOperationItem(path, method, operation);\n                        })\n                        .filter(Boolean);\n                    })}\n                </SidebarMenu>\n              </SidebarGroupContent>\n            </SidebarGroup>\n          )}\n        </SidebarContent>\n      </Sidebar>\n    );\n  },\n);\n\nNavigationSidebar.displayName = \"NavigationSidebar\";\n\nexport { NavigationSidebar, type NavigationSidebarProps };\n",
      "type": "registry:ui",
      "target": "components/ui/navigation-sidebar.tsx"
    }
  ]
}