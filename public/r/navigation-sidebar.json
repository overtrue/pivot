{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "navigation-sidebar",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "button",
    "collapsible",
    "input",
    "https://pivotkit.vercel.app/r/method-label"
  ],
  "files": [
    {
      "path": "registry/pivot/navigation-sidebar.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport { useI18n } from \"@/registry/lib/i18n\";\nimport { MethodLabel } from \"@/registry/pivot/method-label\";\nimport {\n  ChevronRight,\n  Folder,\n  FolderOpen,\n  Search,\n} from \"lucide-react\";\nimport type { OpenAPIV3 } from 'openapi-types';\nimport React, { useState } from \"react\";\n\n// Import types from the centralized types file\n\ninterface NavigationSidebarProps {\n  openapi: OpenAPIV3.Document;\n  activePath?: string | null;\n  activeMethod?: string | null;\n  onSelectOperation?: (path: string, method: string, operation: any) => void;\n  onSelectSchema?: (schemaName: string) => void;\n  className?: string;\n}\n\nconst NavigationSidebar = React.forwardRef<HTMLDivElement, NavigationSidebarProps>(\n  ({\n    openapi,\n    activePath = null,\n    activeMethod = null,\n    onSelectOperation = () => { },\n    onSelectSchema,\n    className,\n  }, ref) => {\n    const { t } = useI18n();\n    const [collapsedTags, setCollapsedTags] = useState<Record<string, boolean>>({});\n    const [searchQuery, setSearchQuery] = useState(\"\");\n\n    const toggleTagCollapse = (tagName: string) => {\n      setCollapsedTags((prev) => ({\n        ...prev,\n        [tagName]: !prev[tagName],\n      }));\n    };\n\n    // Filter paths based on search query\n    const filterPaths = (path: string, method: string, operation: any) => {\n      if (!searchQuery) return true;\n\n      const query = searchQuery.toLowerCase();\n      return (\n        path.toLowerCase().includes(query) ||\n        method.toLowerCase().includes(query) ||\n        operation.summary?.toLowerCase().includes(query) ||\n        operation.description?.toLowerCase().includes(query) ||\n        operation.operationId?.toLowerCase().includes(query)\n      );\n    };\n\n    const tags = openapi.tags || [];\n    const hasCustomTags = tags.length > 0;\n\n    return (\n      <div ref={ref} className={cn(\"flex flex-col h-full w-full bg-background\", className)}>\n        {/* Header - Fixed */}\n        <div className=\"flex-shrink-0 p-4 border-b bg-background\">\n          <h2 className=\"font-semibold text-sm\">\n            {openapi.info?.title || \"API Documentation\"}\n          </h2>\n          {openapi.info?.version && (\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Version {openapi.info.version}\n            </p>\n          )}\n        </div>\n\n        {/* Search - Fixed */}\n        <div className=\"flex-shrink-0 p-4 border-b bg-background\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n            <Input\n              placeholder={t(\"Search...\")}\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-9 shadow-none\"\n            />\n          </div>\n        </div>\n\n        {/* Content with Sticky Tags */}\n        <div className=\"flex-1 overflow-y-scroll\">\n          {hasCustomTags ? (\n            // Render with tags\n            tags.map((tag) => {\n              const isCollapsed = collapsedTags[tag.name];\n              return (\n                <div key={tag.name} className=\"border-b border-border/50 last:border-b-0\">\n                  {/* Sticky Tag Header */}\n                  <div className=\"sticky top-0 z-10 bg-background/95 backdrop-blur-sm border-b border-border\">\n                    <Collapsible\n                      open={!isCollapsed}\n                      onOpenChange={() => toggleTagCollapse(tag.name)}\n                    >\n                      <CollapsibleTrigger asChild>\n                        <Button\n                          variant=\"ghost\"\n                          className=\"w-full justify-between p-4 h-auto font-normal hover:bg-muted/50\"\n                        >\n                          <div className=\"flex items-center gap-2\">\n                            {isCollapsed ? (\n                              <Folder className=\"h-4 w-4\" />\n                            ) : (\n                              <FolderOpen className=\"h-4 w-4\" />\n                            )}\n                            <span className=\"text-sm font-medium\">{tag.name}</span>\n                          </div>\n                          <ChevronRight className={cn(\n                            \"h-4 w-4 transition-transform\",\n                            !isCollapsed && \"rotate-90\"\n                          )} />\n                        </Button>\n                      </CollapsibleTrigger>\n                    </Collapsible>\n                  </div>\n\n                  {/* Tag Content */}\n                  <Collapsible\n                    open={!isCollapsed}\n                    onOpenChange={() => toggleTagCollapse(tag.name)}\n                  >\n                    <CollapsibleContent>\n                      <div className=\"p-4 space-y-1\">\n                        {openapi.paths &&\n                          Object.entries(openapi.paths).map(\n                            ([path, pathItem]) => {\n                              const operations = Object.entries(\n                                pathItem as OpenAPIV3.PathItemObject,\n                              ).filter(([method]) =>\n                                [\n                                  \"get\",\n                                  \"post\",\n                                  \"put\",\n                                  \"delete\",\n                                  \"patch\",\n                                ].includes(method),\n                              );\n\n                              return operations\n                                .map(([method, operation]) => {\n                                  // Type check: ensure operation is an OperationObject\n                                  if (typeof operation !== 'object' || !operation || Array.isArray(operation) || !('responses' in operation)) {\n                                    return null;\n                                  }\n\n                                  // Filter tags and search query\n                                  if (\n                                    !(operation as any).tags?.includes(tag.name) ||\n                                    !filterPaths(path, method, operation)\n                                  ) {\n                                    return null;\n                                  }\n\n                                  const isActive =\n                                    activePath === path &&\n                                    activeMethod !== null &&\n                                    activeMethod.toUpperCase() ===\n                                    method.toUpperCase();\n\n                                  return (\n                                    <Button\n                                      key={`${method}-${path}`}\n                                      variant={isActive ? \"secondary\" : \"ghost\"}\n                                      onClick={() =>\n                                        onSelectOperation(\n                                          path,\n                                          method,\n                                          operation,\n                                        )\n                                      }\n                                      className={cn(\n                                        \"w-full justify-between p-2 h-auto font-normal shadow-none\",\n                                        isActive && \"bg-muted\"\n                                      )}\n                                    >\n                                      <div className=\"flex flex-col items-start gap-1 flex-1 min-w-0\">\n                                        <span className=\"font-mono text-xs truncate w-full text-left\">\n                                          {path}\n                                        </span>\n                                        {(operation as any).summary && (\n                                          <span className=\"text-xs text-muted-foreground truncate w-full text-left\">\n                                            {(operation as any).summary}\n                                          </span>\n                                        )}\n                                      </div>\n                                      <MethodLabel\n                                        method={method.toUpperCase() as \"GET\" | \"POST\" | \"PUT\" | \"DELETE\" | \"PATCH\" | \"OPTIONS\" | \"HEAD\"}\n                                        className=\"ml-2 flex-shrink-0\"\n                                        variant=\"compact\"\n                                      />\n                                    </Button>\n                                  );\n                                })\n                                .filter(Boolean);\n                            },\n                          )}\n                      </div>\n                    </CollapsibleContent>\n                  </Collapsible>\n                </div>\n              );\n            })\n          ) : (\n            // No tags - directly display all paths\n            <div className=\"p-4 space-y-1\">\n              {openapi.paths &&\n                Object.entries(openapi.paths).map(([path, pathItem]) => {\n                  const operations = Object.entries(\n                    pathItem as OpenAPIV3.PathItemObject,\n                  ).filter(([method]) =>\n                    [\"get\", \"post\", \"put\", \"delete\", \"patch\"].includes(method),\n                  );\n\n                  return operations\n                    .map(([method, operation]) => {\n                      // Type check: ensure operation is an OperationObject\n                      if (typeof operation !== 'object' || !operation || Array.isArray(operation) || !('responses' in operation)) {\n                        return null;\n                      }\n\n                      if (!filterPaths(path, method, operation)) return null;\n\n                      const isActive =\n                        activePath === path &&\n                        activeMethod !== null &&\n                        activeMethod.toUpperCase() === method.toUpperCase();\n\n                      return (\n                        <Button\n                          key={`${method}-${path}`}\n                          variant={isActive ? \"secondary\" : \"ghost\"}\n                          onClick={() =>\n                            onSelectOperation(path, method, operation)\n                          }\n                          className={cn(\n                            \"w-full justify-between p-2 h-auto font-normal\",\n                            isActive && \"bg-muted\"\n                          )}\n                        >\n                          <div className=\"flex flex-col items-start gap-1 flex-1 min-w-0\">\n                            <span className=\"font-mono text-xs truncate w-full text-left\">\n                              {path}\n                            </span>\n                            {(operation as any).summary && (\n                              <span className=\"text-xs text-muted-foreground truncate w-full text-left\">\n                                {(operation as any).summary}\n                              </span>\n                            )}\n                          </div>\n                          <MethodLabel\n                            method={method.toUpperCase() as \"GET\" | \"POST\" | \"PUT\" | \"DELETE\" | \"PATCH\" | \"OPTIONS\" | \"HEAD\"}\n                            className=\"ml-2 flex-shrink-0\"\n                            variant=\"compact\"\n                          />\n                        </Button>\n                      );\n                    })\n                    .filter(Boolean);\n                })}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n\nNavigationSidebar.displayName = \"NavigationSidebar\";\n\nexport {\n  NavigationSidebar,\n  type NavigationSidebarProps\n};\n\n",
      "type": "registry:ui"
    }
  ]
}