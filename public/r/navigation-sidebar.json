{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "navigation-sidebar",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "collapsible",
    "input",
    "sidebar",
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/method-label.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/navigation-sidebar.tsx",
      "content": "\"use client\";\n\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\";\nimport { cn } from \"@/lib/utils\";\nimport { useI18n } from \"@/registry/default/lib/i18n\";\nimport { MethodLabel } from \"@/registry/default/ui/method-label\";\nimport { ChevronRight } from \"lucide-react\";\nimport type { OpenAPIV3 } from \"openapi-types\";\nimport React, { useMemo, useState } from \"react\";\n\ninterface NavigationSidebarProps {\n  spec: OpenAPIV3.Document;\n  activePath?: string | null;\n  activeMethod?: string | null;\n  onSelectOperation?: (path: string, method: string, operation: any) => void;\n  className?: string;\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  groupByTags?: boolean; // 新增：控制是否按标签分组\n}\n\nconst NavigationSidebar = React.forwardRef<\n  HTMLDivElement,\n  NavigationSidebarProps\n>(\n  (\n    {\n      spec,\n      activePath = null,\n      activeMethod = null,\n      onSelectOperation = () => { },\n      className,\n      collapsible = \"offcanvas\",\n      groupByTags = true, // 默认按标签分组\n    },\n    ref,\n  ) => {\n    const { t } = useI18n();\n    const [collapsedTags, setCollapsedTags] = useState<Record<string, boolean>>({});\n    const [searchQuery, setSearchQuery] = useState(\"\");\n\n    // 获取所有可用的操作\n    const allOperations = useMemo(() => {\n      const operations: Array<{\n        path: string;\n        method: string;\n        operation: OpenAPIV3.OperationObject;\n        tags: string[];\n      }> = [];\n\n      if (spec.paths) {\n        Object.entries(spec.paths).forEach(([path, pathItem]) => {\n          const methods = [\"get\", \"post\", \"put\", \"delete\", \"patch\", \"options\", \"head\"];\n\n          methods.forEach((method) => {\n            const operation = (pathItem as any)?.[method];\n            if (\n              operation &&\n              typeof operation === \"object\" &&\n              \"responses\" in operation\n            ) {\n              operations.push({\n                path,\n                method,\n                operation,\n                tags: operation.tags || [],\n              });\n            }\n          });\n        });\n      }\n\n      return operations;\n    }, [spec.paths]);\n\n    // 获取所有唯一的标签\n    const allTags = useMemo(() => {\n      const tagSet = new Set<string>();\n\n      // 从根级别的 tags 获取\n      if (spec.tags) {\n        spec.tags.forEach(tag => tagSet.add(tag.name));\n      }\n\n      // 从操作中获取 tags\n      allOperations.forEach(({ tags }) => {\n        tags.forEach(tag => tagSet.add(tag));\n      });\n\n      return Array.from(tagSet).sort();\n    }, [spec.tags, allOperations]);\n\n    // 过滤操作\n    const filteredOperations = useMemo(() => {\n      if (!searchQuery) return allOperations;\n\n      const query = searchQuery.toLowerCase();\n      return allOperations.filter(({ path, method, operation }) => {\n        return (\n          path.toLowerCase().includes(query) ||\n          method.toLowerCase().includes(query) ||\n          operation.summary?.toLowerCase().includes(query) ||\n          operation.description?.toLowerCase().includes(query) ||\n          operation.operationId?.toLowerCase().includes(query)\n        );\n      });\n    }, [allOperations, searchQuery]);\n\n    // 按标签分组的操作\n    const operationsByTag = useMemo(() => {\n      const grouped: Record<string, typeof filteredOperations> = {};\n\n      // 初始化所有标签\n      allTags.forEach(tag => {\n        grouped[tag] = [];\n      });\n\n      // 分组操作\n      filteredOperations.forEach(operation => {\n        if (operation.tags && operation.tags.length > 0) {\n          operation.tags.forEach(tag => {\n            if (grouped[tag]) {\n              grouped[tag].push(operation);\n            }\n          });\n        } else {\n          // 没有标签的操作放入 \"Other\" 组\n          if (!grouped[\"Other\"]) {\n            grouped[\"Other\"] = [];\n          }\n          grouped[\"Other\"].push(operation);\n        }\n      });\n\n      return grouped;\n    }, [filteredOperations, allTags]);\n\n    const toggleTagCollapse = (tagName: string) => {\n      setCollapsedTags((prev) => ({\n        ...prev,\n        [tagName]: !prev[tagName],\n      }));\n    };\n\n    // 渲染操作项\n    const renderOperationItem = (path: string, method: string, operation: any) => {\n      const isActive =\n        activePath === path &&\n        activeMethod !== null &&\n        activeMethod.toUpperCase() === method.toUpperCase();\n\n      return (\n        <SidebarMenuItem key={`${method}-${path}`}>\n          <SidebarMenuButton\n            onClick={() => onSelectOperation(path, method, operation)}\n            isActive={isActive}\n            className=\"justify-between text-xs font-mono\"\n          >\n            <span className=\"truncate\">{path}</span>\n            <MethodLabel\n              method={\n                method.toUpperCase() as\n                | \"GET\"\n                | \"POST\"\n                | \"PUT\"\n                | \"DELETE\"\n                | \"PATCH\"\n                | \"OPTIONS\"\n                | \"HEAD\"\n              }\n              className=\"ml-2 flex-shrink-0\"\n              variant=\"compact\"\n            />\n          </SidebarMenuButton>\n        </SidebarMenuItem>\n      );\n    };\n\n    // 渲染按标签分组的内容\n    const renderGroupedContent = () => {\n      const validTags = Object.entries(operationsByTag)\n        .filter(([_, operations]) => operations.length > 0)\n        .sort(([a], [b]) => {\n          // \"Other\" 组放在最后\n          if (a === \"Other\") return 1;\n          if (b === \"Other\") return -1;\n          return a.localeCompare(b);\n        });\n\n      return validTags.map(([tagName, operations]) => {\n        const isCollapsed = collapsedTags[tagName];\n\n        return (\n          <SidebarGroup key={tagName} className=\"py-0\">\n            <Collapsible\n              open={!isCollapsed}\n              onOpenChange={() => toggleTagCollapse(tagName)}\n            >\n              <CollapsibleTrigger asChild>\n                <SidebarGroupLabel className=\"cursor-pointer hover:bg-sidebar-accent rounded-md transition-colors\">\n                  <div className=\"flex items-center\">\n                    <ChevronRight\n                      className={cn(\n                        \"h-3 w-3 mr-2 transition-transform\",\n                        !isCollapsed && \"rotate-90\",\n                      )}\n                    />\n                    <span className=\"text-xs font-medium\">{tagName}</span>\n                    <span className=\"text-xs text-muted-foreground ml-2\">\n                      ({operations.length})\n                    </span>\n                  </div>\n                </SidebarGroupLabel>\n              </CollapsibleTrigger>\n\n              <CollapsibleContent>\n                <SidebarGroupContent>\n                  <SidebarMenu>\n                    {operations.map(({ path, method, operation }) =>\n                      renderOperationItem(path, method, operation)\n                    )}\n                  </SidebarMenu>\n                </SidebarGroupContent>\n              </CollapsibleContent>\n            </Collapsible>\n          </SidebarGroup>\n        );\n      });\n    };\n\n    // 渲染平铺的内容\n    const renderFlatContent = () => (\n      <SidebarGroup>\n        <SidebarGroupContent>\n          <SidebarMenu>\n            {filteredOperations.map(({ path, method, operation }) =>\n              renderOperationItem(path, method, operation)\n            )}\n          </SidebarMenu>\n        </SidebarGroupContent>\n      </SidebarGroup>\n    );\n\n    return (\n      <Sidebar ref={ref} className={className} collapsible={collapsible}>\n        {/* Header with search */}\n        <SidebarHeader className=\"border-b p-4\">\n          <div className=\"min-w-0 flex-1\">\n            <h2 className=\"text-sm font-medium truncate\">\n              {spec.info?.title || \"API Documentation\"}\n            </h2>\n            {spec.info?.version && (\n              <p className=\"text-xs text-sidebar-foreground/70 mt-0.5\">\n                v{spec.info.version}\n              </p>\n            )}\n          </div>\n\n          {/* Search */}\n          <div className=\"mt-3\">\n            <Input\n              placeholder={t(\"Search...\")}\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"h-8 text-xs\"\n            />\n          </div>\n        </SidebarHeader>\n\n        {/* Content */}\n        <SidebarContent className=\"py-2\">\n          {groupByTags && allTags.length > 0 ? renderGroupedContent() : renderFlatContent()}\n        </SidebarContent>\n      </Sidebar>\n    );\n  },\n);\n\nNavigationSidebar.displayName = \"NavigationSidebar\";\n\nexport { NavigationSidebar, type NavigationSidebarProps };\n",
      "type": "registry:ui",
      "target": "components/pivot/navigation-sidebar.tsx"
    }
  ]
}