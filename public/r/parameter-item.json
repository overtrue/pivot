{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "parameter-item",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/constraint-display.json",
    "https://pivotkit.vercel.app/r/default-value-display.json",
    "https://pivotkit.vercel.app/r/deprecated-badge.json",
    "https://pivotkit.vercel.app/r/enum-values-display.json",
    "https://pivotkit.vercel.app/r/format-badge.json",
    "https://pivotkit.vercel.app/r/in-label.json",
    "https://pivotkit.vercel.app/r/parameter-description.json",
    "https://pivotkit.vercel.app/r/parameter-name.json",
    "https://pivotkit.vercel.app/r/style-badge.json",
    "https://pivotkit.vercel.app/r/type-indicator.json",
    "https://pivotkit.vercel.app/r/example-display.json",
    "https://pivotkit.vercel.app/r/expand-collapse.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/parameter-item.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { OpenAPIV3 } from \"openapi-types\";\nimport React, { useState } from \"react\";\nimport { ConstraintDisplay } from \"@/registry/default/ui/constraint-display\";\nimport { DefaultValueDisplay } from \"@/registry/default/ui/default-value-display\";\nimport { DeprecatedBadge } from \"@/registry/default/ui/deprecated-badge\";\nimport { EnumValuesDisplay } from \"@/registry/default/ui/enum-values-display\";\nimport { FormatBadge } from \"@/registry/default/ui/format-badge\";\nimport { InLabel } from \"@/registry/default/ui/in-label\";\nimport { ParameterDescription } from \"@/registry/default/ui/parameter-description\";\nimport { ParameterName } from \"@/registry/default/ui/parameter-name\";\nimport { StyleBadge, type StyleType } from \"@/registry/default/ui/style-badge\";\nimport { TypeIndicator } from \"@/registry/default/ui/type-indicator\";\nimport { ExampleDisplay } from \"@/registry/default/ui/example-display\";\nimport { ExpandCollapse } from \"@/registry/default/ui/expand-collapse\";\n\n// Import types from the centralized types file\n\ninterface ParameterItemProps {\n  name: string;\n  in: \"query\" | \"header\" | \"path\" | \"cookie\";\n  schema: OpenAPIV3.SchemaObject;\n  required?: boolean;\n  description?: string;\n  deprecated?: boolean;\n  style?: StyleType;\n  explode?: boolean;\n  examples?: Record<\n    string,\n    OpenAPIV3.ExampleObject | OpenAPIV3.ReferenceObject\n  >;\n  className?: string;\n  expanded?: boolean;\n}\n\nconst ParameterItem = React.forwardRef<HTMLDivElement, ParameterItemProps>(\n  (\n    {\n      name,\n      in: paramIn,\n      schema,\n      required = false,\n      description,\n      deprecated = false,\n      style,\n      explode = false,\n      examples,\n      className,\n      expanded = false,\n    },\n    ref,\n  ) => {\n    const [isExpanded, setIsExpanded] = useState(expanded);\n\n    const hasDetails =\n      schema.default !== undefined ||\n      schema.enum ||\n      examples ||\n      description ||\n      schema.minimum !== undefined ||\n      schema.maximum !== undefined ||\n      schema.minLength !== undefined ||\n      schema.maxLength !== undefined ||\n      schema.pattern;\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"bg-neutral-50 dark:bg-neutral-800 rounded-md overflow-hidden\",\n          className,\n        )}\n      >\n        <div\n          className=\"px-4 py-3 flex flex-wrap items-center justify-between gap-2 cursor-pointer dark:bg-neutral-800\"\n          onClick={() => setIsExpanded(!isExpanded)}\n        >\n          <div className=\"flex flex-wrap items-center gap-2\">\n            <ParameterName name={name} deprecated={deprecated} />\n\n            {deprecated && <DeprecatedBadge />}\n\n            {required && (\n              <span className=\"bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-400 px-2 py-0.5 text-xs rounded font-semibold\">\n                Required\n              </span>\n            )}\n\n            {explode && (\n              <span className=\"bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-0.5 text-xs rounded\">\n                Explode\n              </span>\n            )}\n          </div>\n\n          {hasDetails && (\n            <ExpandCollapse\n              isExpanded={isExpanded}\n              onToggle={() => setIsExpanded(!isExpanded)}\n            />\n          )}\n        </div>\n\n        {isExpanded && hasDetails && (\n          <div className=\"p-4 pt-0 flex flex-col gap-3 dark:bg-neutral-800\">\n            {description && <ParameterDescription description={description} />}\n\n            {schema.default !== undefined && (\n              <DefaultValueDisplay value={schema.default} />\n            )}\n\n            {schema.enum && schema.enum.length > 0 && (\n              <EnumValuesDisplay values={schema.enum} />\n            )}\n\n            <ConstraintDisplay schema={schema} />\n\n            {examples && Object.keys(examples).length > 0 && (\n              <div>\n                <h4 className=\"text-xs font-semibold mb-2 text-neutral-800 dark:text-neutral-200\">\n                  Examples\n                </h4>\n                <div className=\"space-y-2\">\n                  {Object.entries(examples).map(([key, example]) => (\n                    <div key={key}>\n                      <span className=\"text-xs font-medium text-neutral-600 dark:text-neutral-400\">\n                        {key}:\n                      </span>\n                      <ExampleDisplay example={example} />\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex items-center gap-2\">\n              <InLabel type={paramIn} />\n              {schema.type && <TypeIndicator type={schema.type} />}\n              {schema.format && <FormatBadge format={schema.format} />}\n              {style && <StyleBadge style={style} />}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n\nParameterItem.displayName = \"ParameterItem\";\n\nexport { ParameterItem, type ParameterItemProps };\n",
      "type": "registry:ui",
      "target": "components/pivot/parameter-item.tsx"
    }
  ]
}