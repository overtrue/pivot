{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "header-item",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/deprecated-badge.json",
    "https://pivotkit.vercel.app/r/description-display.json",
    "https://pivotkit.vercel.app/r/enum-values-display.json",
    "https://pivotkit.vercel.app/r/format-badge.json",
    "https://pivotkit.vercel.app/r/required-badge.json",
    "https://pivotkit.vercel.app/r/type-indicator.json",
    "https://pivotkit.vercel.app/r/default-value-display.json",
    "https://pivotkit.vercel.app/r/examples-display.json",
    "https://pivotkit.vercel.app/r/expand-collapse.json"
  ],
  "files": [
    {
      "path": "registry/pivot/header-item.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { OpenAPIV3 } from 'openapi-types';\nimport React, { useState } from \"react\";\nimport { DeprecatedBadge } from \"@/registry/pivot/deprecated-badge\";\nimport { DescriptionDisplay } from \"@/registry/pivot/description-display\";\nimport { EnumValuesDisplay } from \"@/registry/pivot/enum-values-display\";\nimport { FormatBadge } from \"@/registry/pivot/format-badge\";\nimport { RequiredBadge } from \"@/registry/pivot/required-badge\";\nimport { TypeIndicator } from \"@/registry/pivot/type-indicator\";\nimport { DefaultValueDisplay } from \"@/registry/pivot/default-value-display\";\nimport { ExamplesDisplay } from \"@/registry/pivot/examples-display\";\nimport { ExpandCollapse } from \"@/registry/pivot/expand-collapse\";\n\n// Import types from the centralized types file\n\n// Type guard to check if it's a OpenAPIV3.SchemaObject and not a OpenAPIV3.ReferenceObject\nfunction isSchemaObject(\n  obj: OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject,\n): obj is OpenAPIV3.SchemaObject {\n  return obj && !(\"$ref\" in obj);\n}\n\n// OpenAPIV3.HeaderObject already has all necessary fields from OpenAPIV3.ParameterObject except name and in\ninterface HeaderItemProps extends OpenAPIV3.HeaderObject {\n  name: string; // Add header name as it's not part of OpenAPIV3.HeaderObject\n  components?: OpenAPIV3.ComponentsObject; // For rendering examples\n  className?: string;\n}\n\nconst HeaderItem = React.forwardRef<HTMLDivElement, HeaderItemProps>(\n  (\n    {\n      name,\n      required,\n      schema,\n      description,\n      deprecated,\n      style,\n      explode,\n      examples,\n      components,\n      className,\n    },\n    ref,\n  ) => {\n    const [isExpanded, setIsExpanded] = useState(false);\n\n    // 使用类型守卫来安全地访问schema属性\n    const hasSchemaDetails =\n      schema &&\n      isSchemaObject(schema) &&\n      (schema.default !== undefined ||\n        schema.enum ||\n        schema.minimum !== undefined ||\n        schema.maximum !== undefined ||\n        schema.minLength !== undefined ||\n        schema.maxLength !== undefined ||\n        schema.pattern);\n\n    const hasDetails =\n      description ||\n      hasSchemaDetails ||\n      (examples && Object.keys(examples).length > 0);\n\n    // Simple schema constraints display\n    const SchemaConstraints = ({ schema }: { schema: OpenAPIV3.SchemaObject }) => {\n      const constraints = [];\n\n      if (schema.minimum !== undefined)\n        constraints.push(`min: ${schema.minimum}`);\n      if (schema.maximum !== undefined)\n        constraints.push(`max: ${schema.maximum}`);\n      if (schema.minLength !== undefined)\n        constraints.push(`minLength: ${schema.minLength}`);\n      if (schema.maxLength !== undefined)\n        constraints.push(`maxLength: ${schema.maxLength}`);\n      if (schema.pattern) constraints.push(`pattern: ${schema.pattern}`);\n\n      if (constraints.length === 0) return null;\n\n      return (\n        <div className=\"text-xs text-neutral-600 dark:text-neutral-400\">\n          <span className=\"font-medium\">Constraints: </span>\n          {constraints.join(\", \")}\n        </div>\n      );\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"mb-2 p-2 border rounded\",\n          deprecated\n            ? \"border-red-300 bg-red-50 dark:border-red-700 dark:bg-red-900/20\"\n            : \"border-neutral-200 dark:border-neutral-700 dark:bg-neutral-800\",\n          className,\n        )}\n      >\n        <div className=\"flex items-center justify-between mb-1\">\n          <div className=\"flex items-center flex-wrap gap-2\">\n            <span\n              className={`font-mono font-medium ${deprecated ? \"line-through text-red-500\" : \"\"}`}\n            >\n              {name}\n            </span>\n            {required && <RequiredBadge />}\n            {deprecated && <DeprecatedBadge />}\n            {schema && isSchemaObject(schema) && schema.type && (\n              <TypeIndicator type={schema.type as any} />\n            )}\n            {schema && isSchemaObject(schema) && schema.format && (\n              <FormatBadge format={schema.format as any} />\n            )}\n            {style && (\n              <span className=\"bg-blue-100 text-blue-800 dark:bg-blue-700 dark:text-blue-200 px-2 py-0.5 text-xs rounded\">\n                style: {style}\n              </span>\n            )}\n            {explode && (\n              <span className=\"bg-purple-100 text-purple-800 dark:bg-purple-700 dark:text-purple-200 px-2 py-0.5 text-xs rounded\">\n                explode\n              </span>\n            )}\n          </div>\n\n          {hasDetails && (\n            <ExpandCollapse\n              isExpanded={isExpanded}\n              onToggle={() => setIsExpanded(!isExpanded)}\n              label={isExpanded ? \"Hide Details\" : \"Show Details\"}\n            />\n          )}\n        </div>\n\n        {description && !isExpanded && (\n          <div className=\"text-sm text-neutral-600 dark:text-neutral-400 truncate\">\n            <DescriptionDisplay description={description} />\n          </div>\n        )}\n\n        {isExpanded && hasDetails && (\n          <div className=\"mt-3 pl-2 border-l-2 border-neutral-200 dark:border-neutral-600 space-y-4\">\n            {description && (\n              <div>\n                <DescriptionDisplay\n                  description={description}\n                  className=\"text-sm\"\n                />\n              </div>\n            )}\n\n            {schema && isSchemaObject(schema) && (\n              <DefaultValueDisplay value={schema.default} />\n            )}\n            {schema && isSchemaObject(schema) && (\n              <EnumValuesDisplay values={schema.enum || []} />\n            )}\n            {schema && isSchemaObject(schema) && (\n              <SchemaConstraints schema={schema} />\n            )}\n\n            {examples && Object.keys(examples).length > 0 && (\n              <div>\n                <ExamplesDisplay examples={examples} components={components} />\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n\nHeaderItem.displayName = \"HeaderItem\";\n\nexport {\n  HeaderItem,\n  type HeaderItemProps\n};\n\n",
      "type": "registry:ui",
      "target": "components/pivot/header-item.tsx"
    }
  ]
}