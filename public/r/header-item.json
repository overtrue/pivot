{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "header-item",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/default-value-display.json",
    "https://pivotkit.vercel.app/r/deprecated-badge.json",
    "https://pivotkit.vercel.app/r/description-display.json",
    "https://pivotkit.vercel.app/r/enum-values-display.json",
    "https://pivotkit.vercel.app/r/examples-display.json",
    "https://pivotkit.vercel.app/r/expand-collapse.json",
    "https://pivotkit.vercel.app/r/format-badge.json",
    "https://pivotkit.vercel.app/r/required-badge.json",
    "https://pivotkit.vercel.app/r/type-indicator.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/header-item.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { DefaultValueDisplay } from \"@/registry/default/ui/default-value-display\";\nimport { DeprecatedBadge } from \"@/registry/default/ui/deprecated-badge\";\nimport { DescriptionDisplay } from \"@/registry/default/ui/description-display\";\nimport { EnumValuesDisplay } from \"@/registry/default/ui/enum-values-display\";\nimport { ExamplesDisplay } from \"@/registry/default/ui/examples-display\";\nimport { ExpandCollapse } from \"@/registry/default/ui/expand-collapse\";\nimport { FormatBadge } from \"@/registry/default/ui/format-badge\";\nimport { RequiredBadge } from \"@/registry/default/ui/required-badge\";\nimport { TypeIndicator } from \"@/registry/default/ui/type-indicator\";\nimport type { OpenAPIV3 } from \"openapi-types\";\nimport React, { useState } from \"react\";\n\n// Import types from the centralized types file\n\n// Type guard to check if it's a OpenAPIV3.SchemaObject and not a OpenAPIV3.ReferenceObject\nfunction isSchemaObject(\n  obj: OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject,\n): obj is OpenAPIV3.SchemaObject {\n  return obj && !(\"$ref\" in obj);\n}\n\n// OpenAPIV3.HeaderObject already has all necessary fields from OpenAPIV3.ParameterObject except name and in\ninterface HeaderItemProps extends OpenAPIV3.HeaderObject {\n  name: string; // Add header name as it's not part of OpenAPIV3.HeaderObject\n  components?: OpenAPIV3.ComponentsObject; // For rendering examples\n  className?: string;\n}\n\n// 提取样式徽章组件\nconst StyleBadge = ({ style }: { style: string }) => (\n  <span className=\"bg-blue-100 text-blue-800 dark:bg-blue-700 dark:text-blue-200 px-2 py-0.5 text-xs rounded\">\n    style: {style}\n  </span>\n);\n\nconst ExplodeBadge = () => (\n  <span className=\"bg-purple-100 text-purple-800 dark:text-purple-700 dark:text-purple-200 px-2 py-0.5 text-xs rounded\">\n    explode\n  </span>\n);\n\n// 提取头部徽章组件\nconst HeaderBadges = ({\n  schema,\n  style,\n  explode,\n  required,\n  deprecated\n}: {\n  schema?: OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject;\n  style?: string;\n  explode?: boolean;\n  required?: boolean;\n  deprecated?: boolean;\n}) => (\n  <div className=\"flex items-center flex-wrap gap-2\">\n    {required && <RequiredBadge />}\n    {deprecated && <DeprecatedBadge />}\n    {schema && isSchemaObject(schema) && schema.type && (\n      <TypeIndicator type={schema.type} />\n    )}\n    {schema && isSchemaObject(schema) && schema.format && (\n      <FormatBadge format={schema.format} />\n    )}\n    {style && <StyleBadge style={style} />}\n    {explode && <ExplodeBadge />}\n  </div>\n);\n\n// 提取详情内容组件\nconst HeaderDetails = ({\n  schema,\n  description,\n  examples,\n  components\n}: {\n  schema?: OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject;\n  description?: string;\n  examples?: Record<string, OpenAPIV3.ExampleObject | OpenAPIV3.ReferenceObject>;\n  components?: OpenAPIV3.ComponentsObject;\n}) => {\n  if (!schema || !isSchemaObject(schema)) return null;\n\n  return (\n    <div className=\"mt-3 pl-2 border-l-2 border-neutral-200 dark:border-neutral-600 space-y-4\">\n      {description && (\n        <div>\n          <DescriptionDisplay\n            description={description}\n            className=\"text-sm\"\n          />\n        </div>\n      )}\n\n      <DefaultValueDisplay value={schema.default} />\n      <EnumValuesDisplay values={schema.enum || []} />\n\n      {/* Schema constraints */}\n      {(() => {\n        const constraints = [];\n        if (schema.minimum !== undefined) constraints.push(`min: ${schema.minimum}`);\n        if (schema.maximum !== undefined) constraints.push(`max: ${schema.maximum}`);\n        if (schema.minLength !== undefined) constraints.push(`minLength: ${schema.minLength}`);\n        if (schema.maxLength !== undefined) constraints.push(`maxLength: ${schema.maxLength}`);\n        if (schema.pattern) constraints.push(`pattern: ${schema.pattern}`);\n\n        if (constraints.length === 0) return null;\n\n        return (\n          <div className=\"text-xs text-neutral-600 dark:text-neutral-400\">\n            <span className=\"font-medium\">Constraints: </span>\n            {constraints.join(\", \")}\n          </div>\n        );\n      })()}\n\n      {examples && Object.keys(examples).length > 0 && (\n        <div>\n          <ExamplesDisplay examples={examples} components={components} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst HeaderItem = React.forwardRef<HTMLDivElement, HeaderItemProps>(\n  (\n    {\n      name,\n      required,\n      schema,\n      description,\n      deprecated,\n      style,\n      explode,\n      examples,\n      components,\n      className,\n    },\n    ref,\n  ) => {\n    const [isExpanded, setIsExpanded] = useState(false);\n\n    // 使用类型守卫来安全地访问schema属性\n    const hasSchemaDetails =\n      schema &&\n      isSchemaObject(schema) &&\n      (schema.default !== undefined ||\n        schema.enum ||\n        schema.minimum !== undefined ||\n        schema.maximum !== undefined ||\n        schema.minLength !== undefined ||\n        schema.maxLength !== undefined ||\n        schema.pattern);\n\n    const hasDetails =\n      description ||\n      hasSchemaDetails ||\n      (examples && Object.keys(examples).length > 0);\n\n    const toggleExpansion = () => setIsExpanded(!isExpanded);\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"mb-2 p-2 border rounded\",\n          deprecated\n            ? \"border-red-300 bg-red-50 dark:border-red-700 dark:bg-red-900/20\"\n            : \"border-neutral-200 dark:border-neutral-700 dark:bg-neutral-800\",\n          className,\n        )}\n      >\n        <div className=\"flex items-center justify-between mb-1\">\n          <div className=\"flex items-center flex-wrap gap-2\">\n            <span\n              className={`font-mono font-medium ${deprecated ? \"line-through text-red-500\" : \"\"}`}\n            >\n              {name}\n            </span>\n            <HeaderBadges\n              schema={schema}\n              style={style}\n              explode={explode}\n              required={required}\n              deprecated={deprecated}\n            />\n          </div>\n\n          {hasDetails && (\n            <ExpandCollapse\n              isExpanded={isExpanded}\n              onToggle={toggleExpansion}\n              label={isExpanded ? \"Hide Details\" : \"Show Details\"}\n            />\n          )}\n        </div>\n\n        {description && !isExpanded && (\n          <div className=\"text-sm text-neutral-600 dark:text-neutral-400 truncate\">\n            <DescriptionDisplay description={description} />\n          </div>\n        )}\n\n        {isExpanded && hasDetails && (\n          <HeaderDetails\n            schema={schema}\n            description={description}\n            examples={examples}\n            components={components}\n          />\n        )}\n      </div>\n    );\n  },\n);\n\nHeaderItem.displayName = \"HeaderItem\";\n\nexport { HeaderItem, type HeaderItemProps };\n",
      "type": "registry:ui",
      "target": "components/pivot/header-item.tsx"
    }
  ]
}