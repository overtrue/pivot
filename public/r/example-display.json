{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "example-display",
  "type": "registry:ui",
  "dependencies": [
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/code-markdown.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/example-display.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useI18n } from \"@/registry/default/lib/i18n\";\nimport { CodeMarkdown } from \"@/registry/default/ui/code-markdown\";\nimport React from \"react\";\n\ninterface ExampleDisplayProps {\n  example: any;\n  className?: string;\n  language?: string; // 支持指定语言\n  title?: string; // 添加标题选项\n  disableCopy?: boolean; // 是否禁用复制功能\n}\n\n/**\n * 组件用于展示 API 示例数据，带有语法高亮和复制功能\n * 支持多种格式（json, xml, yaml等）\n */\nconst ExampleDisplay = React.forwardRef<HTMLDivElement, ExampleDisplayProps>(\n  (\n    { example, className = \"\", language = \"json\", title, disableCopy = false },\n    ref,\n  ) => {\n    const { t } = useI18n();\n\n    if (!example) {\n      return (\n        <div\n          ref={ref}\n          className=\"bg-yellow-50 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-300 p-3 rounded text-sm\"\n        >\n          {t(\"No example data provided\")}\n        </div>\n      );\n    }\n\n    // 根据不同的语言格式化示例数据\n    const formatExample = () => {\n      // 如果示例已经是字符串，直接返回\n      if (typeof example === \"string\") {\n        return example;\n      }\n\n      // 根据语言选择格式化方式\n      switch (language) {\n        case \"json\":\n          return JSON.stringify(example, null, 2);\n        case \"xml\":\n          // 如果example是对象但需要显示为XML，尝试转换为XML格式字符串\n          try {\n            // 简单的对象到XML字符串转换\n            const objectToXml = (obj: any, rootName = \"root\") => {\n              let xml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<${rootName}>`;\n\n              for (const key in obj) {\n                const value = obj[key];\n                if (value === null || value === undefined) {\n                  xml += `\\n  <${key}/>`;\n                } else if (typeof value === \"object\" && !Array.isArray(value)) {\n                  xml += `\\n  <${key}>${objectToXml(value, \"\")}</${key}>`;\n                } else if (Array.isArray(value)) {\n                  xml += `\\n  <${key}>`;\n                  value.forEach((item) => {\n                    if (typeof item === \"object\") {\n                      xml += `\\n    <item>${objectToXml(item, \"\")}</item>`;\n                    } else {\n                      xml += `\\n    <item>${item}</item>`;\n                    }\n                  });\n                  xml += `\\n  </${key}>`;\n                } else {\n                  xml += `\\n  <${key}>${value}</${key}>`;\n                }\n              }\n\n              return rootName ? `${xml}\\n</${rootName}>` : xml;\n            };\n\n            return objectToXml(example, \"data\");\n          } catch (error) {\n            console.error(t(\"XML formatting failed:\"), error);\n            return JSON.stringify(example, null, 2); // 失败时回退到JSON\n          }\n        default:\n          return JSON.stringify(example, null, 2);\n      }\n    };\n\n    const exampleStr = formatExample();\n\n    return (\n      <div ref={ref} className={cn(\"relative\", className)}>\n        {title && (\n          <div className=\"bg-neutral-50 dark:bg-neutral-800 px-4 py-2 text-sm font-medium text-neutral-700 dark:text-neutral-300 rounded-t-lg\">\n            {title}\n          </div>\n        )}\n\n        <CodeMarkdown\n          code={exampleStr}\n          language={language}\n          disableCopy={disableCopy}\n          className={title ? \"rounded-t-none\" : \"\"}\n        />\n      </div>\n    );\n  },\n);\n\nExampleDisplay.displayName = \"ExampleDisplay\";\n\nexport { ExampleDisplay, type ExampleDisplayProps };\n",
      "type": "registry:ui",
      "target": "components/ui/example-display.tsx"
    }
  ]
}