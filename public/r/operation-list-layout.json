{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "operation-list-layout",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "sidebar",
    "https://pivotkit.vercel.app/r/hooks.json",
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/navigation-sidebar.json",
    "https://pivotkit.vercel.app/r/operation-box.json",
    "https://pivotkit.vercel.app/r/try-it-out-panel.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/operation-list-layout.tsx",
      "content": "\"use client\";\n\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { cn } from \"@/lib/utils\";\nimport { useOpenApi } from \"@/registry/default/hooks/use-openapi\";\nimport { useOpenAPILoader, type OpenAPISource } from \"@/registry/default/hooks/use-openapi-loader\";\nimport { useI18n } from \"@/registry/default/lib/i18n\";\nimport { NavigationSidebar } from \"@/registry/default/ui/navigation-sidebar\";\nimport { OperationBox } from \"@/registry/default/ui/operation-box\";\nimport { TryItOutPanel } from \"@/registry/default/ui/try-it-out-panel\";\nimport type { OpenAPIV3 } from \"openapi-types\";\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\n\n// Simple components for basic sections\nconst SectionTitle = React.forwardRef<\n  HTMLDivElement,\n  { title: string; className?: string }\n>(({ title, className }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-xl font-semibold text-neutral-900 dark:text-white\",\n      className,\n    )}\n  >\n    {title}\n  </div>\n));\nSectionTitle.displayName = \"SectionTitle\";\n\nconst InfoSection = React.forwardRef<HTMLDivElement, { info: any }>(\n  ({ info }, ref) => (\n    <div ref={ref} className=\"space-y-4\">\n      <h1 className=\"text-3xl font-bold text-neutral-900 dark:text-white\">\n        {info.title}\n      </h1>\n      <p className=\"text-lg text-neutral-600 dark:text-neutral-400\">\n        Version: {info.version}\n      </p>\n      {info.description && (\n        <p className=\"text-neutral-700 dark:text-neutral-300\">\n          {info.description}\n        </p>\n      )}\n    </div>\n  ),\n);\nInfoSection.displayName = \"InfoSection\";\n\nconst ServersSection = React.forwardRef<\n  HTMLDivElement,\n  { servers: OpenAPIV3.ServerObject[] }\n>(({ servers }, ref) => (\n  <div ref={ref} className=\"space-y-2\">\n    {servers.map((server, index) => (\n      <div key={index} className=\"p-3 bg-white dark:bg-neutral-800 rounded-md\">\n        <code className=\"text-sm font-mono text-blue-600 dark:text-blue-400\">\n          {server.url}\n        </code>\n        {server.description && (\n          <p className=\"text-sm text-neutral-600 dark:text-neutral-400 mt-1\">\n            {server.description}\n          </p>\n        )}\n      </div>\n    ))}\n  </div>\n));\nServersSection.displayName = \"ServersSection\";\n\n// 统一的接口定义\ninterface OperationListLayoutProps {\n  // 支持多种输入方式 - 向后兼容\n  spec?: OpenAPIV3.Document | string | null;\n  url?: string;\n  selectedPath?: string | null;\n  selectedMethod?: string | null;\n  onSelectOperation?: (\n    path: string,\n    method: string,\n    operation: OpenAPIV3.OperationObject,\n  ) => void;\n  className?: string;\n  // 新增开关控制\n  showNavigation?: boolean;\n  showTryPanel?: boolean;\n  navigationWidth?: string;\n}\n\ninterface OperationInfo {\n  path: string;\n  method: string;\n  operation: OpenAPIV3.OperationObject;\n}\n\nconst OperationListLayout = React.forwardRef<\n  HTMLDivElement,\n  OperationListLayoutProps\n>(\n  (\n    {\n      spec: inputSpec,\n      url,\n      selectedPath = null,\n      selectedMethod = null,\n      onSelectOperation = () => { },\n      className,\n      showNavigation = true,\n      showTryPanel = true,\n      navigationWidth = \"320px\",\n    },\n    ref,\n  ) => {\n    const { t } = useI18n();\n    const [localSelectedPath, setLocalSelectedPath] = useState<string | null>(\n      selectedPath,\n    );\n    const [localSelectedMethod, setLocalSelectedMethod] = useState<\n      string | null\n    >(selectedMethod);\n    const [activeTag, setActiveTag] = useState<string | null>(null);\n\n    const componentsRef = useRef<HTMLDivElement>(null);\n\n    // 智能数据源选择：URL > 字符串 > 对象\n    const dataSource: OpenAPISource | undefined = useMemo(() => {\n      if (url) {\n        return { type: \"url\", data: url };\n      }\n      if (typeof inputSpec === \"string\") {\n        return { type: \"string\", data: inputSpec };\n      }\n      if (inputSpec && typeof inputSpec === \"object\") {\n        return { type: \"object\", data: inputSpec };\n      }\n      return undefined;\n    }, [url, inputSpec]);\n\n    // 使用统一的数据加载器\n    const { spec, loading, error, loadFromUrl, loadFromString, loadFromObject } =\n      useOpenAPILoader(dataSource);\n\n    // 同步外部状态变化\n    useEffect(() => {\n      setLocalSelectedPath(selectedPath);\n    }, [selectedPath]);\n\n    useEffect(() => {\n      setLocalSelectedMethod(selectedMethod);\n    }, [selectedMethod]);\n\n    // Use the OpenAPI hook\n    const openApiHook = useOpenApi(spec);\n\n    // Get operations by tag using the hook\n    const getOperationsByTagMemo = useMemo(() => {\n      if (!openApiHook || !spec) return {};\n      return openApiHook.getOperationsByTag();\n    }, [openApiHook, spec]);\n\n    // Operations filtered by tag\n    const taggedOperations = useMemo(() => {\n      if (activeTag && getOperationsByTagMemo[activeTag]) {\n        return {\n          [activeTag as string]: getOperationsByTagMemo[activeTag] || [],\n        };\n      }\n      return getOperationsByTagMemo;\n    }, [activeTag, getOperationsByTagMemo]);\n\n    // 操作选择处理\n    const handleSelectOperation = useCallback(\n      (path: string, method: string, operation: OpenAPIV3.OperationObject) => {\n        setLocalSelectedPath(path);\n        setLocalSelectedMethod(method);\n        onSelectOperation(path, method, operation);\n\n        // Scroll to the selected operation\n        setTimeout(() => {\n          const operationId = operation.operationId || `${method}-${path}`;\n          const element = document.getElementById(`operation-${operationId}`);\n          if (element) {\n            element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n          }\n        }, 100);\n      },\n      [onSelectOperation],\n    );\n\n    // Auto-select the first operation, to display content by default when page loads\n    useEffect(() => {\n      try {\n        if (spec && !localSelectedPath && !localSelectedMethod && openApiHook) {\n          const operationsByTag = openApiHook.getOperationsByTag();\n          const tags = Object.keys(operationsByTag);\n\n          if (tags.length > 0) {\n            const firstTag = tags[0];\n            if (firstTag) {\n              const operations = operationsByTag[firstTag];\n\n              if (operations && operations.length > 0) {\n                const firstOperation = operations[0];\n                if (firstOperation) {\n                  const { path, method, operation } = firstOperation;\n                  handleSelectOperation(path, method, operation);\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        console.error(\"Error auto-selecting operation:\", error);\n      }\n    }, [\n      spec,\n      localSelectedPath,\n      localSelectedMethod,\n      handleSelectOperation,\n      openApiHook,\n    ]);\n\n    // Scroll to selected operation when selectedPath or selectedMethod changes\n    useEffect(() => {\n      if (localSelectedPath && localSelectedMethod && spec) {\n        setTimeout(() => {\n          // Find the operation to get its operationId\n          const pathItem = spec.paths[localSelectedPath];\n          if (pathItem) {\n            const operation =\n              pathItem[\n              localSelectedMethod.toLowerCase() as keyof OpenAPIV3.PathItemObject\n              ];\n            if (operation && typeof operation === \"object\") {\n              // Use the same operationId generation logic as in the render\n              const operationId =\n                (operation as OpenAPIV3.OperationObject).operationId ||\n                `${localSelectedMethod.toLowerCase()}-${localSelectedPath}`;\n              const element = document.getElementById(\n                `operation-${operationId}`,\n              );\n              if (element) {\n                element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n              }\n            }\n          }\n        }, 300);\n      }\n    }, [localSelectedPath, localSelectedMethod, spec]);\n\n    // 获取当前选择的操作\n    const currentOperation = useMemo(() => {\n      if (!spec || !localSelectedPath || !localSelectedMethod) return null;\n\n      const pathItem = spec.paths?.[localSelectedPath];\n      if (!pathItem) return null;\n\n      const operation = pathItem[localSelectedMethod.toLowerCase() as keyof typeof pathItem];\n      if (!operation || typeof operation !== \"object\" || !(\"responses\" in operation)) {\n        return null;\n      }\n\n      return operation as OpenAPIV3.OperationObject;\n    }, [spec, localSelectedPath, localSelectedMethod]);\n\n    // 构建服务器 URL\n    const baseUrl = useMemo(() => {\n      if (!spec?.servers || spec.servers.length === 0) return \"\";\n      return spec.servers[0]?.url || \"\";\n    }, [spec]);\n\n    // 错误状态\n    if (error) {\n      return (\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <h3 className=\"text-lg font-medium text-destructive mb-2\">\n              {t(\"Error loading OpenAPI specification\")}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">{error}</p>\n          </div>\n        </div>\n      );\n    }\n\n    // 加载状态\n    if (loading) {\n      return (\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-2\"></div>\n            <p className=\"text-sm text-muted-foreground\">\n              {t(\"Loading OpenAPI specification...\")}\n            </p>\n          </div>\n        </div>\n      );\n    }\n\n    // 无数据状态\n    if (!spec) {\n      return (\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <h3 className=\"text-lg font-medium mb-2\">\n              {t(\"No OpenAPI specification\")}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {t(\"Please provide a valid OpenAPI specification\")}\n            </p>\n          </div>\n        </div>\n      );\n    }\n\n    // 如果不显示导航栏，使用原始布局\n    if (!showNavigation) {\n      return (\n        <div\n          ref={ref}\n          className={cn(\n            \"flex min-h-full bg-neutral-50 dark:bg-neutral-900\",\n            className,\n          )}\n        >\n          {/* Center Content Area - 保持原有的操作列表结构 */}\n          <main className=\"flex-1 flex gap-2 p-8 mx-auto dark:text-neutral-200\">\n            <div>\n              {/* 1. Info Section */}\n              <div className=\"mb-10\">\n                {spec?.info && <InfoSection info={spec.info} />}\n              </div>\n\n              {/* 2. Servers Section */}\n              {spec?.servers && spec.servers.length > 0 && (\n                <div className=\"mb-10\">\n                  <SectionTitle\n                    title={t(\"Servers\")}\n                    className=\"text-2xl mb-6 pb-2 border-b dark:border-b-neutral-700\"\n                  />\n                  <ServersSection servers={spec.servers} />\n                </div>\n              )}\n\n              {/* 3. Operations Section (Filtered) - 保持原有结构 */}\n              <div className=\"mb-10\">\n                <SectionTitle\n                  title={\n                    activeTag\n                      ? t('Operations \"%s\"').replace(\"%s\", activeTag)\n                      : t(\"All Operations\")\n                  }\n                  className=\"text-2xl mb-6 pb-2 border-b dark:border-b-neutral-700\"\n                />\n\n                {Object.keys(taggedOperations).length > 0 ? (\n                  <div className=\"space-y-8\">\n                    {Object.entries(taggedOperations).map(([tag, operations]) => (\n                      <div key={tag} className=\"space-y-4\">\n                        {tag !== activeTag && (\n                          <h3 className=\"text-xl font-medium text-neutral-700 dark:text-neutral-300\">\n                            {tag}\n                          </h3>\n                        )}\n\n                        {operations.map(\n                          ({\n                            path,\n                            method,\n                            operation,\n                          }: {\n                            path: string;\n                            method: string;\n                            operation: OpenAPIV3.OperationObject;\n                          }) => {\n                            const operationId =\n                              operation.operationId || `${method}-${path}`;\n                            return (\n                              <div\n                                key={`${method}-${path}`}\n                                id={`operation-${operationId}`}\n                              >\n                                <OperationBox\n                                  onSelectOperation={() =>\n                                    handleSelectOperation(path, method, operation)\n                                  }\n                                  path={path}\n                                  method={method.toUpperCase()}\n                                  operation={operation}\n                                  components={spec?.components}\n                                />\n                              </div>\n                            );\n                          },\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  activeTag && (\n                    <div className=\"text-neutral-500 dark:text-neutral-400 italic\">\n                      {t('No operations found with tag \"%s\"').replace(\n                        \"%s\",\n                        activeTag,\n                      )}\n                    </div>\n                  )\n                )}\n              </div>\n            </div>\n\n            {/* Right Sidebar (Try It Out Panel) - 保持原有结构 */}\n            {showTryPanel && currentOperation && localSelectedPath && localSelectedMethod && (\n              <aside className=\"w-1/3 max-w-screen-md flex-shrink-0 p-4 relative\">\n                <div className=\"sticky top-4\">\n                  <TryItOutPanel\n                    operation={currentOperation}\n                    method={localSelectedMethod}\n                    path={localSelectedPath}\n                    baseUrl={baseUrl}\n                    components={spec?.components}\n                    collapsible={true}\n                    defaultCollapsed={false}\n                  />\n                </div>\n              </aside>\n            )}\n          </main>\n        </div>\n      );\n    }\n\n    // 使用 Sidebar 布局 - 与 operation-detailed-layout.tsx 保持一致的外层结构\n    return (\n      <SidebarProvider defaultOpen={true}>\n        {/* 导航侧边栏 */}\n        <NavigationSidebar\n          openapi={spec}\n          activePath={localSelectedPath}\n          activeMethod={localSelectedMethod}\n          onSelectOperation={handleSelectOperation}\n        />\n\n        {/* 主内容区域 */}\n        <main\n          ref={ref}\n          className={cn(`flex-1 flex flex-col h-full`, className)}\n        >\n          {/* Sidebar 控制按钮 */}\n          <div className=\"p-2 border-b\">\n            <SidebarTrigger />\n          </div>\n\n          {/* 内容布局 */}\n          <div className=\"flex-1 flex\">\n            {/* 操作列表区域 - 保持原有的列表展示结构 */}\n            <div\n              className={cn(\n                'p-4 bg-neutral-50 dark:bg-neutral-900 dark:text-neutral-200',\n                showTryPanel ? \"flex-1 border-r\" : \"max-w-4xl mx-auto\"\n              )}\n            >\n              {/* 1. Info Section */}\n              <div className=\"mb-10\">\n                {spec?.info && <InfoSection info={spec.info} />}\n              </div>\n\n              {/* 2. Servers Section */}\n              {spec?.servers && spec.servers.length > 0 && (\n                <div className=\"mb-10\">\n                  <SectionTitle\n                    title={t(\"Servers\")}\n                    className=\"text-2xl mb-6 pb-2 border-b dark:border-b-neutral-700\"\n                  />\n                  <ServersSection servers={spec.servers} />\n                </div>\n              )}\n\n              {/* 3. Operations Section (Filtered) - 保持原有的列表结构 */}\n              <div className=\"mb-10\">\n                <SectionTitle\n                  title={\n                    activeTag\n                      ? t('Operations \"%s\"').replace(\"%s\", activeTag)\n                      : t(\"All Operations\")\n                  }\n                  className=\"text-2xl mb-6 pb-2 border-b dark:border-b-neutral-700\"\n                />\n\n                {Object.keys(taggedOperations).length > 0 ? (\n                  <div className=\"space-y-8\">\n                    {Object.entries(taggedOperations).map(([tag, operations]) => (\n                      <div key={tag} className=\"space-y-4\">\n                        {tag !== activeTag && (\n                          <h3 className=\"text-xl font-medium text-neutral-700 dark:text-neutral-300\">\n                            {tag}\n                          </h3>\n                        )}\n\n                        {operations.map(\n                          ({\n                            path,\n                            method,\n                            operation,\n                          }: {\n                            path: string;\n                            method: string;\n                            operation: OpenAPIV3.OperationObject;\n                          }) => {\n                            const operationId =\n                              operation.operationId || `${method}-${path}`;\n                            return (\n                              <div\n                                key={`${method}-${path}`}\n                                id={`operation-${operationId}`}\n                              >\n                                <OperationBox\n                                  onSelectOperation={() =>\n                                    handleSelectOperation(path, method, operation)\n                                  }\n                                  path={path}\n                                  method={method.toUpperCase()}\n                                  operation={operation}\n                                  components={spec?.components}\n                                />\n                              </div>\n                            );\n                          },\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  activeTag && (\n                    <div className=\"text-neutral-500 dark:text-neutral-400 italic\">\n                      {t('No operations found with tag \"%s\"').replace(\n                        \"%s\",\n                        activeTag,\n                      )}\n                    </div>\n                  )\n                )}\n              </div>\n            </div>\n\n            {/* 右侧试用面板 */}\n            {showTryPanel && currentOperation && localSelectedPath && localSelectedMethod && (\n              <div className=\"w-1/3 max-w-128 flex flex-col items-start p-4\">\n                <div className=\"w-full sticky top-4\">\n                  <TryItOutPanel\n                    operation={currentOperation}\n                    method={localSelectedMethod}\n                    path={localSelectedPath}\n                    baseUrl={baseUrl}\n                    components={spec?.components}\n                    collapsible={true}\n                    defaultCollapsed={false}\n                    className=\"h-full\"\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        </main>\n      </SidebarProvider>\n    );\n  },\n);\n\nOperationListLayout.displayName = \"OperationListLayout\";\n\nexport {\n  OperationListLayout,\n  type OperationInfo,\n  type OperationListLayoutProps\n};\n\n",
      "type": "registry:ui",
      "target": "components/ui/operation-list-layout.tsx"
    }
  ]
}