{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "operation-list-layout",
  "type": "registry:ui",
  "dependencies": [
    "js-yaml",
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/operation-box",
    "https://pivotkit.vercel.app/r/try-it-out-panel"
  ],
  "files": [
    {
      "path": "registry/pivot/operation-list-layout.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useOpenApi } from \"@/registry/lib/hooks/use-openapi\";\nimport { useI18n } from \"@/registry/lib/i18n\";\nimport { OperationBox } from \"@/registry/pivot/operation-box\";\nimport { TryItOutPanel } from \"@/registry/pivot/try-it-out-panel\";\nimport * as yaml from \"js-yaml\";\nimport type { OpenAPIV3 } from 'openapi-types';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n\n// Import types from the centralized types file\n\n// Simple components for basic sections\nconst SectionTitle = React.forwardRef<HTMLDivElement, { title: string; className?: string }>(\n  ({ title, className }, ref) => (\n    <div ref={ref} className={cn(\"text-xl font-semibold text-neutral-900 dark:text-white\", className)}>\n      {title}\n    </div>\n  )\n);\nSectionTitle.displayName = \"SectionTitle\";\n\nconst InfoSection = React.forwardRef<HTMLDivElement, { info: any }>(\n  ({ info }, ref) => (\n    <div ref={ref} className=\"space-y-4\">\n      <h1 className=\"text-3xl font-bold text-neutral-900 dark:text-white\">{info.title}</h1>\n      <p className=\"text-lg text-neutral-600 dark:text-neutral-400\">Version: {info.version}</p>\n      {info.description && (\n        <p className=\"text-neutral-700 dark:text-neutral-300\">{info.description}</p>\n      )}\n    </div>\n  )\n);\nInfoSection.displayName = \"InfoSection\";\n\nconst ServersSection = React.forwardRef<HTMLDivElement, { servers: OpenAPIV3.ServerObject[] }>(\n  ({ servers }, ref) => (\n    <div ref={ref} className=\"space-y-2\">\n      {servers.map((server, index) => (\n        <div key={index} className=\"p-3 bg-white dark:bg-neutral-800 rounded-md\">\n          <code className=\"text-sm font-mono text-blue-600 dark:text-blue-400\">{server.url}</code>\n          {server.description && (\n            <p className=\"text-sm text-neutral-600 dark:text-neutral-400 mt-1\">{server.description}</p>\n          )}\n        </div>\n      ))}\n    </div>\n  )\n);\nServersSection.displayName = \"ServersSection\";\n\n// 统一的接口定义\ninterface OperationListLayoutProps {\n  spec: OpenAPIV3.Document | string | null;\n  selectedPath?: string | null;\n  selectedMethod?: string | null;\n  onSelectOperation?: (path: string, method: string, operation: OpenAPIV3.OperationObject) => void;\n  className?: string;\n}\n\ninterface OperationInfo {\n  path: string;\n  method: string;\n  operation: OpenAPIV3.OperationObject;\n}\n\nconst OperationListLayout = React.forwardRef<HTMLDivElement, OperationListLayoutProps>(\n  ({ spec: inputSpec, selectedPath, selectedMethod, onSelectOperation, className }, ref) => {\n    const { t } = useI18n();\n\n    const [parsedSpec, setParsedSpec] = useState<OpenAPIV3.Document | null>(null);\n    const [parseError, setParseError] = useState<string | null>(null);\n    const [activeTag, setActiveTag] = useState<string | null>(null);\n    const [selectedSchema, setSelectedSchema] = useState<string | null>(null);\n\n    const componentsRef = useRef<HTMLDivElement>(null);\n\n    // Parse string to OpenAPI object\n    useEffect(() => {\n      if (typeof inputSpec === 'string') {\n        try {\n          // Try to parse as JSON\n          try {\n            const jsonData = JSON.parse(inputSpec);\n            setParsedSpec(jsonData);\n            setParseError(null);\n            return;\n          } catch (jsonError) {\n            // JSON parsing failed, try parsing as YAML\n            try {\n              const yamlData = yaml.load(inputSpec);\n              if (typeof yamlData === 'object' && yamlData !== null) {\n                setParsedSpec(yamlData as OpenAPIV3.Document);\n                setParseError(null);\n                return;\n              } else {\n                throw new Error('Parsed YAML is not a valid object');\n              }\n            } catch (yamlError) {\n              setParseError(`Failed to parse OpenAPI spec: ${yamlError instanceof Error ? yamlError.message : 'Unknown error'}`);\n              setParsedSpec(null);\n            }\n          }\n        } catch (error) {\n          setParseError(`Failed to parse OpenAPI spec: ${error instanceof Error ? error.message : 'Unknown error'}`);\n          setParsedSpec(null);\n        }\n      } else {\n        // Input is already an object\n        setParsedSpec(inputSpec);\n        setParseError(null);\n      }\n    }, [inputSpec]);\n\n    // Use the OpenAPI hook (now supports null spec)\n    const openApiHook = useOpenApi(parsedSpec);\n\n    // Get operations by tag using the hook\n    const getOperationsByTagMemo = useMemo(() => {\n      if (!openApiHook || !parsedSpec) return {};\n      return openApiHook.getOperationsByTag();\n    }, [openApiHook, parsedSpec]);\n\n    // Operations filtered by tag\n    const taggedOperations = useMemo(() => {\n      if (activeTag && getOperationsByTagMemo[activeTag]) {\n        return { [activeTag as string]: getOperationsByTagMemo[activeTag] || [] };\n      }\n      return getOperationsByTagMemo;\n    }, [activeTag, getOperationsByTagMemo]);\n\n    // Update the selected operation\n    const handleSelectOperation = useCallback((path: string, method: string, operation: OpenAPIV3.OperationObject) => {\n      if (onSelectOperation) {\n        onSelectOperation(path, method, operation);\n      }\n\n      // Scroll to the selected operation\n      setTimeout(() => {\n        // Use the same operationId generation logic as in the render\n        const operationId = operation.operationId || `${method}-${path}`;\n        const element = document.getElementById(`operation-${operationId}`);\n        if (element) {\n          element.scrollIntoView({ behavior: 'smooth', block: 'start' });\n        }\n      }, 100);\n    }, [onSelectOperation]);\n\n    // Auto-select the first operation, to display content by default when page loads\n    useEffect(() => {\n      try {\n        if (parsedSpec && !selectedPath && !selectedMethod && openApiHook) {\n          const operationsByTag = openApiHook.getOperationsByTag();\n          const tags = Object.keys(operationsByTag);\n\n          if (tags.length > 0) {\n            const firstTag = tags[0];\n            if (firstTag) {\n              const operations = operationsByTag[firstTag];\n\n              if (operations && operations.length > 0) {\n                const firstOperation = operations[0];\n                if (firstOperation) {\n                  const { path, method, operation } = firstOperation;\n                  handleSelectOperation(path, method, operation);\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error auto-selecting operation:', error);\n      }\n    }, [parsedSpec, selectedPath, selectedMethod, handleSelectOperation, openApiHook]);\n\n    // Scroll to selected operation when selectedPath or selectedMethod changes\n    useEffect(() => {\n      if (selectedPath && selectedMethod && parsedSpec) {\n        setTimeout(() => {\n          // Find the operation to get its operationId\n          const pathItem = parsedSpec.paths[selectedPath];\n          if (pathItem) {\n            const operation = pathItem[selectedMethod.toLowerCase() as keyof OpenAPIV3.PathItemObject];\n            if (operation && typeof operation === 'object') {\n              // Use the same operationId generation logic as in the render\n              const operationId = (operation as OpenAPIV3.OperationObject).operationId || `${selectedMethod.toLowerCase()}-${selectedPath}`;\n              const element = document.getElementById(`operation-${operationId}`);\n              if (element) {\n                element.scrollIntoView({ behavior: 'smooth', block: 'start' });\n              }\n            }\n          }\n        }, 300); // Increased delay to ensure DOM is ready\n      }\n    }, [selectedPath, selectedMethod, parsedSpec]);\n\n    // If there's a parsing error, display the error message\n    if (parseError) {\n      return (\n        <div ref={ref} className=\"flex items-center justify-center h-screen bg-neutral-100 dark:bg-neutral-900\">\n          <div className=\"bg-white dark:bg-neutral-800 p-8 rounded-lg shadow-md text-center\">\n            <h2 className=\"text-2xl font-semibold text-red-600 dark:text-red-400 mb-4\">{t('Specification Parse Error')}</h2>\n            <p className=\"text-neutral-700 dark:text-neutral-300\">{parseError}</p>\n          </div>\n        </div>\n      );\n    }\n\n    // If the spec is not yet parsed, display loading state\n    if (!parsedSpec) {\n      return (\n        <div ref={ref} className=\"flex justify-center items-center min-h-[60vh] dark:text-neutral-200\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-2 border-neutral-500 dark:border-neutral-400\"></div>\n          <p className=\"ml-4 text-neutral-500 dark:text-neutral-400\">{t('Parsing specification...')}</p>\n        </div>\n      );\n    }\n\n    return (\n      <div ref={ref} className={cn(\"flex min-h-full bg-neutral-50 dark:bg-neutral-900\", className)}>\n        {/* Center Content Area */}\n        <main className=\"flex-1 flex gap-2 p-8 mx-auto dark:text-neutral-200\">\n          <div>\n            {/* 1. Info Section */}\n            <div className=\"mb-10\">\n              {parsedSpec?.info && <InfoSection info={parsedSpec.info} />}\n            </div>\n\n            {/* 2. Servers Section */}\n            {parsedSpec?.servers && parsedSpec.servers.length > 0 && (\n              <div className=\"mb-10\">\n                <SectionTitle title={t('Servers')} className=\"text-2xl mb-6 pb-2 border-b dark:border-b-neutral-700\" />\n                <ServersSection servers={parsedSpec.servers} />\n              </div>\n            )}\n\n            {/* 3. Operations Section (Filtered) */}\n            <div className=\"mb-10\">\n              <SectionTitle\n                title={activeTag ? t('Operations \"%s\"').replace('%s', activeTag) : t('All Operations')}\n                className=\"text-2xl mb-6 pb-2 border-b dark:border-b-neutral-700\"\n              />\n\n              {Object.keys(taggedOperations).length > 0 ? (\n                <div className=\"space-y-8\">\n                  {Object.entries(taggedOperations).map(([tag, operations]) => (\n                    <div key={tag} className=\"space-y-4\">\n                      {tag !== activeTag && (\n                        <h3 className=\"text-xl font-medium text-neutral-700 dark:text-neutral-300\">{tag}</h3>\n                      )}\n\n                      {operations.map(({ path, method, operation }: { path: string; method: string; operation: OpenAPIV3.OperationObject }) => {\n                        const operationId = operation.operationId || `${method}-${path}`;\n                        return (\n                          <div key={`${method}-${path}`} id={`operation-${operationId}`}>\n                            <OperationBox\n                              onSelectOperation={() => handleSelectOperation(path, method, operation)}\n                              path={path}\n                              method={method.toUpperCase()}\n                              operation={operation}\n                              components={parsedSpec?.components}\n                            />\n                          </div>\n                        );\n                      })}\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                activeTag && (\n                  <div className=\"text-neutral-500 dark:text-neutral-400 italic\">{t('No operations found with tag \"%s\"').replace('%s', activeTag)}</div>\n                )\n              )}\n            </div>\n          </div>\n\n          {/* Right Sidebar (Try It Out Panel) */}\n          {selectedPath && selectedMethod && parsedSpec?.paths[selectedPath] && (\n            <aside className=\"w-1/3 max-w-screen-md flex-shrink-0 p-4 relative\">\n              <div className=\"sticky top-4\">\n                {(() => {\n                  const pathItem = parsedSpec.paths[selectedPath];\n                  const operation = pathItem[selectedMethod.toLowerCase() as keyof OpenAPIV3.PathItemObject];\n                  if (operation && typeof operation === 'object' && 'summary' in operation) {\n                    return (\n                      <TryItOutPanel\n                        operation={operation as any}\n                        method={selectedMethod}\n                        path={selectedPath}\n                        baseUrl={parsedSpec?.servers?.[0]?.url || ''}\n                        components={parsedSpec?.components}\n                        collapsible={true}\n                        defaultCollapsed={false}\n                      />\n                    );\n                  }\n                  return null;\n                })()}\n              </div>\n            </aside>\n          )}\n        </main>\n      </div>\n    );\n  }\n);\n\nOperationListLayout.displayName = \"OperationListLayout\";\n\nexport {\n  OperationListLayout, type OperationInfo, type OperationListLayoutProps\n};\n\n",
      "type": "registry:ui"
    }
  ]
}