{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "laravel-generator",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "react"
  ],
  "files": [
    {
      "path": "registry/default/ui/laravel-generator.tsx",
      "content": "import type { CodeGenerator, CodeGeneratorParams } from \"@/types/project\";\nimport { Code2 } from \"lucide-react\";\nimport React from \"react\";\n\n// LaravelGenerator implementation\nexport class LaravelGeneratorClass implements CodeGenerator {\n  id = \"laravel\";\n  label = \"Laravel\";\n\n  getIcon() {\n    return <Code2 size={16} />;\n  }\n\n  generateCode(params: CodeGeneratorParams): string {\n    const { endpoint, method, requestBodyExample, requestBody } = params;\n\n    // 生成格式化后的PHP数组表示\n    const formattedRequestBody = JSON.stringify(requestBodyExample, null, 2)\n      .replace(/\"/g, \"'\")\n      .replace(/\\n/g, \"\\n        \");\n\n    const guzzleRequestBody = JSON.stringify(requestBodyExample, null, 2)\n      .replace(/\"/g, \"'\")\n      .replace(/\\n/g, \"\\n            \");\n\n    return `<?php\n// 使用 Laravel HTTP 客户端\nuse Illuminate\\\\Support\\\\Facades\\\\Http;\n\nfunction call_${method.toLowerCase()}()\n{\n    $response = Http::withHeaders([\n        'Content-Type' => 'application/json',\n        'Accept' => 'application/json',\n    ])${\n      [\"POST\", \"PUT\", \"PATCH\"].includes(method) && requestBody\n        ? `->${method.toLowerCase()}(\"${endpoint}\",\n        ${formattedRequestBody}\n    );`\n        : `.${method.toLowerCase()}(\"${endpoint}\");`\n    }\n\n    return $response->json();\n}\n\n// 或者使用 Laravel 的 Guzzle 封装\npublic function call_${method.toLowerCase()}_guzzle()\n{\n    $client = new \\\\GuzzleHttp\\\\Client();\n\n    $response = $client->request(\"${method}\", \"${endpoint}\", [\n        'headers' => [\n            'Content-Type' => 'application/json',\n            'Accept' => 'application/json',\n        ],${\n          [\"POST\", \"PUT\", \"PATCH\"].includes(method) && requestBody\n            ? `\n        'json' => ${guzzleRequestBody}`\n            : \"\"\n        }\n    ]);\n\n    return json_decode($response->getBody(), true);\n}`;\n  }\n}\n\n// React component wrapper\ninterface LaravelGeneratorProps {\n  params?: CodeGeneratorParams;\n  className?: string;\n}\n\nconst LaravelGeneratorComponent = React.forwardRef<\n  HTMLDivElement,\n  LaravelGeneratorProps\n>(({ params, className }, ref) => {\n  if (!params) {\n    return (\n      <div ref={ref} className={className}>\n        <div className=\"flex items-center gap-2 mb-2\">\n          <Code2 size={16} />\n          <span className=\"font-medium\">Laravel</span>\n        </div>\n        <div className=\"bg-neutral-100 dark:bg-neutral-800 p-4 rounded-md text-neutral-500 dark:text-neutral-400\">\n          No parameters provided for code generation\n        </div>\n      </div>\n    );\n  }\n\n  const generator = new LaravelGeneratorClass();\n  const code = generator.generateCode(params);\n\n  return (\n    <div ref={ref} className={className}>\n      <div className=\"flex items-center gap-2 mb-2\">\n        {generator.getIcon()}\n        <span className=\"font-medium\">{generator.label}</span>\n      </div>\n      <pre className=\"bg-neutral-100 dark:bg-neutral-800 p-4 rounded-md overflow-x-auto\">\n        <code className=\"text-sm language-php\">{code}</code>\n      </pre>\n    </div>\n  );\n});\n\nLaravelGeneratorComponent.displayName = \"LaravelGenerator\";\n\nexport {\n  LaravelGeneratorComponent as LaravelGenerator,\n  type LaravelGeneratorProps,\n};\n",
      "type": "registry:ui",
      "target": "components/ui/laravel-generator.tsx"
    }
  ]
}