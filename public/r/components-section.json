{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "components-section",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/component-items-list",
    "https://pivotkit.vercel.app/r/component-tabs",
    "https://pivotkit.vercel.app/r/section-title"
  ],
  "files": [
    {
      "path": "registry/pivot/components-section.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { ComponentItemsList } from \"@/registry/pivot/component-items-list\";\nimport { ComponentTabs, type OpenApiComponentType } from \"@/registry/pivot/component-tabs\";\nimport { SectionTitle } from \"@/registry/pivot/section-title\";\nimport type { ComponentType } from \"@/types/project\";\nimport type { OpenAPIV3 } from 'openapi-types';\nimport React, { useMemo, useState } from \"react\";\n\ninterface ComponentsSectionProps {\n  components: OpenAPIV3.ComponentsObject;\n  className?: string;\n}\n\n// Helper function to get available components\nconst getAvailableComponents = (\n  components: OpenAPIV3.ComponentsObject,\n): Record<ComponentType, string[]> => {\n  const availableComponents: Record<ComponentType, string[]> = {\n    schemas: [],\n    responses: [],\n    parameters: [],\n    examples: [],\n    requestBodies: [],\n    headers: [],\n    securitySchemes: [],\n    links: [],\n    callbacks: [],\n    webhooks: [], // Note: webhooks aren't part of OpenAPI 3.0 components but included for completeness\n  };\n\n  if (components) {\n    Object.keys(components).forEach((componentType) => {\n      if (componentType in availableComponents) {\n        const typedKey = componentType as ComponentType;\n        availableComponents[typedKey] = Object.keys(\n          (components as any)[componentType] || {},\n        );\n      }\n    });\n  }\n\n  return availableComponents;\n};\n\nconst ComponentsSection = React.forwardRef<\n  HTMLDivElement,\n  ComponentsSectionProps\n>(({ components, className }, ref) => {\n  const availableComponents = useMemo(\n    () => getAvailableComponents(components),\n    [components],\n  );\n  const availableTypes = useMemo(\n    () =>\n      Object.keys(availableComponents).filter(\n        (type) =>\n          availableComponents[type as ComponentType].length > 0 &&\n          type !== \"webhooks\" // Filter out webhooks as it's not part of standard OpenAPI 3.0 components\n      ) as OpenApiComponentType[],\n    [availableComponents],\n  );\n\n  const [activeType, setActiveType] = useState<OpenApiComponentType | null>(\n    availableTypes[0] || null,\n  );\n  const [selectedItemName, setSelectedItemName] = useState<string | null>(null);\n\n  // Reset selected item when type changes\n  React.useEffect(() => {\n    setSelectedItemName(null);\n  }, [activeType]);\n\n  if (availableTypes.length === 0) {\n    return null; // If no components are defined, don't render this section\n  }\n\n  // Simple component detail display\n  const ComponentDetail = ({\n    activeType,\n    selectedItemName,\n    components,\n  }: {\n    activeType: OpenApiComponentType | null;\n    selectedItemName: string | null;\n    components: OpenAPIV3.ComponentsObject;\n  }) => {\n    if (!activeType || !selectedItemName) {\n      return (\n        <div className=\"text-neutral-500 dark:text-neutral-400 text-sm\">\n          Select a component from the list to view details\n        </div>\n      );\n    }\n\n    const componentData = (components as any)[activeType]?.[selectedItemName];\n    if (!componentData) {\n      return (\n        <div className=\"text-red-500 dark:text-red-400 text-sm\">\n          Component not found: {activeType}/{selectedItemName}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-2\">\n        <h3 className=\"text-lg font-semibold text-neutral-800 dark:text-neutral-200\">\n          {selectedItemName}\n        </h3>\n        <div className=\"text-xs text-neutral-500 dark:text-neutral-400 font-mono\">\n          Type: {activeType}\n        </div>\n        <div className=\"text-sm text-neutral-600 dark:text-neutral-300 p-3 bg-neutral-50 dark:bg-neutral-700 rounded\">\n          Component definition would be displayed here\n          {/* Note: In real implementation, this would use SchemaDisplay or other specific component displays */}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div ref={ref} className={cn(\"py-8\", className)}>\n      <SectionTitle title=\"Components\" className=\"text-2xl mb-6\" />\n      <div className=\"flex flex-col md:flex-row md:space-x-6\">\n        {/* Navigation panel */}\n        <div className=\"md:w-1/2 flex-shrink-0 mb-6 md:mb-0\">\n          {/* Component type tabs */}\n          <ComponentTabs\n            availableTypes={availableTypes}\n            activeType={activeType}\n            onSelectType={setActiveType}\n          />\n\n          {/* List of items for the active type */}\n          <ComponentItemsList\n            items={activeType ? availableComponents[activeType as ComponentType] : undefined}\n            selectedItem={selectedItemName}\n            onSelectItem={setSelectedItemName}\n          />\n        </div>\n\n        {/* Detail panel */}\n        <div className=\"flex-grow md:w-1/2 border dark:border-neutral-700 rounded p-4 bg-white dark:bg-neutral-800 min-h-[200px]\">\n          <ComponentDetail\n            activeType={activeType}\n            selectedItemName={selectedItemName}\n            components={components}\n          />\n        </div>\n      </div>\n    </div>\n  );\n});\n\nComponentsSection.displayName = \"ComponentsSection\";\n\nexport {\n  ComponentsSection,\n  type ComponentsSectionProps\n};\n\n",
      "type": "registry:ui",
      "target": "components/pivot/components-section.tsx"
    }
  ]
}