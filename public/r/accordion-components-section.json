{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion-components-section",
  "type": "registry:ui",
  "dependencies": ["openapi-types", "lucide-react", "react"],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/component-detail.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/accordion-components-section.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { ComponentType } from \"@/types/project\";\nimport type { OpenAPIV3 } from 'openapi-types';\n\nimport { ChevronDown, ChevronRight } from \"lucide-react\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { ComponentDetail } from \"@/registry/default/ui/component-detail\";\n\ninterface AccordionComponentsSectionProps {\n  components: OpenAPIV3.ComponentsObject;\n  selectedSchema?: string | null;\n  className?: string;\n}\n\n// Helper function to get available components\nfunction getAvailableComponents(components: OpenAPIV3.ComponentsObject): Record<ComponentType, string[]> {\n  const result: Record<ComponentType, string[]> = {\n    schemas: [],\n    responses: [],\n    parameters: [],\n    examples: [],\n    requestBodies: [],\n    headers: [],\n    securitySchemes: [],\n    links: [],\n    callbacks: [],\n    webhooks: [],\n  };\n\n  if (!components) {\n    return result;\n  }\n\n  Object.entries(components).forEach(([type, items]) => {\n    if (items && typeof items === 'object' && type in result) {\n      result[type as ComponentType] = Object.keys(items);\n    }\n  });\n\n  return result;\n}\n\nconst AccordionComponentsSection = React.forwardRef<HTMLDivElement, AccordionComponentsSectionProps>(\n  ({ components, selectedSchema, className }, ref) => {\n    const availableComponents = useMemo(\n      () => getAvailableComponents(components),\n      [components],\n    );\n    const availableTypes = useMemo(\n      () => Object.keys(availableComponents).filter(\n        type => availableComponents[type as ComponentType].length > 0\n      ) as ComponentType[],\n      [availableComponents],\n    );\n\n    // Currently expanded component\n    const [expandedComponent, setExpandedComponent] = useState<{\n      type: ComponentType;\n      name: string;\n    } | null>(null);\n\n    // Currently active type tab\n    const [activeType, setActiveType] = useState<ComponentType | null>(\n      availableTypes.includes(\"schemas\" as ComponentType)\n        ? (\"schemas\" as ComponentType)\n        : availableTypes[0] || null,\n    );\n\n    // Toggle expanded component\n    const toggleExpandComponent = (type: ComponentType, name: string) => {\n      if (expandedComponent?.type === type && expandedComponent?.name === name) {\n        // If clicking on an already expanded component, collapse it\n        setExpandedComponent(null);\n      } else {\n        // Otherwise expand this component and collapse others\n        setExpandedComponent({ type, name });\n      }\n    };\n\n    // Listen for custom events to handle external schema selection requests\n    useEffect(() => {\n      const handleSelectSchema = (event: CustomEvent) => {\n        const { name, type } = event.detail;\n        if (type === \"schemas\") {\n          // Activate schemas tab\n          setActiveType(\"schemas\" as ComponentType);\n\n          // Expand the corresponding schema\n          toggleExpandComponent(\"schemas\" as ComponentType, name);\n\n          // Scroll to the schema\n          setTimeout(() => {\n            const element = document.getElementById(`schema-${name}`);\n            if (element) {\n              element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n            }\n          }, 100);\n        }\n      };\n\n      document.addEventListener(\n        \"openapi-select-schema\",\n        handleSelectSchema as EventListener,\n      );\n\n      return () => {\n        document.removeEventListener(\n          \"openapi-select-schema\",\n          handleSelectSchema as EventListener,\n        );\n      };\n    }, []);\n\n    // Handle selectedSchema prop changes\n    useEffect(() => {\n      if (selectedSchema) {\n        // Activate schemas tab\n        setActiveType(\"schemas\" as ComponentType);\n\n        // Expand the corresponding schema\n        toggleExpandComponent(\"schemas\" as ComponentType, selectedSchema);\n      }\n    }, [selectedSchema]);\n\n    if (availableTypes.length === 0) {\n      return null;\n    }\n\n    return (\n      <div ref={ref} className={cn(\"py-4\", className)}>\n        {/* Type tabs */}\n        <div className=\"flex border-b dark:border-neutral-700 mb-4 overflow-x-auto hide-scrollbar\">\n          {availableTypes.map((type) => (\n            <button\n              key={type}\n              className={cn(\n                \"px-4 py-2 capitalize whitespace-nowrap transition-colors\",\n                activeType === type\n                  ? \"border-b-2 border-blue-500 text-blue-600 dark:text-blue-400 font-medium\"\n                  : \"text-neutral-600 dark:text-neutral-400 hover:text-blue-500 dark:hover:text-blue-400\"\n              )}\n              onClick={() => setActiveType(type)}\n            >\n              {type}\n              <span className=\"ml-1 text-xs text-neutral-500 dark:text-neutral-500\">\n                ({availableComponents[type]?.length || 0})\n              </span>\n            </button>\n          ))}\n        </div>\n\n        {/* Display components for current type */}\n        {activeType && availableComponents[activeType] && (\n          <div className=\"space-y-2\">\n            {availableComponents[activeType].map((name) => (\n              <div\n                key={name}\n                id={`schema-${name}`}\n                className=\"rounded-md overflow-hidden bg-white dark:bg-neutral-800 border dark:border-neutral-700\"\n              >\n                {/* Component name header */}\n                <div\n                  className=\"flex items-center justify-between px-4 py-3 bg-neutral-50 dark:bg-neutral-800/60 cursor-pointer hover:bg-neutral-100 dark:hover:bg-neutral-700/60 transition-colors\"\n                  onClick={() => toggleExpandComponent(activeType, name)}\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-neutral-500 dark:text-neutral-400\">\n                      {expandedComponent?.type === activeType &&\n                        expandedComponent?.name === name ? (\n                        <ChevronDown className=\"h-5 w-5\" />\n                      ) : (\n                        <ChevronRight className=\"h-5 w-5\" />\n                      )}\n                    </span>\n                    <h3 className=\"font-mono text-sm dark:text-neutral-200 font-semibold\">\n                      {name}\n                    </h3>\n                  </div>\n                </div>\n\n                {/* Expanded component details */}\n                {expandedComponent?.type === activeType &&\n                  expandedComponent?.name === name && (\n                    <div className=\"p-4 border-t dark:border-neutral-700 bg-white dark:bg-neutral-900/50\">\n                      <ComponentDetail\n                        activeType={activeType}\n                        selectedItemName={name}\n                        components={components}\n                      />\n                    </div>\n                  )}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n\nAccordionComponentsSection.displayName = \"AccordionComponentsSection\";\n\nexport {\n  AccordionComponentsSection,\n  type AccordionComponentsSectionProps\n};\n\n",
      "type": "registry:ui",
      "target": "components/ui/accordion-components-section.tsx"
    }
  ]
}
