{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "parameters-section",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/hooks.json",
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/parameter-item.json",
    "https://pivotkit.vercel.app/r/section-title.json",
    "https://pivotkit.vercel.app/r/style-badge.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/parameters-section.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useOpenApi } from \"@/registry/default/hooks/use-openapi\";\nimport { useI18n } from \"@/registry/default/lib/i18n\";\nimport type { OpenAPIV3 } from \"openapi-types\";\n\nimport { ParameterItem } from \"@/registry/default/ui/parameter-item\";\nimport { SectionTitle } from \"@/registry/default/ui/section-title\";\nimport { type StyleType } from \"@/registry/default/ui/style-badge\";\nimport React, { useMemo } from \"react\";\n\ninterface ParametersSectionProps {\n  // Support multiple input formats\n  parameters:\n    | (OpenAPIV3.ParameterObject | OpenAPIV3.ReferenceObject)[]\n    | { name: string; in: string; [key: string]: any }[];\n\n  // Optional for standalone mode\n  components?: OpenAPIV3.ComponentsObject;\n  spec?: OpenAPIV3.Document;\n\n  className?: string;\n  expanded?: boolean;\n}\n\nconst ParametersSection = React.forwardRef<\n  HTMLDivElement,\n  ParametersSectionProps\n>(({ parameters, components, spec, className, expanded }, ref) => {\n  const { t } = useI18n();\n\n  // Use OpenAPI hook for intelligent data access\n  const openapi = useOpenApi(spec || null, components);\n\n  // Adapt parameters to standard format\n  const adaptedParameters = useMemo(() => {\n    if (!parameters || !Array.isArray(parameters)) return [];\n\n    return parameters.map(param => {\n      if (typeof param === 'object' && !('$ref' in param)) {\n        return param as OpenAPIV3.ParameterObject;\n      }\n      return param;\n    });\n  }, [parameters]);\n\n  // Note: We resolve parameters individually in the map below for better error handling\n\n  if (!parameters || parameters.length === 0) {\n    return null;\n  }\n\n  return (\n    <div ref={ref} className={cn(className, \"dark:text-neutral-200\")}>\n      <SectionTitle\n        title={t(\"Parameters\")}\n        className=\"text-lg font-medium mb-3\"\n      />\n      <div className=\"space-y-3\">\n        {adaptedParameters.map((paramOrRef, index) => {\n          // If we have components/spec, try to resolve references\n          if (openapi.hasComponents && paramOrRef && '$ref' in paramOrRef) {\n            const parameter = openapi.resolve<OpenAPIV3.ParameterObject>(\n              paramOrRef,\n              \"parameters\"\n            );\n\n            // Error handling for unresolved references\n            if (!parameter) {\n              const refString = (paramOrRef as OpenAPIV3.ReferenceObject).$ref;\n              return (\n                <div\n                  key={index}\n                  className={cn(\"border rounded p-3\", \"bg-yellow-50 dark:bg-yellow-900/20\", \"border-yellow-200 dark:border-yellow-800\")}\n                >\n                  <div className=\"text-sm text-yellow-700 dark:text-yellow-400\">\n                    {t(\"Could not resolve parameter:\")} {refString}\n                  </div>\n                  <div className=\"text-xs text-yellow-600 dark:text-yellow-500 mt-2\">\n                    ðŸ’¡ {t(\"Tip: Check if the referenced parameter exists in components\")}\n                  </div>\n                </div>\n              );\n            }\n\n            return (\n              <ParameterItem\n                key={`${parameter.name}-${parameter.in}-${index}`}\n                name={parameter.name}\n                in={parameter.in as \"path\" | \"header\" | \"query\" | \"cookie\"}\n                required={parameter.required ?? false}\n                description={parameter.description}\n                deprecated={parameter.deprecated}\n                schema={\n                  parameter.schema && \"type\" in parameter.schema\n                    ? parameter.schema\n                    : {}\n                }\n                style={parameter.style as StyleType}\n                explode={parameter.explode}\n                examples={parameter.examples}\n              />\n            );\n          }\n\n          // For direct parameters (no references), use them directly\n          if (paramOrRef && typeof paramOrRef === 'object' && !('$ref' in paramOrRef)) {\n            const parameter = paramOrRef as OpenAPIV3.ParameterObject;\n\n            // Validate required fields\n            if (!parameter.name || !parameter.in) {\n              return (\n                <div\n                  key={index}\n                  className=\"text-xs text-red-500 dark:text-red-400 p-1 border border-dashed dark:border-red-700 rounded\"\n                >\n                  {t(\"Invalid parameter at index\")} {index}: {t(\"Missing name or in property\")}\n                </div>\n              );\n            }\n\n            return (\n              <ParameterItem\n                key={`${parameter.name}-${parameter.in}-${index}`}\n                name={parameter.name}\n                in={parameter.in as \"path\" | \"header\" | \"query\" | \"cookie\"}\n                required={parameter.required ?? false}\n                description={parameter.description}\n                deprecated={parameter.deprecated}\n                schema={\n                  parameter.schema && \"type\" in parameter.schema\n                    ? parameter.schema\n                    : {}\n                }\n                style={parameter.style as StyleType}\n                explode={parameter.explode}\n                examples={parameter.examples}\n              />\n            );\n          }\n\n          // Fallback for unexpected parameter format\n          return (\n            <div\n              key={index}\n              className=\"text-xs text-red-500 dark:text-red-400 p-1 border border-dashed dark:border-red-700 rounded\"\n            >\n              {t(\"Invalid parameter at index\")} {index}: {t(\"Unexpected format\")}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n});\n\nParametersSection.displayName = \"ParametersSection\";\n\nexport { ParametersSection, type ParametersSectionProps };\n",
      "type": "registry:ui",
      "target": "components/pivot/parameters-section.tsx"
    }
  ]
}