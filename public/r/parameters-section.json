{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "parameters-section",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/style-badge",
    "https://pivotkit.vercel.app/r/parameter-item",
    "https://pivotkit.vercel.app/r/section-title"
  ],
  "files": [
    {
      "path": "registry/pivot/parameters-section.tsx",
      "content": "\"use client\";\n\nimport { useI18n } from \"@/lib/i18n\";\nimport { cn } from \"@/lib/utils\";\nimport type { OpenAPIV3 } from 'openapi-types';\n\nimport React from \"react\";\nimport { resolveRef } from \"@/registry/lib/utils/resolve-ref\";\nimport { type StyleType } from \"@/registry/pivot/style-badge\";\nimport { ParameterItem } from \"@/registry/pivot/parameter-item\";\nimport { SectionTitle } from \"@/registry/pivot/section-title\";\n\n// Import types from the centralized types file\n\ninterface ParametersSectionProps {\n  parameters: (OpenAPIV3.ParameterObject | OpenAPIV3.ReferenceObject)[];\n  components?: OpenAPIV3.ComponentsObject;\n  className?: string;\n  expanded?: boolean;\n}\n\nconst ParametersSection = React.forwardRef<\n  HTMLDivElement,\n  ParametersSectionProps\n>(({ parameters, components, className, expanded }, ref) => {\n  const { t } = useI18n();\n\n  if (!parameters || parameters.length === 0) {\n    return null;\n  }\n\n  return (\n    <div ref={ref} className={cn(className, \"dark:text-neutral-200\")}>\n      <SectionTitle title={t('Parameters')} className=\"text-lg font-medium mb-3\" />\n      <div className=\"space-y-3\">\n        {parameters.map((paramOrRef, index) => {\n          // Resolve parameter ref\n          const parameter = resolveRef<OpenAPIV3.ParameterObject>(paramOrRef, components, 'parameters');\n\n          if (!parameter) {\n            const refString = (paramOrRef && typeof paramOrRef === 'object' && '$ref' in paramOrRef)\n              ? (paramOrRef as OpenAPIV3.ReferenceObject).$ref\n              : `[invalid parameter at index ${index}]`;\n            return (\n              <div key={index} className=\"text-xs text-red-500 dark:text-red-400 p-1 border border-dashed dark:border-red-700 rounded\">\n                {t('Failed to resolve parameter:')} {refString}\n              </div>\n            );\n          }\n\n          return (\n            <ParameterItem\n              key={`${parameter.name}-${parameter.in}-${index}`}\n              name={parameter.name}\n              in={parameter.in}\n              required={parameter.required ?? false}\n              description={parameter.description}\n              deprecated={parameter.deprecated}\n              schema={parameter.schema && 'type' in parameter.schema ? parameter.schema : {}}\n              style={parameter.style as StyleType}\n              explode={parameter.explode}\n              examples={parameter.examples}\n              components={components}\n              expanded={expanded}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n});\n\nParametersSection.displayName = \"ParametersSection\";\n\nexport { ParametersSection, type ParametersSectionProps };\n\n",
      "type": "registry:component",
      "target": "components/pivot/parameters-section.tsx"
    }
  ]
}