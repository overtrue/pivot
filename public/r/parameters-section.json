{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "parameters-section",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/parameter-item.json",
    "https://pivotkit.vercel.app/r/section-title.json",
    "https://pivotkit.vercel.app/r/style-badge.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/parameters-section.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useI18n } from \"@/registry/default/lib/i18n\";\nimport type { OpenAPIV3 } from \"openapi-types\";\n\nimport { resolveRef } from \"@/registry/default/lib/resolve-ref\";\nimport { ParameterItem } from \"@/registry/default/ui/parameter-item\";\nimport { SectionTitle } from \"@/registry/default/ui/section-title\";\nimport { type StyleType } from \"@/registry/default/ui/style-badge\";\nimport React from \"react\";\n\n// Import types from the centralized types file\n\ninterface ParametersSectionProps {\n  parameters: (OpenAPIV3.ParameterObject | OpenAPIV3.ReferenceObject)[];\n  components?: OpenAPIV3.ComponentsObject;\n  className?: string;\n  expanded?: boolean;\n}\n\nconst ParametersSection = React.forwardRef<\n  HTMLDivElement,\n  ParametersSectionProps\n>(({ parameters, components, className, expanded }, ref) => {\n  const { t } = useI18n();\n\n  if (!parameters || parameters.length === 0) {\n    return null;\n  }\n\n  return (\n    <div ref={ref} className={cn(className, \"dark:text-neutral-200\")}>\n      <SectionTitle\n        title={t(\"Parameters\")}\n        className=\"text-lg font-medium mb-3\"\n      />\n      <div className=\"space-y-3\">\n        {parameters.map((paramOrRef, index) => {\n          // Resolve parameter ref\n          const parameter = resolveRef<OpenAPIV3.ParameterObject>(\n            paramOrRef,\n            components,\n            \"parameters\",\n          );\n\n          if (!parameter) {\n            const refString =\n              paramOrRef &&\n              typeof paramOrRef === \"object\" &&\n              \"$ref\" in paramOrRef\n                ? (paramOrRef as OpenAPIV3.ReferenceObject).$ref\n                : `[invalid parameter at index ${index}]`;\n            return (\n              <div\n                key={index}\n                className=\"text-xs text-red-500 dark:text-red-400 p-1 border border-dashed dark:border-red-700 rounded\"\n              >\n                {t(\"Failed to resolve parameter:\")} {refString}\n              </div>\n            );\n          }\n\n          return (\n            <ParameterItem\n              key={`${parameter.name}-${parameter.in}-${index}`}\n              name={parameter.name}\n              in={parameter.in as \"path\" | \"header\" | \"query\" | \"cookie\"}\n              required={parameter.required ?? false}\n              description={parameter.description}\n              deprecated={parameter.deprecated}\n              schema={\n                parameter.schema && \"type\" in parameter.schema\n                  ? parameter.schema\n                  : {}\n              }\n              style={parameter.style as StyleType}\n              explode={parameter.explode}\n              examples={parameter.examples}\n              components={components}\n              expanded={expanded}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n});\n\nParametersSection.displayName = \"ParametersSection\";\n\nexport { ParametersSection, type ParametersSectionProps };\n",
      "type": "registry:ui",
      "target": "components/ui/parameters-section.tsx"
    }
  ]
}