{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "security-scheme-display-demo",
  "type": "registry:example",
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/security-scheme-display.json"
  ],
  "files": [
    {
      "path": "registry/example/security-scheme-display-demo.tsx",
      "content": "import { SecuritySchemeDisplay } from \"@/registry/pivot/security-scheme-display\";\n\nexport default function SecuritySchemeDisplayDemo() {\n  // API 密钥认证（Header）\n  const apiKeyHeaderScheme = {\n    type: \"apiKey\" as const,\n    name: \"X-API-Key\",\n    in: \"header\" as const,\n    description: \"API 密钥认证，将密钥放在请求头中。请在开发者控制台获取您的 API 密钥。\"\n  };\n\n  // API 密钥认证（Query）\n  const apiKeyQueryScheme = {\n    type: \"apiKey\" as const,\n    name: \"api_key\",\n    in: \"query\" as const,\n    description: \"API 密钥认证，将密钥作为查询参数传递。适用于无法设置请求头的场景。\"\n  };\n\n  // Bearer Token 认证\n  const bearerTokenScheme = {\n    type: \"http\" as const,\n    scheme: \"bearer\",\n    bearerFormat: \"JWT\",\n    description: \"JWT Bearer Token 认证。在 Authorization 头中使用 'Bearer <token>' 格式。\"\n  };\n\n  // HTTP 基本认证\n  const basicAuthScheme = {\n    type: \"http\" as const,\n    scheme: \"basic\",\n    description: \"HTTP 基本认证，使用用户名和密码进行身份验证。凭据会被 Base64 编码。\"\n  };\n\n  // OAuth 2.0 认证\n  const oauth2Scheme = {\n    type: \"oauth2\" as const,\n    description: \"OAuth 2.0 授权框架，支持多种授权流程。适用于第三方应用集成。\",\n    flows: {\n      authorizationCode: {\n        authorizationUrl: \"https://auth.example.com/oauth/authorize\",\n        tokenUrl: \"https://auth.example.com/oauth/token\",\n        refreshUrl: \"https://auth.example.com/oauth/refresh\",\n        scopes: {\n          \"read\": \"读取用户数据\",\n          \"write\": \"修改用户数据\",\n          \"admin\": \"管理员权限\"\n        }\n      },\n      clientCredentials: {\n        tokenUrl: \"https://auth.example.com/oauth/token\",\n        scopes: {\n          \"api:read\": \"读取 API 数据\",\n          \"api:write\": \"写入 API 数据\"\n        }\n      }\n    }\n  };\n\n  // OpenID Connect 认证\n  const openIdConnectScheme = {\n    type: \"openIdConnect\" as const,\n    openIdConnectUrl: \"https://auth.example.com/.well-known/openid_configuration\",\n    description: \"OpenID Connect 身份认证，基于 OAuth 2.0 构建的身份层。支持单点登录（SSO）。\"\n  };\n\n  // Cookie 会话认证\n  const cookieAuthScheme = {\n    type: \"apiKey\" as const,\n    name: \"sessionId\",\n    in: \"cookie\" as const,\n    description: \"基于 Cookie 的会话认证。适用于 Web 应用程序的用户会话管理。\"\n  };\n\n  // 自定义认证头\n  const customHeaderScheme = {\n    type: \"apiKey\" as const,\n    name: \"X-Custom-Auth\",\n    in: \"header\" as const,\n    description: \"自定义认证头，用于特殊的认证需求。请联系技术支持获取认证令牌。\"\n  };\n\n  // 多重认证方案\n  const multiFactorScheme = {\n    type: \"http\" as const,\n    scheme: \"bearer\",\n    bearerFormat: \"JWT\",\n    description: \"多重认证方案，需要同时提供 JWT Token 和 API 密钥。用于高安全级别的操作。\"\n  };\n\n  // 企业级认证\n  const enterpriseScheme = {\n    type: \"oauth2\" as const,\n    description: \"企业级 OAuth 2.0 认证，支持 SAML、LDAP 集成和单点登录。\",\n    flows: {\n      authorizationCode: {\n        authorizationUrl: \"https://enterprise.example.com/oauth/authorize\",\n        tokenUrl: \"https://enterprise.example.com/oauth/token\",\n        scopes: {\n          \"enterprise:read\": \"读取企业数据\",\n          \"enterprise:write\": \"修改企业数据\",\n          \"audit:access\": \"访问审计日志\",\n          \"admin:full\": \"完整管理员权限\"\n        }\n      }\n    }\n  };\n\n  // 移动应用认证\n  const mobileAppScheme = {\n    type: \"oauth2\" as const,\n    description: \"移动应用专用的 OAuth 2.0 认证，支持 PKCE 扩展以增强安全性。\",\n    flows: {\n      authorizationCode: {\n        authorizationUrl: \"https://mobile.example.com/oauth/authorize\",\n        tokenUrl: \"https://mobile.example.com/oauth/token\",\n        scopes: {\n          \"mobile:sync\": \"数据同步\",\n          \"push:send\": \"发送推送通知\",\n          \"location:access\": \"访问位置信息\"\n        }\n      }\n    }\n  };\n\n  // 第三方集成认证\n  const webhookAuthScheme = {\n    type: \"apiKey\" as const,\n    name: \"X-Webhook-Signature\",\n    in: \"header\" as const,\n    description: \"Webhook 签名验证，用于验证第三方系统发送的回调请求的真实性。\"\n  };\n\n  return (\n    <div className=\"space-y-8 min-w-md\">\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">API 密钥认证（Header）</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          最常用的 API 认证方式，将密钥放在请求头中传递\n        </p>\n        <SecuritySchemeDisplay name=\"ApiKeyHeader\" scheme={apiKeyHeaderScheme} />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">API 密钥认证（Query）</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          将 API 密钥作为查询参数传递，适用于无法设置请求头的场景\n        </p>\n        <SecuritySchemeDisplay name=\"ApiKeyQuery\" scheme={apiKeyQueryScheme} />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">Bearer Token 认证</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          JWT Bearer Token 认证，现代 API 的标准认证方式\n        </p>\n        <SecuritySchemeDisplay name=\"BearerToken\" scheme={bearerTokenScheme} />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">HTTP 基本认证</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          传统的 HTTP 基本认证，使用用户名和密码进行身份验证\n        </p>\n        <SecuritySchemeDisplay name=\"BasicAuth\" scheme={basicAuthScheme} />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">OAuth 2.0 认证</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          标准的 OAuth 2.0 授权框架，支持多种授权流程\n        </p>\n        <SecuritySchemeDisplay name=\"OAuth2\" scheme={oauth2Scheme} />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">OpenID Connect 认证</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          基于 OAuth 2.0 的身份认证层，支持单点登录功能\n        </p>\n        <SecuritySchemeDisplay name=\"OpenIdConnect\" scheme={openIdConnectScheme} />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">Cookie 会话认证</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          基于 Cookie 的会话认证，适用于 Web 应用程序\n        </p>\n        <SecuritySchemeDisplay name=\"CookieAuth\" scheme={cookieAuthScheme} />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">自定义认证头</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          自定义的认证头方案，用于特殊的认证需求\n        </p>\n        <SecuritySchemeDisplay name=\"CustomHeader\" scheme={customHeaderScheme} />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">多重认证方案</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          高安全级别的多重认证，结合多种认证方式\n        </p>\n        <SecuritySchemeDisplay name=\"MultiFactor\" scheme={multiFactorScheme} />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">企业级认证</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          企业级 OAuth 认证，支持 SAML、LDAP 集成\n        </p>\n        <SecuritySchemeDisplay name=\"Enterprise\" scheme={enterpriseScheme} />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">移动应用认证</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          移动应用专用认证，支持 PKCE 扩展增强安全性\n        </p>\n        <SecuritySchemeDisplay name=\"MobileApp\" scheme={mobileAppScheme} />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">Webhook 签名认证</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          用于验证第三方系统 Webhook 回调请求的真实性\n        </p>\n        <SecuritySchemeDisplay name=\"WebhookAuth\" scheme={webhookAuthScheme} />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": "components/example/security-scheme-display-demo.tsx"
    }
  ]
}