{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "webhook-display",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/description-display",
    "https://pivotkit.vercel.app/r/webhook-label",
    "https://pivotkit.vercel.app/r/operation-box"
  ],
  "files": [
    {
      "path": "registry/pivot/webhook-display.tsx",
      "content": "import type { OpenAPIV3 } from 'openapi-types';\nimport { cn } from \"@/lib/utils\";\nimport React from \"react\";\nimport { DescriptionDisplay } from \"@/registry/pivot/description-display\";\nimport { WebhookLabel } from \"@/registry/pivot/webhook-label\";\nimport { OperationBox } from \"@/registry/pivot/operation-box\";\n\n// Import types from the centralized types file\n\ninterface WebhookDisplayProps {\n  name: string;\n  pathItem: OpenAPIV3.PathItemObject;\n  components?: OpenAPIV3.ComponentsObject;\n  className?: string;\n}\n\nconst WebhookDisplay = React.forwardRef<HTMLDivElement, WebhookDisplayProps>(\n  ({ name, pathItem, components, className }, ref) => {\n    if (!pathItem) {\n      return (\n        <div\n          ref={ref}\n          className={cn(\n            \"rounded-lg p-4 bg-neutral-50 dark:bg-neutral-800 border dark:border-neutral-700\",\n            className,\n          )}\n        >\n          <div className=\"text-neutral-500 dark:text-neutral-400 text-sm italic\">\n            No webhook data available\n          </div>\n        </div>\n      );\n    }\n\n    const operations = [\n      { method: \"get\", operation: pathItem.get },\n      { method: \"post\", operation: pathItem.post },\n      { method: \"put\", operation: pathItem.put },\n      { method: \"delete\", operation: pathItem.delete },\n      { method: \"options\", operation: pathItem.options },\n      { method: \"head\", operation: pathItem.head },\n      { method: \"patch\", operation: pathItem.patch },\n      { method: \"trace\", operation: pathItem.trace },\n    ].filter(({ operation }) => operation !== undefined);\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"rounded-lg p-4 bg-neutral-50 dark:bg-neutral-800 border dark:border-neutral-700\",\n          className,\n        )}\n      >\n        <div className=\"flex items-center gap-2 mb-3\">\n          <h2 className=\"text-lg font-semibold text-neutral-900 dark:text-neutral-100\">\n            Webhook:\n          </h2>\n          <WebhookLabel />\n          <span className=\"text-blue-600 dark:text-blue-400 font-mono\">\n            {name}\n          </span>\n        </div>\n\n        {pathItem.description && (\n          <div className=\"mb-4\">\n            <DescriptionDisplay description={pathItem.description} />\n          </div>\n        )}\n\n        <div className=\"space-y-4\">\n          {operations.map(({ method, operation }) => (\n            <OperationBox\n              key={method}\n              path={`webhook:${name}`}\n              method={method.toUpperCase()}\n              operation={operation!}\n              components={components}\n            />\n          ))}\n        </div>\n\n        {operations.length === 0 && (\n          <div className=\"text-neutral-500 dark:text-neutral-400 text-sm italic\">\n            No operations defined for this webhook\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n\nWebhookDisplay.displayName = \"WebhookDisplay\";\n\nexport {\n  WebhookDisplay,\n  type WebhookDisplayProps\n};\n\n",
      "type": "registry:component",
      "target": "components/pivot/webhook-display.tsx"
    }
  ]
}