{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "response-item",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/description-display",
    "https://pivotkit.vercel.app/r/headers-section",
    "https://pivotkit.vercel.app/r/links-section",
    "https://pivotkit.vercel.app/r/status-code"
  ],
  "files": [
    {
      "path": "registry/pivot/response-item.tsx",
      "content": "\"use client\";\n\nimport { cn } from '@/lib/utils';\nimport { useI18n } from \"@/registry/lib/i18n\";\nimport type { OpenAPIV3 } from 'openapi-types';\n\nimport { resolveRef } from '@/registry/lib/utils/resolve-ref';\nimport { DescriptionDisplay } from '@/registry/pivot/description-display';\nimport { HeadersSection } from '@/registry/pivot/headers-section';\nimport { LinksSection } from '@/registry/pivot/links-section';\nimport { StatusCode } from '@/registry/pivot/status-code';\nimport React from 'react';\n\n// 修改接口，接受原始响应对象或引用\ninterface ResponseItemProps {\n  code: string; // 状态码\n  response: OpenAPIV3.ResponseObject | OpenAPIV3.ReferenceObject; // 可能是引用或已解析的响应对象\n  components?: OpenAPIV3.ComponentsObject; // 用于解析引用\n  className?: string;\n}\n\nconst ResponseItem = React.forwardRef<HTMLDivElement, ResponseItemProps>(\n  ({ code, response, components, className }, ref) => {\n    const { t } = useI18n();\n\n    // 解析响应对象（如果是引用）\n    const resolvedResponse = resolveRef(response, components, 'responses');\n\n    // 如果无法解析引用，显示错误信息\n    if (!resolvedResponse) {\n      const refString = (response && typeof response === 'object' && '$ref' in response)\n        ? response.$ref\n        : t('[unknown reference]');\n      return (\n        <div\n          ref={ref}\n          className={cn(\n            \"text-xs text-red-500 dark:text-red-400 p-2 border dark:border-red-800 rounded bg-red-50 dark:bg-red-900/20\",\n            className,\n          )}\n        >\n          {t('Cannot display response %s: Reference %s failed to resolve.').replace('%s', code).replace('%s', refString)}\n        </div>\n      );\n    }\n\n    // 从解析后的对象中提取属性\n    const { description, headers, content, links } = resolvedResponse;\n\n    const hasHeaders = headers && Object.keys(headers).length > 0;\n    const hasContent = content && Object.keys(content).length > 0;\n    const hasLinks = links && Object.keys(links).length > 0;\n    const hasDetails = hasHeaders || hasContent || hasLinks;\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"border rounded mb-4 overflow-hidden dark:border-neutral-700\",\n          className,\n        )}\n      >\n        {/* Header part */}\n        <div className=\"p-3 bg-neutral-50 dark:bg-neutral-800 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <StatusCode code={code} />\n            {description && (\n              <DescriptionDisplay\n                description={description}\n                className=\"text-sm mb-0\"\n              />\n            )}\n          </div>\n        </div>\n\n        {/* Collapsible Details part - Now always shown if hasDetails */}\n        {hasDetails && (\n          <div className=\"p-4 border-t dark:border-neutral-700\">\n            {hasHeaders && (\n              <HeadersSection\n                headers={headers}\n                components={components}\n              />\n            )}\n            {hasContent && (\n              <div className=\"mb-4\">\n                <h4 className=\"text-sm font-semibold mb-2 text-neutral-800 dark:text-neutral-200\">\n                  {t('Content')}\n                </h4>\n                <div className=\"space-y-3\">\n                  {Object.entries(content).map(([mediaType, mediaTypeObj]) => (\n                    <div\n                      key={mediaType}\n                      className=\"p-3 bg-muted/50 rounded-md border\"\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"font-mono text-sm font-medium text-blue-600 dark:text-blue-400\">\n                          {mediaType}\n                        </span>\n                      </div>\n\n                      {mediaTypeObj.schema && (\n                        <div className=\"mb-3\">\n                          <h5 className=\"text-xs font-medium text-muted-foreground mb-2\">Schema</h5>\n                          <div className=\"text-xs text-muted-foreground italic\">\n                            Schema available (requires schema display component)\n                          </div>\n                        </div>\n                      )}\n\n                      {mediaTypeObj.example && (\n                        <div className=\"mb-2\">\n                          <h5 className=\"text-xs font-medium text-muted-foreground mb-2\">Example</h5>\n                          <pre className=\"text-xs bg-background p-2 rounded border overflow-x-auto\">\n                            <code>{JSON.stringify(mediaTypeObj.example, null, 2)}</code>\n                          </pre>\n                        </div>\n                      )}\n\n                      {mediaTypeObj.examples && Object.keys(mediaTypeObj.examples).length > 0 && (\n                        <div>\n                          <h5 className=\"text-xs font-medium text-muted-foreground mb-2\">Examples</h5>\n                          <div className=\"space-y-2\">\n                            {Object.entries(mediaTypeObj.examples).map(([exampleName, exampleObj]) => (\n                              <div key={exampleName}>\n                                <h6 className=\"text-xs font-medium mb-1\">{exampleName}</h6>\n                                <pre className=\"text-xs bg-background p-2 rounded border overflow-x-auto\">\n                                  <code>{JSON.stringify(exampleObj, null, 2)}</code>\n                                </pre>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n            {hasLinks && (\n              <LinksSection\n                links={links}\n                components={components}\n              />\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nResponseItem.displayName = \"ResponseItem\";\n\nexport {\n  ResponseItem,\n  type ResponseItemProps\n};\n\n",
      "type": "registry:ui",
      "target": "registry/pivot/response-item.tsx"
    }
  ]
}