{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "callback-display",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/operation-box"
  ],
  "files": [
    {
      "path": "registry/pivot/callback-display.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport { resolveRef } from \"@/registry/lib/utils/resolve-ref\";\nimport { OperationBox } from \"@/registry/pivot/operation-box\";\nimport type { OpenAPIV3 } from 'openapi-types';\nimport React from \"react\";\n\n// Import types from the centralized types file\n\ninterface CallbackDisplayProps {\n  name: string;\n  callback: OpenAPIV3.CallbackObject | OpenAPIV3.ReferenceObject;\n  components?: OpenAPIV3.ComponentsObject;\n  className?: string;\n}\n\nconst CallbackDisplay = React.forwardRef<HTMLDivElement, CallbackDisplayProps>(\n  ({ name, callback: callbackOrRef, components, className }, ref) => {\n    // Resolve callback ref if necessary\n    const callback = resolveRef<OpenAPIV3.CallbackObject>(\n      callbackOrRef,\n      components,\n      \"callbacks\",\n    );\n\n    if (!callback) {\n      const refString =\n        callbackOrRef &&\n          typeof callbackOrRef === \"object\" &&\n          \"$ref\" in callbackOrRef\n          ? (callbackOrRef as OpenAPIV3.ReferenceObject).$ref\n          : \"[invalid callback object]\";\n      return (\n        <div\n          ref={ref}\n          className={cn(\n            \"text-xs text-red-500 dark:text-red-400 p-1 border border-dashed rounded dark:border-red-800\",\n            className,\n          )}\n        >\n          Failed to resolve callback: {refString}\n        </div>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"p-4 border rounded bg-neutral-50 dark:bg-neutral-800 dark:border-neutral-700\",\n          className,\n        )}\n      >\n        <h3 className=\"text-lg font-semibold mb-3 font-mono text-neutral-800 dark:text-neutral-200\">\n          Callback: {name}\n        </h3>\n        {/* Callbacks are a map of expressions to PathItemObjects */}\n        {Object.entries(callback).map(([expression, pathItemOrRef]) => (\n          <div key={expression} className=\"mb-6\">\n            <h4 className=\"text-md font-semibold mb-2 font-mono bg-neutral-200 dark:bg-neutral-700 px-2 py-1 rounded inline-block text-neutral-800 dark:text-neutral-200\">\n              Expression: {expression}\n            </h4>\n            {/* Resolve PathItem ref */}\n            {(() => {\n              const pathItem = resolveRef<OpenAPIV3.PathItemObject>(\n                pathItemOrRef,\n                components,\n                \"pathItems\",\n              );\n              if (!pathItem) {\n                const refString =\n                  pathItemOrRef &&\n                    typeof pathItemOrRef === \"object\" &&\n                    \"$ref\" in pathItemOrRef\n                    ? (pathItemOrRef as OpenAPIV3.ReferenceObject).$ref\n                    : \"[invalid pathItem object]\";\n                return (\n                  <div className=\"text-xs text-red-500 dark:text-red-400\">\n                    Failed to resolve path item: {refString}\n                  </div>\n                );\n              }\n\n              return (\n                <div className=\"space-y-4 pl-4 border-l-2 border-neutral-200 dark:border-neutral-600 mt-2\">\n                  {/* Render methods within the PathItem using OperationBox */}\n                  {Object.entries(pathItem).map(([method, operationOrRef]) => {\n                    if (\n                      [\n                        \"get\",\n                        \"put\",\n                        \"post\",\n                        \"delete\",\n                        \"options\",\n                        \"head\",\n                        \"patch\",\n                        \"trace\",\n                      ].includes(method.toLowerCase()) &&\n                      operationOrRef &&\n                      typeof operationOrRef === \"object\"\n                    ) {\n                      // Resolve operation reference if necessary\n                      const operation = resolveRef<OpenAPIV3.OperationObject>(\n                        operationOrRef as OpenAPIV3.OperationObject | OpenAPIV3.ReferenceObject,\n                        components,\n                        \"operations\",\n                      );\n\n                      if (!operation) {\n                        return null;\n                      }\n\n                      return (\n                        <OperationBox\n                          key={`${method}-${expression}`}\n                          path={expression} // Use expression as path context\n                          method={method.toUpperCase()}\n                          operation={operation} // Pass resolved operation\n                          components={components}\n                          className=\"shadow-none border-neutral-300 dark:border-neutral-600\"\n                        />\n                      );\n                    }\n                    return null;\n                  })}\n                </div>\n              );\n            })()}\n          </div>\n        ))}\n      </div>\n    );\n  },\n);\n\nCallbackDisplay.displayName = \"CallbackDisplay\";\n\nexport {\n  CallbackDisplay,\n  type CallbackDisplayProps\n};\n\n",
      "type": "registry:component",
      "target": "components/pivot/callback-display.tsx"
    }
  ]
}