{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "request-body-section",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/hooks.json",
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/schema-with-example-viewer.json",
    "https://pivotkit.vercel.app/r/section-title.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/request-body-section.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useOpenApi } from \"@/registry/default/hooks/use-openapi\";\nimport { useI18n } from \"@/registry/default/lib/i18n\";\nimport type { OpenAPIV3 } from \"openapi-types\";\n\nimport { SchemaWithExampleViewer } from \"@/registry/default/ui/schema-with-example-viewer\";\nimport { SectionTitle } from \"@/registry/default/ui/section-title\";\nimport React, { useMemo } from \"react\";\n\ninterface RequestBodySectionProps {\n  // Support multiple input formats\n  requestBody:\n    | OpenAPIV3.RequestBodyObject\n    | OpenAPIV3.ReferenceObject\n    | Partial<OpenAPIV3.RequestBodyObject>;\n\n  // Optional for standalone mode\n  components?: OpenAPIV3.ComponentsObject;\n  spec?: OpenAPIV3.Document;\n\n  className?: string;\n  titleClassName?: string;\n}\n\nconst RequestBodySection = React.forwardRef<\n  HTMLDivElement,\n  RequestBodySectionProps\n>(({ requestBody, components, spec, className = \"\", titleClassName }, ref) => {\n  const { t } = useI18n();\n\n  // Use OpenAPI hook for intelligent data access\n  const openapi = useOpenApi(spec || null, components);\n\n  // Adapt request body to standard format\n  const adaptedRequestBody = useMemo(() => {\n    if (typeof requestBody === 'object' && !('$ref' in requestBody)) {\n      return requestBody as OpenAPIV3.RequestBodyObject;\n    }\n    return requestBody;\n  }, [requestBody]);\n\n  // Resolve request body using context or fallback\n  const resolvedBody = openapi.resolve<OpenAPIV3.RequestBodyObject>(\n    adaptedRequestBody,\n    \"requestBodies\"\n  );\n\n  // Error handling for unresolved references\n  if (!resolvedBody && adaptedRequestBody && '$ref' in adaptedRequestBody) {\n    const refString = (adaptedRequestBody as OpenAPIV3.ReferenceObject).$ref;\n    return (\n      <div ref={ref} className={cn(\"border rounded p-4\", \"bg-yellow-50 dark:bg-yellow-900/20\", \"border-yellow-200 dark:border-yellow-800\", className)}>\n        <SectionTitle\n          title={t(\"Request Body\")}\n          className={cn(\"text-lg font-medium mb-3\", titleClassName)}\n        />\n        <div className=\"text-yellow-700 dark:text-yellow-400\">\n          {t(\"Could not resolve request body reference:\")} {refString}\n        </div>\n        {!openapi.hasComponents && (\n          <div className=\"text-xs text-yellow-600 dark:text-yellow-500 mt-2\">\n            üí° {t(\"Tip: Provide components or wrap with OpenAPIProvider\")}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  const effectiveBody = resolvedBody || adaptedRequestBody as OpenAPIV3.RequestBodyObject;\n\n  if (!effectiveBody) {\n    return (\n      <div\n        ref={ref}\n        className={cn(\"text-red-500 dark:text-red-400\", className)}\n      >\n        {t(\"Cannot resolve request body\")}\n      </div>\n    );\n  }\n\n  // Ëé∑ÂèñÂÜÖÂÆπ\n  const content = effectiveBody.content;\n  if (!content) {\n    return (\n      <div\n        ref={ref}\n        className={cn(\"text-yellow-500 dark:text-yellow-400\", className)}\n      >\n        {t(\"Request body has no content defined\")}\n      </div>\n    );\n  }\n\n  // Ëá™ÂÆö‰πâÂ§¥ÈÉ®Ê∏≤ÊüìÂáΩÊï∞\n  const renderHeader = () => {\n    return (\n      <>\n        {/* Required indicator */}\n        {effectiveBody.required && (\n          <div className=\"mb-2\">\n            <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200\">\n              {t(\"Required\")}\n            </span>\n          </div>\n        )}\n      </>\n    );\n  };\n\n  return (\n    <div ref={ref} className={className}>\n      <SectionTitle\n        title={t(\"Request Body\")}\n        className={cn(\"text-lg font-medium my-3\", titleClassName)}\n      />\n\n      <SchemaWithExampleViewer\n        content={effectiveBody}\n        components={openapi.components}\n        contentType=\"requestBody\"\n        renderHeader={renderHeader}\n      />\n    </div>\n  );\n});\n\nRequestBodySection.displayName = \"RequestBodySection\";\n\nexport { RequestBodySection, type RequestBodySectionProps };\n",
      "type": "registry:ui",
      "target": "components/pivot/request-body-section.tsx"
    }
  ]
}