{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "codegen",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "lucide-react",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/utils",
    "https://pivotkit.vercel.app/r/hooks",
    "https://pivotkit.vercel.app/r/code-markdown"
  ],
  "files": [
    {
      "path": "registry/pivot/codegen.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { CodeGenerator, CodeGeneratorParams, HttpMethod } from \"@/types/project\";\nimport type { OpenAPIV3 } from 'openapi-types';\n\nimport { generateExample } from '@/registry/lib/utils/generate-example';\nimport { resolveRef } from '@/registry/lib/utils/resolve-ref';\nimport { CodeMarkdown } from '@/registry/pivot/code-markdown';\nimport { Braces, ChevronDown, Code2, Terminal } from 'lucide-react';\nimport React, { useState } from 'react';\n\n// Code Generators\nclass CurlGenerator implements CodeGenerator {\n  id = \"curl\";\n  label = \"cURL\";\n\n  getIcon() {\n    return <Terminal size={16} />;\n  }\n\n  generateCode(params: CodeGeneratorParams): string {\n    const { endpoint, method, parameters, requestBodyExample, requestBody } = params;\n    let code = `curl -X ${method} \"${endpoint}\"`;\n\n    code += '\\n  -H \"Content-Type: application/json\"';\n\n    const queryParams = parameters.filter((p) => p.in === \"query\");\n    if (queryParams.length > 0) {\n      const queryString = queryParams\n        .map((p) => `${p.name}=value`)\n        .join(\"&\");\n      code = code.replace(endpoint, `${endpoint}?${queryString}`);\n    }\n\n    const headerParams = parameters.filter((p) => p.in === \"header\");\n    headerParams.forEach((p) => {\n      code += `\\n  -H \"${p.name}: value\"`;\n    });\n\n    if ([\"POST\", \"PUT\", \"PATCH\"].includes(method) && requestBody) {\n      code += `\\n  -d '${JSON.stringify(requestBodyExample, null, 2)}'`;\n    }\n\n    return code;\n  }\n}\n\nclass PythonGenerator implements CodeGenerator {\n  id = \"python\";\n  label = \"Python\";\n\n  getIcon() {\n    return <Code2 size={16} />;\n  }\n\n  generateCode(params: CodeGeneratorParams): string {\n    const { endpoint, method, parameters, requestBodyExample, requestBody } = params;\n\n    let code = \"import requests\\nimport json\\n\\n\";\n    code += `url = \"${endpoint}\"\\n`;\n\n    const headerParams = parameters.filter((p) => p.in === \"header\");\n    if (headerParams.length > 0) {\n      code += \"headers = {\\n\";\n      code += '    \"Content-Type\": \"application/json\",\\n';\n      headerParams.forEach((p) => {\n        code += `    \"${p.name}\": \"value\",\\n`;\n      });\n      code += \"}\\n\\n\";\n    } else {\n      code += 'headers = {\"Content-Type\": \"application/json\"}\\n\\n';\n    }\n\n    const queryParams = parameters.filter((p) => p.in === \"query\");\n    if (queryParams.length > 0) {\n      code += \"params = {\\n\";\n      queryParams.forEach((p) => {\n        code += `    \"${p.name}\": \"value\",\\n`;\n      });\n      code += \"}\\n\\n\";\n    }\n\n    if ([\"POST\", \"PUT\", \"PATCH\"].includes(method) && requestBody) {\n      code += `data = ${JSON.stringify(requestBodyExample, null, 4)}\\n\\n`;\n      code += `response = requests.${method.toLowerCase()}(url, headers=headers${queryParams.length > 0 ? ', params=params' : ''}, json=data)\\n`;\n    } else {\n      code += `response = requests.${method.toLowerCase()}(url, headers=headers${queryParams.length > 0 ? ', params=params' : ''})\\n`;\n    }\n\n    code += \"print(response.json())\";\n\n    return code;\n  }\n}\n\nclass TypeScriptGenerator implements CodeGenerator {\n  id = \"typescript\";\n  label = \"TypeScript\";\n\n  getIcon() {\n    return <Braces size={16} />;\n  }\n\n  generateCode(params: CodeGeneratorParams): string {\n    const { endpoint, method, parameters, requestBodyExample, requestBody } = params;\n\n    let code = \"\";\n\n    const queryParams = parameters.filter((p) => p.in === \"query\");\n    const headerParams = parameters.filter((p) => p.in === \"header\");\n\n    if (queryParams.length > 0) {\n      code += \"const params = new URLSearchParams({\\n\";\n      queryParams.forEach((p) => {\n        code += `  '${p.name}': 'value',\\n`;\n      });\n      code += \"});\\n\\n\";\n    }\n\n    code += `const response = await fetch('${endpoint}${queryParams.length > 0 ? '?${params}' : ''}', {\\n`;\n    code += `  method: '${method}',\\n`;\n    code += \"  headers: {\\n\";\n    code += \"    'Content-Type': 'application/json',\\n\";\n\n    headerParams.forEach((p) => {\n      code += `    '${p.name}': 'value',\\n`;\n    });\n\n    code += \"  },\\n\";\n\n    if ([\"POST\", \"PUT\", \"PATCH\"].includes(method) && requestBody) {\n      code += `  body: JSON.stringify(${JSON.stringify(requestBodyExample, null, 4)}),\\n`;\n    }\n\n    code += \"});\\n\\n\";\n    code += \"const data = await response.json();\\nconsole.log(data);\";\n\n    return code;\n  }\n}\n\nclass PhpGenerator implements CodeGenerator {\n  id = \"php\";\n  label = \"PHP\";\n\n  getIcon() {\n    return <Code2 size={16} />;\n  }\n\n  generateCode(params: CodeGeneratorParams): string {\n    const { endpoint, method, parameters, requestBodyExample, requestBody } = params;\n\n    let code = \"<?php\\n\\n\";\n    code += `$url = '${endpoint}';\\n`;\n\n    const queryParams = parameters.filter((p) => p.in === \"query\");\n    if (queryParams.length > 0) {\n      code += \"$params = [\\n\";\n      queryParams.forEach((p) => {\n        code += `    '${p.name}' => 'value',\\n`;\n      });\n      code += \"];\\n\";\n      code += \"$url .= '?' . http_build_query($params);\\n\\n\";\n    }\n\n    code += \"$headers = [\\n\";\n    code += \"    'Content-Type: application/json',\\n\";\n\n    const headerParams = parameters.filter((p) => p.in === \"header\");\n    headerParams.forEach((p) => {\n      code += `    '${p.name}: value',\\n`;\n    });\n\n    code += \"];\\n\\n\";\n\n    code += \"$ch = curl_init();\\n\";\n    code += \"curl_setopt($ch, CURLOPT_URL, $url);\\n\";\n    code += \"curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\\n\";\n    code += \"curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\\n\";\n    code += `curl_setopt($ch, CURLOPT_CUSTOMREQUEST, '${method}');\\n`;\n\n    if ([\"POST\", \"PUT\", \"PATCH\"].includes(method) && requestBody) {\n      code += `curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(${JSON.stringify(requestBodyExample, null, 4).replace(/\"/g, \"'\")}));\\n`;\n    }\n\n    code += \"\\n$response = curl_exec($ch);\\n\";\n    code += \"curl_close($ch);\\n\\n\";\n    code += \"echo $response;\\n\";\n\n    return code;\n  }\n}\n\nconst codeGenerators: CodeGenerator[] = [\n  new CurlGenerator(),\n  new PythonGenerator(),\n  new TypeScriptGenerator(),\n  new PhpGenerator(),\n];\n\ninterface CodegenProps {\n  endpoint: string;\n  method: \"get\" | \"post\" | \"put\" | \"delete\" | \"patch\" | \"head\" | \"options\" | \"trace\";\n  parameters?: (OpenAPIV3.ParameterObject | OpenAPIV3.ReferenceObject)[];\n  requestBody?: OpenAPIV3.RequestBodyObject | OpenAPIV3.ReferenceObject;\n  components?: OpenAPIV3.ComponentsObject;\n  collapsible?: boolean;\n  defaultCollapsed?: boolean;\n}\n\nconst Codegen: React.FC<CodegenProps> = ({\n  endpoint,\n  method,\n  parameters = [],\n  requestBody,\n  components,\n  collapsible = false,\n  defaultCollapsed = false\n}) => {\n  const [languageId, setLanguageId] = useState(codeGenerators[0]?.id || 'curl');\n  const [collapsed, setCollapsed] = useState(defaultCollapsed);\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  // 点击外部关闭下拉菜单\n  React.useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownOpen) {\n        setDropdownOpen(false);\n      }\n    };\n\n    if (dropdownOpen) {\n      document.addEventListener('click', handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [dropdownOpen]);\n\n  const toggleCollapse = () => {\n    if (collapsible) {\n      setCollapsed(!collapsed);\n    }\n  };\n\n  // 解析请求体\n  const resolvedRequestBody = requestBody\n    ? resolveRef(requestBody, components, 'requestBodies')\n    : undefined;\n\n  // 解析参数\n  const resolvedParameters = parameters.map(param =>\n    resolveRef(param, components, 'parameters')\n  ).filter(Boolean) as OpenAPIV3.ParameterObject[];\n\n  // 生成请求体示例数据\n  const getRequestBodyExample = () => {\n    if (!resolvedRequestBody || !resolvedRequestBody.content) return { example: \"data\" };\n\n    // 获取内容类型，优先使用application/json\n    const contentType = resolvedRequestBody.content['application/json']\n      ? 'application/json'\n      : Object.keys(resolvedRequestBody.content)[0];\n\n    if (!contentType || !resolvedRequestBody.content[contentType]?.schema) return { example: \"data\" };\n\n    const schema = resolvedRequestBody.content[contentType].schema;\n    if (!schema) return { example: \"data\" };\n\n    // 使用通用的示例生成工具\n    return resolvedRequestBody.content[contentType].example || generateExample(schema, components, {\n      maxDepth: 2,\n      includeReadOnly: true,\n      includeWriteOnly: true\n    });\n  };\n\n  const requestBodyExample = getRequestBodyExample();\n\n  const getCode = () => {\n    // 使用模块化的代码生成器\n    const generator = codeGenerators.find(gen => gen.id === languageId);\n    if (!generator) return '';\n\n    return generator.generateCode({\n      endpoint,\n      method: method.toUpperCase() as HttpMethod,\n      parameters: resolvedParameters,\n      requestBody: resolvedRequestBody || undefined,\n      requestBodyExample\n    });\n  };\n\n  // 获取代码语言\n  const getCodeLanguage = () => {\n    const generator = codeGenerators.find(gen => gen.id === languageId);\n    if (!generator) return 'bash';\n\n    switch (languageId) {\n      case 'curl':\n        return 'bash';\n      case 'python':\n        return 'python';\n      case 'typescript':\n      case 'javascript':\n        return 'javascript';\n      case 'php':\n        return 'php';\n      default:\n        return languageId;\n    }\n  };\n\n  const currentGenerator = codeGenerators.find(gen => gen.id === languageId);\n\n  return (\n    <div className=\"border rounded-lg overflow-hidden bg-card\">\n      {/* Header */}\n      <div\n        className={cn(\n          \"flex items-center justify-between px-4 py-3 bg-muted/50\",\n          collapsible && \"cursor-pointer hover:bg-muted\"\n        )}\n        onClick={collapsible ? toggleCollapse : undefined}\n      >\n        <h3 className=\"text-sm font-medium text-foreground\">\n          代码示例\n        </h3>\n\n        <div className=\"flex items-center gap-2\">\n          {/* Language Selector Dropdown */}\n          <div className=\"relative\">\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                setDropdownOpen(!dropdownOpen);\n              }}\n              className=\"flex items-center gap-2 px-3 py-1.5 text-sm font-medium text-foreground bg-background border border-border rounded-md hover:bg-muted transition-colors\"\n            >\n              <span>{currentGenerator?.label}</span>\n              <ChevronDown className=\"h-4 w-4\" />\n            </button>\n\n            {dropdownOpen && (\n              <>\n                {/* Backdrop */}\n                <div\n                  className=\"fixed inset-0 z-40\"\n                  onClick={() => setDropdownOpen(false)}\n                />\n                {/* Dropdown Menu */}\n                <div className=\"absolute right-0 top-full mt-1 w-40 bg-popover border border-border rounded-md shadow-lg z-50\">\n                  {codeGenerators.map((generator) => (\n                    <button\n                      key={generator.id}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setLanguageId(generator.id);\n                        setDropdownOpen(false);\n                      }}\n                      className={cn(\n                        \"w-full flex items-center gap-2 px-3 py-2 text-sm text-left hover:bg-muted transition-colors first:rounded-t-md last:rounded-b-md\",\n                        languageId === generator.id && \"bg-muted text-primary\"\n                      )}\n                    >\n                      {generator.label}\n                    </button>\n                  ))}\n                </div>\n              </>\n            )}\n          </div>\n\n          {collapsible && (\n            <span className=\"text-muted-foreground\">\n              {collapsed ? '展开' : '收起'}\n            </span>\n          )}\n        </div>\n      </div>\n\n      {!collapsed && (\n        <div className=\"p-0\">\n          <CodeMarkdown\n            className=\"rounded-none\"\n            code={getCode()}\n            language={getCodeLanguage()}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport { Codegen, type CodegenProps };\nexport default Codegen;\n\n",
      "type": "registry:ui",
      "target": "components/pivot/codegen.tsx"
    }
  ]
}