{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "security-section",
  "type": "registry:ui",
  "dependencies": ["openapi-types", "react"],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/resolve-ref.json",
    "https://pivotkit.vercel.app/r/section-title.json",
    "https://pivotkit.vercel.app/r/security-scheme-display.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/security-section.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport type { OpenAPIV3 } from 'openapi-types';\nimport React from \"react\";\nimport { resolveRef } from \"@/registry/default/lib/utils/resolve-ref\";\nimport { SectionTitle } from \"@/registry/default/ui/section-title\";\nimport { SecuritySchemeDisplay } from \"@/registry/default/ui/security-scheme-display\";\n\n// Import types from the centralized types file\n\ninterface SecuritySectionProps {\n  security?: OpenAPIV3.SecurityRequirementObject[];\n  securitySchemes?: Record<string, OpenAPIV3.SecuritySchemeObject | OpenAPIV3.ReferenceObject>;\n  components?: OpenAPIV3.ComponentsObject;\n  className?: string;\n}\n\nconst SecuritySection = React.forwardRef<HTMLDivElement, SecuritySectionProps>(\n  ({ security, securitySchemes, components, className }, ref) => {\n    const hasGlobalRequirements = security && security.length > 0;\n    const hasSchemes =\n      securitySchemes && Object.keys(securitySchemes).length > 0;\n\n    if (!hasGlobalRequirements && !hasSchemes) {\n      return null;\n    }\n\n    // Helper to render a single requirement (which might be an AND of ORs)\n    const renderRequirement = (\n      req: OpenAPIV3.SecurityRequirementObject,\n      index: number,\n    ) => {\n      const schemes = Object.entries(req);\n      if (schemes.length === 0) return null;\n\n      return (\n        <div\n          key={index}\n          className=\"rounded p-2 text-sm bg-neutral-50 dark:bg-neutral-800/70 border dark:border-neutral-700\"\n        >\n          {schemes.map(([schemeName, scopes], idx) => (\n            <div\n              key={schemeName}\n              className={cn(\"flex items-center gap-2\", idx > 0 && \"mt-1\")}\n            >\n              <span className=\"font-mono font-semibold dark:text-neutral-200\">\n                {schemeName}\n              </span>\n              {scopes.length > 0 && (\n                <span className=\"text-xs text-neutral-600 dark:text-neutral-400\">\n                  Scopes: {scopes.join(\", \")}\n                </span>\n              )}\n              {scopes.length === 0 && (\n                <span className=\"text-xs text-neutral-500 dark:text-neutral-400 italic\">\n                  (No specific scopes required)\n                </span>\n              )}\n            </div>\n          ))}\n        </div>\n      );\n    };\n\n    return (\n      <div ref={ref} className={cn(\"py-6\", className, \"dark:text-neutral-200\")}>\n        <SectionTitle title=\"Security\" className=\"text-2xl mb-4\" />\n\n        {/* Global Security Requirements */}\n        {hasGlobalRequirements && (\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-semibold mb-2 dark:text-neutral-200\">\n              Global Requirements\n            </h3>\n            <p className=\"text-sm text-neutral-600 dark:text-neutral-400 mb-3\">\n              API calls must satisfy ONE of the following security requirement\n              sets:\n            </p>\n            <div className=\"space-y-2\">\n              {security.map(renderRequirement)}\n            </div>\n          </div>\n        )}\n\n        {/* Security Schemes Definitions */}\n        {hasSchemes && (\n          <div className={hasGlobalRequirements ? \"mt-8\" : \"\"}>\n            <SectionTitle title=\"Security Schemes\" className=\"text-lg mb-4\" />\n            <div className=\"space-y-4\">\n              {Object.entries(securitySchemes).map(\n                ([name, schemeOrRef]) => {\n                  // Resolve refs if security schemes can be defined with $ref\n                  const scheme = resolveRef<OpenAPIV3.SecuritySchemeObject>(\n                    schemeOrRef,\n                    components,\n                    \"securitySchemes\",\n                  );\n                  if (!scheme) {\n                    const refString =\n                      schemeOrRef &&\n                        typeof schemeOrRef === \"object\" &&\n                        \"$ref\" in schemeOrRef\n                        ? (schemeOrRef as OpenAPIV3.ReferenceObject).$ref\n                        : \"[unknown reference]\";\n                    return (\n                      <div\n                        key={name}\n                        className=\"text-xs text-red-500 dark:text-red-400\"\n                      >\n                        Failed to resolve scheme: {refString}\n                      </div>\n                    );\n                  }\n                  return (\n                    <SecuritySchemeDisplay\n                      key={name}\n                      name={name}\n                      scheme={scheme}\n                    />\n                  );\n                },\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n\nSecuritySection.displayName = \"SecuritySection\";\n\nexport { SecuritySection, type SecuritySectionProps };\n\n",
      "type": "registry:ui",
      "target": "components/ui/security-section.tsx"
    }
  ]
}
