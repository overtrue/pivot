{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "schema-display",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/resolve-ref.json",
    "https://pivotkit.vercel.app/r/constraint-display.json",
    "https://pivotkit.vercel.app/r/default-value-display.json",
    "https://pivotkit.vercel.app/r/deprecated-badge.json",
    "https://pivotkit.vercel.app/r/description-display.json",
    "https://pivotkit.vercel.app/r/enum-values-display.json",
    "https://pivotkit.vercel.app/r/format-badge.json",
    "https://pivotkit.vercel.app/r/required-badge.json",
    "https://pivotkit.vercel.app/r/schema-composition-display.json",
    "https://pivotkit.vercel.app/r/type-indicator.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/schema-display.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { resolveRef } from \"@/registry/default/lib/utils/resolve-ref\";\nimport { ConstraintDisplay } from \"@/registry/default/ui/constraint-display\";\nimport { DefaultValueDisplay } from \"@/registry/default/ui/default-value-display\";\nimport { DeprecatedBadge } from \"@/registry/default/ui/deprecated-badge\";\nimport { DescriptionDisplay } from \"@/registry/default/ui/description-display\";\nimport { EnumValuesDisplay } from \"@/registry/default/ui/enum-values-display\";\nimport { FormatBadge } from \"@/registry/default/ui/format-badge\";\nimport { RequiredBadge } from \"@/registry/default/ui/required-badge\";\nimport { SchemaCompositionDisplay } from \"@/registry/default/ui/schema-composition-display\";\nimport { TypeIndicator } from \"@/registry/default/ui/type-indicator\";\nimport type { OpenAPIV3 } from \"openapi-types\";\nimport React, { useState } from \"react\";\n\n// Import types from the centralized types file\n\ninterface SchemaDisplayProps {\n  schema: OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject;\n  components?: OpenAPIV3.ComponentsObject;\n  currentDepth?: number;\n  maxDepth?: number;\n  className?: string;\n}\n\nconst MAX_DEPTH = 10; // Simple depth limit to prevent infinite loops\n\n// --- Collapsible Icon --- (Simple SVG Chevron)\nconst ChevronIcon = ({ isExpanded }: { isExpanded: boolean }) => (\n  <svg\n    className={cn(\n      `w-3 h-3 transition-transform duration-200 ease-in-out`,\n      isExpanded ? \"rotate-90\" : \"rotate-0\",\n    )}\n    fill=\"none\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    strokeWidth=\"2\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n  >\n    <path d=\"M9 5l7 7-7 7\"></path>\n  </svg>\n);\n\n// Helper function to get item type string\nconst getItemTypeString = (\n  itemSchemaOrRef:\n    | OpenAPIV3.SchemaObject\n    | OpenAPIV3.ReferenceObject\n    | undefined,\n  components: OpenAPIV3.ComponentsObject | undefined,\n): string => {\n  if (!itemSchemaOrRef) return \"any\";\n  const resolvedItemSchema = resolveRef<OpenAPIV3.SchemaObject>(\n    itemSchemaOrRef,\n    components,\n    \"schemas\",\n  );\n  if (!resolvedItemSchema) return \"unresolved\";\n\n  if (resolvedItemSchema.type) return resolvedItemSchema.type;\n  if (\n    resolvedItemSchema.properties ||\n    typeof resolvedItemSchema.additionalProperties === \"object\"\n  )\n    return \"object\"; // Infer object\n  if (\"items\" in resolvedItemSchema && resolvedItemSchema.items) return \"array\"; // Infer array\n  if (\n    resolvedItemSchema.allOf ||\n    resolvedItemSchema.anyOf ||\n    resolvedItemSchema.oneOf\n  )\n    return \"composition\"; // Indicate composition\n\n  return \"any\"; // Default fallback\n};\n\n// New Component to render individual properties in the desired format\nconst PropertyDisplay: React.FC<{\n  propName: string;\n  propSchemaOrRef: OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject;\n  isRequired: boolean;\n  components?: OpenAPIV3.ComponentsObject;\n  currentDepth: number;\n  className?: string | string[];\n}> = ({\n  propName,\n  propSchemaOrRef,\n  isRequired,\n  components,\n  currentDepth,\n  className,\n}) => {\n  const [isExpanded, setIsExpanded] = useState(true);\n  const toggleExpansion = () => setIsExpanded(!isExpanded);\n\n  const resolvedPropSchema = resolveRef<OpenAPIV3.SchemaObject>(\n    propSchemaOrRef,\n    components,\n    \"schemas\",\n  );\n\n  if (!resolvedPropSchema) {\n    const refString =\n      propSchemaOrRef &&\n      typeof propSchemaOrRef === \"object\" &&\n      \"$ref\" in propSchemaOrRef\n        ? (propSchemaOrRef as OpenAPIV3.ReferenceObject).$ref\n        : \"[invalid schema]\";\n    return (\n      <div className=\"pl-3 my-2 border-l-2 border-neutral-200 dark:border-neutral-700\">\n        <div className=\"font-mono font-medium text-sm mb-1 text-black dark:text-neutral-200\">\n          {propName}{\" \"}\n          <span className=\"text-red-500 dark:text-red-400 text-xs\">\n            Error resolving {refString}\n          </span>\n        </div>\n      </div>\n    );\n  }\n\n  const {\n    type,\n    format,\n    description,\n    default: defaultValue,\n    enum: enumValues,\n    deprecated,\n    properties, // To decide if recursive call is needed\n    ...otherConstraints\n  } = resolvedPropSchema;\n\n  // Access items safely\n  const items =\n    \"items\" in resolvedPropSchema ? resolvedPropSchema.items : undefined;\n\n  // Determine display type and collapsibility\n  let displayTypeString = type || \"any\";\n  let isCollapsible = false;\n  const isActuallyObject =\n    type === \"object\" ||\n    properties ||\n    typeof otherConstraints.additionalProperties === \"object\";\n  const isActuallyArray = type === \"array\" || items;\n  let itemTypeForArray = \"\";\n\n  if (isActuallyObject) {\n    displayTypeString = \"object\";\n    isCollapsible = true;\n  }\n  if (isActuallyArray) {\n    itemTypeForArray = getItemTypeString(items, components);\n    displayTypeString = `array[${itemTypeForArray}]`;\n    // Array is collapsible only if its items are objects\n    if (itemTypeForArray === \"object\") {\n      isCollapsible = true;\n    }\n  }\n\n  // Recursive call is needed only if the property itself is collapsible (i.e., object or array of objects)\n  const shouldRecurse = isCollapsible;\n\n  // Define connector width based on collapsibility to ensure text alignment\n  const connectorWidthClass = isCollapsible ? \"w-3\" : \"w-7\"; // Dynamic width\n  const iconSpanWidthClass = isCollapsible ? \"w-4\" : \"w-0\"; // Fixed width for the icon span when it exists\n\n  return (\n    <div className={cn(\"py-1\", className)} role=\"property-item\">\n      {/* Property Name Row */}\n      <div\n        className={cn(\n          \"group flex items-center flex-wrap gap-x-1 mb-0.5\",\n          isCollapsible && \"cursor-pointer\",\n        )}\n        onClick={isCollapsible ? toggleExpansion : undefined}\n        role=\"property-item-header\"\n      >\n        {/* Prefix Connector Line - Conditional width */}\n        <div\n          className={cn(\n            connectorWidthClass,\n            \"border-t border-neutral-200 dark:border-neutral-700 group-hover:border-neutral-300 dark:group-hover:border-neutral-600 flex-shrink-0\",\n          )}\n        ></div>\n\n        {/* Icon Span - RENDERED ONLY IF COLLAPSIBLE */}\n        <span\n          className={cn(\n            iconSpanWidthClass,\n            \"inline-flex items-center justify-center h-5\",\n          )}\n        >\n          {isCollapsible && (\n            <span className=\"text-neutral-400 dark:text-neutral-500\">\n              <ChevronIcon isExpanded={isExpanded} />\n            </span>\n          )}\n        </span>\n        <div className=\"flex-1 gap-1 flex items-center justify-between\">\n          {/* Text content follows. Starts at same effective indent */}\n          <span className=\"font-mono text-sm text-black dark:text-neutral-200 group-hover:text-neutral-900 dark:group-hover:text-white\">\n            {propName}\n          </span>\n\n          {/* hover line */}\n          <div className=\"h-px self-center ml-1 flex-grow border-t border-transparent group-hover:border-neutral-300 dark:group-hover:border-neutral-600 transition-colors duration-150\"></div>\n\n          {/* Type and other badges */}\n          <div className=\"flex gap-1 items-center\">\n            <TypeIndicator type={displayTypeString as any}>\n              {displayTypeString}\n            </TypeIndicator>\n            {format && <FormatBadge format={format as any} />}\n            {deprecated && <DeprecatedBadge />}\n            {isRequired && (\n              <div className=\"flex-shrink-0 flex items-center\">\n                <RequiredBadge />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      {/* Collapsible Section */}\n      <div\n        className={`pl-10 transition-all duration-300 ease-in-out overflow-hidden ${isExpanded ? \"max-h-[1000px] opacity-100\" : \"max-h-0 opacity-0\"}`}\n        role=\"property-item-content\"\n      >\n        {description && (\n          <DescriptionDisplay\n            description={description as string}\n            className=\"text-sm text-neutral-500 dark:text-neutral-400 mb-1 pt-0.5\"\n          />\n        )}\n\n        {defaultValue !== undefined && (\n          <DefaultValueDisplay\n            value={defaultValue}\n            className=\"text-xs text-neutral-500 dark:text-neutral-400 mb-0.5\"\n          />\n        )}\n\n        {enumValues && (\n          <EnumValuesDisplay\n            values={enumValues || []}\n            className=\"text-xs text-neutral-500 dark:text-neutral-400 mb-0.5\"\n          />\n        )}\n\n        {Object.keys(otherConstraints).length > 0 && (\n          <ConstraintDisplay\n            schema={{\n              ...resolvedPropSchema,\n            }}\n            className=\"text-xs\"\n          />\n        )}\n\n        {/* Recursive call */}\n        {shouldRecurse && (\n          <div className=\"mt-1 pb-0.5\" role=\"property-item-content-children\">\n            <SchemaDisplay\n              schema={resolvedPropSchema}\n              components={components}\n              currentDepth={currentDepth + 1}\n              className=\"border-none p-0\"\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst SchemaDisplay = React.forwardRef<HTMLDivElement, SchemaDisplayProps>(\n  ({ schema: schemaOrRef, components, currentDepth = 0, className }, ref) => {\n    const isRef = typeof schemaOrRef === \"object\" && \"$ref\" in schemaOrRef;\n    const refName = isRef\n      ? (schemaOrRef as OpenAPIV3.ReferenceObject).$ref\n      : null;\n\n    const resolvedSchema = resolveRef<OpenAPIV3.SchemaObject>(\n      schemaOrRef,\n      components,\n      \"schemas\",\n    );\n\n    if (!resolvedSchema) {\n      const refString =\n        schemaOrRef && typeof schemaOrRef === \"object\" && \"$ref\" in schemaOrRef\n          ? (schemaOrRef as OpenAPIV3.ReferenceObject).$ref\n          : \"[invalid schema object]\";\n      return (\n        <div\n          ref={ref}\n          className={cn(\n            \"text-xs text-red-500 dark:text-red-400 p-1 border border-dashed rounded dark:border-red-800\",\n            className,\n          )}\n        >\n          Failed to resolve reference: {refString}\n        </div>\n      );\n    }\n\n    if (currentDepth > MAX_DEPTH) {\n      return (\n        <div\n          ref={ref}\n          className={cn(\n            \"text-xs text-orange-500 dark:text-orange-400 p-1 border border-dashed rounded dark:border-orange-800\",\n            className,\n          )}\n        >\n          Max schema depth reached. Possible circular reference.\n        </div>\n      );\n    }\n\n    const {\n      type,\n      format,\n      description,\n      default: defaultValue,\n      enum: enumValues,\n      deprecated,\n      properties,\n      required,\n      additionalProperties,\n      allOf,\n      anyOf,\n      oneOf,\n      not,\n      ...otherConstraints\n    } = resolvedSchema;\n\n    // Access items safely\n    const items = \"items\" in resolvedSchema ? resolvedSchema.items : undefined;\n\n    const renderComposition = () => (\n      <>\n        {allOf && (\n          <SchemaCompositionDisplay\n            keyword=\"allOf\"\n            subschemas={allOf}\n            components={components}\n            currentDepth={currentDepth}\n          />\n        )}\n        {anyOf && (\n          <SchemaCompositionDisplay\n            keyword=\"anyOf\"\n            subschemas={anyOf}\n            components={components}\n            currentDepth={currentDepth}\n          />\n        )}\n        {oneOf && (\n          <SchemaCompositionDisplay\n            keyword=\"oneOf\"\n            subschemas={oneOf}\n            components={components}\n            currentDepth={currentDepth}\n          />\n        )}\n        {not && (\n          <SchemaCompositionDisplay\n            keyword=\"not\"\n            subschemas={[not]}\n            components={components}\n            currentDepth={currentDepth}\n          />\n        )}\n      </>\n    );\n\n    const renderBasicInfo = (includeConstraints = true) => (\n      <div className=\"space-y-2\">\n        {deprecated && <DeprecatedBadge />}\n        {description && (\n          <DescriptionDisplay\n            description={description}\n            className=\"text-sm mt-1\"\n          />\n        )}\n        {defaultValue !== undefined && (\n          <DefaultValueDisplay value={defaultValue} />\n        )}\n        {enumValues && <EnumValuesDisplay values={enumValues || []} />}\n        {includeConstraints && <ConstraintDisplay schema={resolvedSchema} />}\n      </div>\n    );\n\n    switch (type) {\n      case \"string\":\n      case \"number\":\n      case \"integer\":\n      case \"boolean\":\n        return (\n          <div\n            ref={ref}\n            className={cn(\n              \"p-2 rounded bg-neutral-50/50 dark:bg-neutral-800/50\",\n              className,\n            )}\n          >\n            <div className=\"flex items-center gap-2 mb-1 flex-wrap\">\n              {type && <TypeIndicator type={type as any} />}\n              {format && <FormatBadge format={format as any} />}\n              {deprecated && <DeprecatedBadge />}\n            </div>\n            {description && (\n              <DescriptionDisplay\n                description={description}\n                className=\"text-sm mt-1 mb-1 dark:text-neutral-300\"\n              />\n            )}\n            {defaultValue !== undefined && (\n              <DefaultValueDisplay\n                value={defaultValue}\n                className=\"text-xs mb-1\"\n              />\n            )}\n            {enumValues && (\n              <EnumValuesDisplay\n                values={enumValues || []}\n                className=\"text-xs mb-1\"\n              />\n            )}\n            <ConstraintDisplay\n              schema={{\n                ...resolvedSchema,\n              }}\n              className=\"text-xs\"\n            />\n            {renderComposition()}\n          </div>\n        );\n\n      case \"object\":\n        return (\n          <div ref={ref} className={cn(className)}>\n            {currentDepth === 0 && (\n              <>\n                <div className=\"flex items-center gap-2 mb-1 flex-wrap\">\n                  <TypeIndicator type=\"object\" />\n                  {deprecated && <DeprecatedBadge />}\n                </div>\n                {description && (\n                  <DescriptionDisplay\n                    description={description}\n                    className=\"text-sm text-neutral-600 dark:text-neutral-300 mt-1 mb-2\"\n                  />\n                )}\n              </>\n            )}\n            {renderComposition()}\n            {properties && Object.keys(properties).length > 0 && (\n              <div className=\"mt-1 border-l border-neutral-200 dark:border-neutral-700\">\n                {Object.entries(properties).map(([propName, propSchema]) => (\n                  <PropertyDisplay\n                    key={propName}\n                    propName={propName}\n                    propSchemaOrRef={propSchema}\n                    isRequired={(required || []).includes(propName)}\n                    components={components}\n                    currentDepth={currentDepth}\n                  />\n                ))}\n              </div>\n            )}\n            {additionalProperties !== undefined &&\n              additionalProperties !== false && (\n                <div className=\"mt-2 pl-4 py-2 border-l border-dashed border-neutral-300 dark:border-neutral-600\">\n                  <h4 className=\"text-xs font-semibold italic text-neutral-500 dark:text-neutral-400 mb-1\">\n                    Additional Properties\n                  </h4>\n                  {additionalProperties === true ? (\n                    <span className=\"text-sm text-neutral-600 dark:text-neutral-300\">\n                      Allowed: Yes (any type)\n                    </span>\n                  ) : (\n                    <SchemaDisplay\n                      schema={\n                        additionalProperties as\n                          | OpenAPIV3.SchemaObject\n                          | OpenAPIV3.ReferenceObject\n                      }\n                      components={components}\n                      currentDepth={currentDepth + 1}\n                      className=\"border-none p-0 mt-1\"\n                    />\n                  )}\n                </div>\n              )}\n          </div>\n        );\n\n      case \"array\":\n        return (\n          <div ref={ref} className={cn(className)}>\n            {currentDepth === 0 && (\n              <>\n                <div className=\"flex items-center gap-2 mb-1 flex-wrap\">\n                  {isRef && refName && (\n                    <span className=\"text-xs text-neutral-500 italic\">\n                      {refName}\n                    </span>\n                  )}\n                  <TypeIndicator type=\"array\" />\n                  {deprecated && <DeprecatedBadge />}\n                </div>\n                {description && (\n                  <DescriptionDisplay\n                    description={description}\n                    className=\"text-sm text-neutral-600 dark:text-neutral-300 mt-1 mb-2\"\n                  />\n                )}\n              </>\n            )}\n            {renderComposition()}\n            {items ? (\n              <div className=\"mt-1\">\n                <SchemaDisplay\n                  schema={items}\n                  components={components}\n                  currentDepth={currentDepth + 1}\n                  className=\"border-none p-0\"\n                />\n              </div>\n            ) : (\n              <div className=\"mt-1 text-xs text-orange-500 dark:text-orange-400 ml-1\">\n                Array 'items' definition is missing.\n              </div>\n            )}\n          </div>\n        );\n\n      default:\n        if (allOf || anyOf || oneOf || not) {\n          return (\n            <div\n              ref={ref}\n              className={cn(\n                \"p-2 border rounded border-dashed border-neutral-300 dark:border-neutral-600 dark:bg-neutral-800/30\",\n                className,\n              )}\n            >\n              <span className=\"text-xs text-neutral-500 dark:text-neutral-400 italic\">\n                Composition Schema\n              </span>\n              {deprecated && <DeprecatedBadge />}\n              {description && (\n                <DescriptionDisplay\n                  description={description}\n                  className=\"text-sm mt-1 mb-1 dark:text-neutral-300\"\n                />\n              )}\n              {renderBasicInfo()}\n              {renderComposition()}\n            </div>\n          );\n        }\n        if (properties || typeof additionalProperties === \"object\") {\n          console.warn(\n            `[SchemaDisplay] Schema treated as 'object' due to presence of 'properties' or 'additionalProperties':`,\n            resolvedSchema,\n          );\n          const inferredObjectSchema = {\n            ...resolvedSchema,\n            type: \"object\" as const,\n          };\n          return (\n            <SchemaDisplay\n              schema={inferredObjectSchema}\n              components={components}\n              currentDepth={currentDepth}\n              className={className}\n            />\n          );\n        }\n        if (items) {\n          console.warn(\n            `[SchemaDisplay] Schema treated as 'array' due to presence of 'items':`,\n            resolvedSchema,\n          );\n          const inferredArraySchema = {\n            ...resolvedSchema,\n            type: \"array\" as const,\n            items,\n          };\n          return (\n            <SchemaDisplay\n              schema={inferredArraySchema}\n              components={components}\n              currentDepth={currentDepth}\n              className={className}\n            />\n          );\n        }\n        return (\n          <div\n            ref={ref}\n            className={cn(\n              \"text-xs text-neutral-500 dark:text-neutral-400 p-1 border border-dashed rounded dark:border-neutral-600\",\n              className,\n            )}\n          >\n            Unknown or underspecified schema type.\n            {description && (\n              <DescriptionDisplay\n                description={description}\n                className=\"block mt-1 dark:text-neutral-300\"\n              />\n            )}\n            {renderComposition()}\n          </div>\n        );\n    }\n  },\n);\n\nSchemaDisplay.displayName = \"SchemaDisplay\";\n\nexport { SchemaDisplay, type SchemaDisplayProps };\n",
      "type": "registry:ui",
      "target": "components/ui/schema-display.tsx"
    }
  ]
}