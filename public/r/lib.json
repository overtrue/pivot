{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "lib",
  "type": "registry:lib",
  "description": "Core library components and utilities",
  "dependencies": [
    "@faker-js/faker",
    "openapi-types",
    "react"
  ],
  "files": [
    {
      "path": "registry/default/lib/generate-example.ts",
      "content": "import { resolveRef } from \"@/registry/default/lib/resolve-ref\";\nimport { faker } from \"@faker-js/faker\";\nimport type { OpenAPIV3 } from \"openapi-types\";\n\n// 配置 faker.js\n// 注意：@faker-js/faker 8.x 版本不再支持 setLocale，使用默认语言\n\n/**\n * 根据OpenAPI Schema生成示例数据\n *\n * @param schema 要生成示例的Schema对象\n * @param components 引用解析所需的components\n * @param options 额外配置选项\n * @returns 生成的示例数据\n */\nexport function generateExample(\n  schema: OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject,\n  components?: OpenAPIV3.ComponentsObject,\n  options: {\n    maxDepth?: number;\n    currentDepth?: number;\n    includeReadOnly?: boolean;\n    includeWriteOnly?: boolean;\n  } = {},\n): unknown {\n  // 默认选项\n  const {\n    maxDepth = 3,\n    currentDepth = 0,\n    includeReadOnly = true,\n    includeWriteOnly = true,\n  } = options;\n\n  // 防止过深递归\n  if (currentDepth > maxDepth) {\n    return {};\n  }\n\n  // 解析引用\n  let resolvedSchema: OpenAPIV3.SchemaObject | null = null;\n  if (\"$ref\" in schema) {\n    resolvedSchema = resolveRef<OpenAPIV3.SchemaObject>(\n      schema,\n      components,\n      \"schemas\",\n    );\n    if (!resolvedSchema) {\n      console.warn(`无法解析引用: ${schema.$ref}`);\n      return {};\n    }\n  } else {\n    resolvedSchema = schema;\n  }\n\n  // 如果提供了example，直接使用\n  if (resolvedSchema.example !== undefined) {\n    return resolvedSchema.example;\n  }\n\n  // 如果提供了default，使用默认值\n  if (resolvedSchema.default !== undefined) {\n    return resolvedSchema.default;\n  }\n\n  // 如果有enum，返回第一个枚举值\n  if (resolvedSchema.enum && resolvedSchema.enum.length > 0) {\n    return resolvedSchema.enum[0];\n  }\n\n  // 根据type生成示例\n  const type = resolvedSchema.type;\n\n  // 处理复合模式\n  if (resolvedSchema.allOf && resolvedSchema.allOf.length > 0) {\n    // 合并所有allOf模式\n    const mergedExample = {};\n    for (const subSchema of resolvedSchema.allOf) {\n      const subExample = generateExample(subSchema, components, {\n        ...options,\n        currentDepth: currentDepth + 1,\n      });\n      Object.assign(mergedExample, subExample);\n    }\n    return mergedExample;\n  }\n\n  if (resolvedSchema.oneOf && resolvedSchema.oneOf.length > 0) {\n    // 使用第一个oneOf模式\n    const firstSchema = resolvedSchema.oneOf[0];\n    if (firstSchema) {\n      return generateExample(firstSchema, components, {\n        ...options,\n        currentDepth: currentDepth + 1,\n      });\n    }\n  }\n\n  if (resolvedSchema.anyOf && resolvedSchema.anyOf.length > 0) {\n    // 使用第一个anyOf模式\n    const firstSchema = resolvedSchema.anyOf[0];\n    if (firstSchema) {\n      return generateExample(firstSchema, components, {\n        ...options,\n        currentDepth: currentDepth + 1,\n      });\n    }\n  }\n\n  // 根据类型处理\n  switch (type) {\n    case \"string\": {\n      // 为不同格式生成合适的字符串\n      const format = resolvedSchema.format;\n      const propName = resolvedSchema.title || \"\";\n\n      if (format === \"date\") {\n        return faker.date.recent({ days: 30 }).toISOString().split(\"T\")[0]; // YYYY-MM-DD\n      } else if (format === \"date-time\") {\n        return faker.date.recent({ days: 30 }).toISOString(); // YYYY-MM-DDThh:mm:ss.sssZ\n      } else if (format === \"email\") {\n        return faker.internet.email();\n      } else if (format === \"uuid\") {\n        return faker.string.uuid();\n      } else if (format === \"uri\" || format === \"url\") {\n        return faker.internet.url();\n      } else if (format === \"hostname\") {\n        return faker.internet.domainName();\n      } else if (format === \"ipv4\") {\n        return faker.internet.ipv4();\n      } else if (format === \"ipv6\") {\n        return faker.internet.ipv6();\n      } else if (format === \"password\") {\n        return faker.internet.password({ length: 12 });\n      } else if (format === \"byte\") {\n        return faker.string.alphanumeric(8);\n      } else if (format === \"binary\") {\n        return faker.string.binary({ length: 16 });\n      } else if (resolvedSchema.pattern) {\n        // 对于有模式的，尝试生成符合模式的示例\n        return `${faker.lorem.word()}_${faker.string.alphanumeric(6)}`;\n      } else {\n        // 根据属性名推断类型生成合适的示例\n        const lowerPropName = propName.toLowerCase();\n\n        // 基础信息类\n        if (lowerPropName.includes(\"name\") || lowerPropName.includes(\"title\")) {\n          return faker.person.fullName();\n        } else if (lowerPropName.includes(\"email\")) {\n          return faker.internet.email();\n        } else if (\n          lowerPropName.includes(\"phone\") ||\n          lowerPropName.includes(\"mobile\") ||\n          lowerPropName.includes(\"tel\")\n        ) {\n          return faker.phone.number();\n        } else if (\n          lowerPropName.includes(\"username\") ||\n          lowerPropName.includes(\"user_name\")\n        ) {\n          return faker.internet.userName();\n        } else if (\n          lowerPropName.includes(\"password\") ||\n          lowerPropName.includes(\"passwd\")\n        ) {\n          return faker.internet.password({ length: 12 });\n        }\n\n        // 姓名相关\n        else if (\n          lowerPropName.includes(\"first\") &&\n          (lowerPropName.includes(\"name\") || lowerPropName.includes(\"_name\"))\n        ) {\n          return faker.person.firstName();\n        } else if (\n          lowerPropName.includes(\"last\") &&\n          (lowerPropName.includes(\"name\") || lowerPropName.includes(\"_name\"))\n        ) {\n          return faker.person.lastName();\n        } else if (\n          lowerPropName.includes(\"full\") &&\n          lowerPropName.includes(\"name\")\n        ) {\n          return faker.person.fullName();\n        } else if (\n          lowerPropName.includes(\"middle\") &&\n          lowerPropName.includes(\"name\")\n        ) {\n          return faker.person.middleName();\n        }\n\n        // 地址相关\n        else if (lowerPropName.includes(\"address\")) {\n          return faker.location.streetAddress({ useFullAddress: true });\n        } else if (lowerPropName.includes(\"street\")) {\n          return faker.location.street();\n        } else if (lowerPropName.includes(\"city\")) {\n          return faker.location.city();\n        } else if (\n          lowerPropName.includes(\"state\") ||\n          lowerPropName.includes(\"province\")\n        ) {\n          return faker.location.state();\n        } else if (lowerPropName.includes(\"country\")) {\n          return faker.location.country();\n        } else if (\n          lowerPropName.includes(\"zip\") ||\n          lowerPropName.includes(\"postal\")\n        ) {\n          return faker.location.zipCode();\n        }\n\n        // 公司相关\n        else if (\n          lowerPropName.includes(\"company\") ||\n          lowerPropName.includes(\"organization\")\n        ) {\n          return faker.company.name();\n        } else if (lowerPropName.includes(\"department\")) {\n          return faker.commerce.department();\n        } else if (\n          lowerPropName.includes(\"position\") ||\n          lowerPropName.includes(\"job\") ||\n          lowerPropName.includes(\"role\")\n        ) {\n          return faker.person.jobTitle();\n        }\n\n        // 网络相关\n        else if (\n          lowerPropName.includes(\"url\") ||\n          lowerPropName.includes(\"website\") ||\n          lowerPropName.includes(\"link\")\n        ) {\n          return faker.internet.url();\n        } else if (lowerPropName.includes(\"domain\")) {\n          return faker.internet.domainName();\n        } else if (lowerPropName.includes(\"ip\")) {\n          return faker.internet.ipv4();\n        }\n\n        // 媒体相关\n        else if (\n          lowerPropName.includes(\"avatar\") ||\n          lowerPropName.includes(\"image\") ||\n          lowerPropName.includes(\"photo\")\n        ) {\n          return faker.image.avatar();\n        } else if (\n          lowerPropName.includes(\"color\") ||\n          lowerPropName.includes(\"colour\")\n        ) {\n          return faker.color.human();\n        }\n\n        // 商业相关\n        else if (lowerPropName.includes(\"product\")) {\n          return faker.commerce.productName();\n        } else if (\n          lowerPropName.includes(\"price\") ||\n          lowerPropName.includes(\"amount\") ||\n          lowerPropName.includes(\"cost\")\n        ) {\n          return faker.commerce.price();\n        } else if (lowerPropName.includes(\"currency\")) {\n          return faker.finance.currencyCode();\n        } else if (\n          lowerPropName.includes(\"sku\") ||\n          lowerPropName.includes(\"code\")\n        ) {\n          return faker.string.alphanumeric(8).toUpperCase();\n        }\n\n        // 内容相关\n        else if (\n          lowerPropName.includes(\"description\") ||\n          lowerPropName.includes(\"desc\")\n        ) {\n          return faker.lorem.sentence();\n        } else if (\n          lowerPropName.includes(\"comment\") ||\n          lowerPropName.includes(\"note\") ||\n          lowerPropName.includes(\"remark\")\n        ) {\n          return faker.lorem.sentence();\n        } else if (\n          lowerPropName.includes(\"content\") ||\n          lowerPropName.includes(\"text\") ||\n          lowerPropName.includes(\"body\")\n        ) {\n          return faker.lorem.paragraph();\n        } else if (\n          lowerPropName.includes(\"summary\") ||\n          lowerPropName.includes(\"excerpt\")\n        ) {\n          return faker.lorem.sentence();\n        }\n\n        // 状态和分类\n        else if (lowerPropName.includes(\"status\")) {\n          return faker.helpers.arrayElement([\n            \"active\",\n            \"inactive\",\n            \"pending\",\n            \"completed\",\n            \"draft\",\n            \"published\",\n          ]);\n        } else if (lowerPropName.includes(\"type\")) {\n          return faker.helpers.arrayElement([\n            \"standard\",\n            \"premium\",\n            \"basic\",\n            \"advanced\",\n          ]);\n        } else if (\n          lowerPropName.includes(\"tag\") ||\n          lowerPropName.includes(\"category\")\n        ) {\n          return faker.helpers.arrayElement([\n            \"technology\",\n            \"business\",\n            \"design\",\n            \"marketing\",\n            \"finance\",\n            \"education\",\n          ]);\n        } else if (lowerPropName.includes(\"priority\")) {\n          return faker.helpers.arrayElement([\n            \"low\",\n            \"medium\",\n            \"high\",\n            \"urgent\",\n          ]);\n        }\n\n        // 个人信息\n        else if (lowerPropName.includes(\"age\")) {\n          return faker.number.int({ min: 18, max: 80 }).toString();\n        } else if (\n          lowerPropName.includes(\"gender\") ||\n          lowerPropName.includes(\"sex\")\n        ) {\n          return faker.person.gender();\n        } else if (\n          lowerPropName.includes(\"birthday\") ||\n          lowerPropName.includes(\"birth\")\n        ) {\n          return faker.date.birthdate().toISOString().split(\"T\")[0];\n        }\n\n        // ID 相关\n        else if (lowerPropName.includes(\"id\") && lowerPropName.length <= 5) {\n          return faker.string.numeric(8);\n        } else if (\n          lowerPropName.includes(\"uuid\") ||\n          lowerPropName.includes(\"guid\")\n        ) {\n          return faker.string.uuid();\n        }\n\n        // 其他常见字段\n        else if (lowerPropName.includes(\"version\")) {\n          return faker.system.semver();\n        } else if (\n          lowerPropName.includes(\"count\") ||\n          lowerPropName.includes(\"number\") ||\n          lowerPropName.includes(\"num\")\n        ) {\n          return faker.number.int({ min: 1, max: 100 }).toString();\n        } else if (lowerPropName.includes(\"size\")) {\n          return faker.helpers.arrayElement([\"small\", \"medium\", \"large\"]);\n        } else if (lowerPropName.includes(\"format\")) {\n          return faker.helpers.arrayElement([\"json\", \"xml\", \"csv\", \"pdf\"]);\n        } else {\n          // 默认生成随机词语\n          return faker.lorem.words(2);\n        }\n      }\n    }\n\n    case \"number\":\n    case \"integer\": {\n      // 处理数字范围\n      if (\n        resolvedSchema.minimum !== undefined &&\n        resolvedSchema.maximum !== undefined\n      ) {\n        const min = resolvedSchema.minimum;\n        const max = resolvedSchema.maximum;\n        return type === \"integer\"\n          ? faker.number.int({ min, max })\n          : faker.number.float({ min, max, fractionDigits: 2 });\n      } else if (resolvedSchema.minimum !== undefined) {\n        const min = resolvedSchema.minimum;\n        const max = min + 1000;\n        return type === \"integer\"\n          ? faker.number.int({ min, max })\n          : faker.number.float({ min, max, fractionDigits: 2 });\n      } else if (resolvedSchema.maximum !== undefined) {\n        const max = resolvedSchema.maximum;\n        const min = Math.max(0, max - 1000);\n        return type === \"integer\"\n          ? faker.number.int({ min, max })\n          : faker.number.float({ min, max, fractionDigits: 2 });\n      } else {\n        return type === \"integer\"\n          ? faker.number.int({ min: 1, max: 100 })\n          : faker.number.float({ min: 1, max: 100, fractionDigits: 2 });\n      }\n    }\n\n    case \"boolean\":\n      return faker.datatype.boolean();\n\n    case \"array\": {\n      // 检查items定义\n      if (!resolvedSchema.items) {\n        return [];\n      }\n\n      // 生成 1-3 个元素的数组作为示例\n      const length = faker.number.int({ min: 1, max: 3 });\n      const result = [];\n\n      for (let i = 0; i < length; i++) {\n        const itemExample = generateExample(resolvedSchema.items, components, {\n          ...options,\n          currentDepth: currentDepth + 1,\n        });\n        result.push(itemExample);\n      }\n\n      return result;\n    }\n\n    case \"object\":\n    default: {\n      // 对于对象或未指定类型但有properties的情况\n      const result: Record<string, unknown> = {};\n\n      if (resolvedSchema.properties) {\n        // 遍历所有属性\n        for (const [propName, propSchema] of Object.entries(\n          resolvedSchema.properties,\n        )) {\n          // 跳过只读/只写属性（如果配置了）\n          if (\n            ((propSchema as OpenAPIV3.SchemaObject).readOnly &&\n              !includeReadOnly) ||\n            ((propSchema as OpenAPIV3.SchemaObject).writeOnly &&\n              !includeWriteOnly)\n          ) {\n            continue;\n          }\n\n          // 创建增强的 schema，包含属性名信息用于智能推断\n          const enhancedSchema = {\n            ...(propSchema as OpenAPIV3.SchemaObject),\n            title: (propSchema as OpenAPIV3.SchemaObject).title || propName,\n          };\n\n          // 递归生成属性值\n          result[propName] = generateExample(enhancedSchema, components, {\n            ...options,\n            currentDepth: currentDepth + 1,\n          });\n        }\n      }\n\n      return result;\n    }\n  }\n}\n",
      "type": "registry:lib",
      "target": "lib/generate-example.ts"
    },
    {
      "path": "registry/default/lib/i18n/I18nProvider.tsx",
      "content": "\"use client\";\n\nimport React, { createContext, useContext, useState } from \"react\";\nimport en from \"@/registry/default/lib/i18n/locales/en\";\nimport zh from \"@/registry/default/lib/i18n/locales/zh\";\n\ntype LocaleStrings = Record<string, string>;\nconst locales: Record<string, LocaleStrings> = { en, zh };\n\ninterface I18nContextProps {\n  locale: \"en\" | \"zh\";\n  setLocale: (locale: \"en\" | \"zh\") => void;\n  t: (key: string) => string;\n}\n\nconst I18nContext = createContext<I18nContextProps | undefined>(undefined);\n\nexport const I18nProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [locale, setLocale] = useState<\"en\" | \"zh\">(\"en\");\n\n  const t = (key: string): string => {\n    // 直接使用扁平结构查找，如果未找到则返回原key\n    return locales[locale]?.[key] || key;\n  };\n\n  return (\n    <I18nContext.Provider value={{ locale, setLocale, t }}>\n      {children}\n    </I18nContext.Provider>\n  );\n};\n\n// 创建一个默认的翻译函数，使用英文作为默认语言\nconst createDefaultTranslator = (defaultLocale: \"en\" | \"zh\" = \"en\") => {\n  return (key: string): string => {\n    return locales[defaultLocale]?.[key] || key;\n  };\n};\n\n// 重构后的 useI18n hook，支持在没有 provider 的情况下使用默认语言\nexport const useI18n = (): I18nContextProps => {\n  const context = useContext(I18nContext);\n\n  // 如果没有 provider，返回默认的 i18n 对象\n  if (!context) {\n    const defaultT = createDefaultTranslator(\"en\");\n    return {\n      locale: \"en\",\n      setLocale: () => {\n        console.warn(\n          \"useI18n: setLocale called outside of I18nProvider. Language switching is not available.\",\n        );\n      },\n      t: defaultT,\n    };\n  }\n\n  return context;\n};\n\n// 导出一个独立的翻译函数，可以在组件外部使用\nexport const t = createDefaultTranslator(\"en\");\n\n// 导出一个创建翻译函数的工厂函数\nexport const createTranslator = (locale: \"en\" | \"zh\" = \"en\") => {\n  return createDefaultTranslator(locale);\n};\n",
      "type": "registry:lib",
      "target": "lib/i18n/I18nProvider.tsx"
    },
    {
      "path": "registry/default/lib/i18n/index.ts",
      "content": "// 导出所有 i18n 相关的功能\nexport {\n  createTranslator,\n  I18nProvider,\n  t,\n  useI18n,\n} from \"./I18nProvider\";\nexport type { default as EnLocale } from \"./locales/en\";\nexport type { default as ZhLocale } from \"./locales/zh\";\n\n// 支持的语言类型\nexport type SupportedLocale = \"en\" | \"zh\";\n\n// 翻译函数类型\nexport type TranslationFunction = (key: string) => string;\n",
      "type": "registry:lib",
      "target": "lib/i18n/index.ts"
    },
    {
      "path": "registry/default/lib/i18n/locales/en.ts",
      "content": "const en = {\n  Required: \"Required\",\n  \"Search...\": \"Search...\",\n  Expand: \"Expand\",\n  Collapse: \"Collapse\",\n  GET: \"GET\",\n  POST: \"POST\",\n  PUT: \"PUT\",\n  DELETE: \"DELETE\",\n  PATCH: \"PATCH\",\n  OPTIONS: \"OPTIONS\",\n  HEAD: \"HEAD\",\n  Headers: \"Headers\",\n  \"Base URL\": \"Base URL\",\n  Parameters: \"Parameters\",\n  \"Query Parameters\": \"Query Parameters\",\n  \"Path Parameters\": \"Path Parameters\",\n  \"Cookie Parameters\": \"Cookie Parameters\",\n  \"Header Parameters\": \"Header Parameters\",\n  \"Request Body\": \"Request Body\",\n  Response: \"Response\",\n  Responses: \"Responses\",\n  Security: \"Security\",\n  Components: \"Components\",\n  Schemas: \"Schemas\",\n  \"Security Schemes\": \"Security Schemes\",\n  Examples: \"Examples\",\n  \"Try it out\": \"Try it out\",\n  Send: \"Send\",\n  Cancel: \"Cancel\",\n  \"Loading...\": \"Loading...\",\n  Status: \"Status\",\n  Error: \"Error\",\n  \"No content defined\": \"No content defined\",\n  \"Failed to resolve reference\": \"Failed to resolve reference\",\n  Optional: \"Optional\",\n  Default: \"Default\",\n  Format: \"Format\",\n  Pattern: \"Pattern\",\n  Min: \"Min\",\n  Max: \"Max\",\n  Example: \"Example\",\n  Schema: \"Schema\",\n  Type: \"Type\",\n  Unknown: \"Unknown\",\n  Authentication: \"Authentication\",\n  \"Select authentication method\": \"Select authentication method\",\n  \"No authentication\": \"No authentication\",\n  \"Request error\": \"Request error\",\n  \"Error sending request\": \"Error sending request\",\n  Version: \"Version\",\n  \"API Description\": \"API Description\",\n  \"Terms of Service\": \"Terms of Service\",\n  Contact: \"Contact\",\n  License: \"License\",\n  Name: \"Name\",\n  URL: \"URL\",\n  Email: \"Email\",\n  Identifier: \"Identifier\",\n  \"External Documentation\": \"External Documentation\",\n  deprecated: \"deprecated\",\n  \"Loading error\": \"Loading error\",\n  \"Enter OpenAPI spec URL\": \"Enter OpenAPI spec URL\",\n  \"You can use the input box above to enter any valid OpenAPI spec URL, the system will load it automatically.\":\n    \"You can use the input box above to enter any valid OpenAPI spec URL, the system will load it automatically.\",\n  \"Select example API\": \"Select example API\",\n  \"Request failed\": \"Request failed\",\n  \"Failed to load OpenAPI spec\": \"Failed to load OpenAPI spec\",\n  \"Unknown error\": \"Unknown error\",\n  \"GitHub repository\": \"GitHub repository\",\n  \"OAuth2 Flows\": \"OAuth2 Flows\",\n  \"API Key\": \"API Key\",\n  \"HTTP Authentication\": \"HTTP Authentication\",\n  \"OpenID Connect\": \"OpenID Connect\",\n  \"Name:\": \"Name:\",\n  \"In:\": \"In:\",\n  \"Scheme:\": \"Scheme:\",\n  \"Bearer Format:\": \"Bearer Format:\",\n  \"OpenID Connect URL:\": \"OpenID Connect URL:\",\n  \"Authorization URL:\": \"Authorization URL:\",\n  \"Token URL:\": \"Token URL:\",\n  \"Refresh URL:\": \"Refresh URL:\",\n  Scopes: \"Scopes\",\n  Scope: \"Scope\",\n  Description: \"Description\",\n  Flow: \"Flow\",\n  // Security scheme types\n  apiKey: \"API Key\",\n  http: \"HTTP\",\n  oauth2: \"OAuth2\",\n  openIdConnect: \"OpenID Connect\",\n  mutualTLS: \"Mutual TLS\",\n\n  // Server Variables translations\n  \"Default value:\": \"Default value:\",\n  \"Available values:\": \"Available values:\",\n\n  // Security Section translations\n  \"Global Requirements\": \"Global Requirements\",\n  \"API calls must satisfy ONE of the following security requirement sets:\":\n    \"API calls must satisfy ONE of the following security requirement sets:\",\n  \"Scopes:\": \"Scopes:\",\n  \"(No specific scopes required)\": \"(No specific scopes required)\",\n  \"Failed to resolve scheme:\": \"Failed to resolve scheme:\",\n  \"Security Requirements\": \"Security Requirements\",\n  \"Note: Multiple security requirements represent OR logic. Multiple schemes within a requirement represent AND logic.\":\n    \"Note: Multiple security requirements represent OR logic. Multiple schemes within a requirement represent AND logic.\",\n\n  // Webhook Display translations\n  \"Webhook:\": \"Webhook:\",\n\n  // Parameter Item translations\n  required: \"required\",\n  explode: \"explode\",\n  \"Hide details\": \"Hide details\",\n  \"Show details\": \"Show details\",\n\n  // ExamplesDisplay translations\n  \"[ExamplesDisplay] Failed to resolve example ref: %s for key %s\":\n    \"[ExamplesDisplay] Failed to resolve example ref: %s for key %s\",\n\n  // MediaTypeSelector translations\n  \"Switching media type to: %s\": \"Switching media type to: %s\",\n\n  // ServerDisplay translations\n  Variables: \"Variables\",\n  \"Default:\": \"Default:\",\n  \"Enum:\": \"Enum:\",\n\n  // SchemaConstraints translations\n  Constraints: \"Constraints\",\n  Minimum: \"Minimum\",\n  Maximum: \"Maximum\",\n  \"Min Length\": \"Min Length\",\n  \"Max Length\": \"Max Length\",\n  \"Min Items\": \"Min Items\",\n  \"Max Items\": \"Max Items\",\n  \"Unique Items\": \"Unique Items\",\n  \"Min Properties\": \"Min Properties\",\n  \"Max Properties\": \"Max Properties\",\n  \"(exclusive)\": \"(exclusive)\",\n\n  // Server component translations\n  \"Interpolated URL:\": \"Interpolated URL:\",\n  \"Server Variables:\": \"Server Variables:\",\n\n  // ResponsesSection translations\n  \"Missing component definitions required to resolve references\":\n    \"Missing component definitions required to resolve references\",\n  \"No responses defined\": \"No responses defined\",\n  \"Could not resolve selected response\": \"Could not resolve selected response\",\n\n  // CopyButton translations\n  \"Copy to clipboard\": \"Copy to clipboard\",\n  \"Copy failed:\": \"Copy failed:\",\n\n  // SecuritySchemeDisplay translations\n  \"Flows:\": \"Flows:\",\n  \"Details for mutualTLS not specifically rendered.\":\n    \"Details for mutualTLS not specifically rendered.\",\n  \"Unknown security scheme type:\": \"Unknown security scheme type:\",\n\n  // Component Type translations\n  schemas: \"schemas\",\n  responses: \"responses\",\n  parameters: \"parameters\",\n  examples: \"examples\",\n  requestBodies: \"requestBodies\",\n  headers: \"headers\",\n  securitySchemes: \"securitySchemes\",\n  links: \"links\",\n  callbacks: \"callbacks\",\n  pathItems: \"pathItems\",\n\n  // LinksSection translations\n  Links: \"Links\",\n  \"Failed to resolve link:\": \"Failed to resolve link:\",\n\n  // LinkItem translations\n  operationId: \"operationId\",\n  operationRef: \"operationRef\",\n  \"Hide Details\": \"Hide Details\",\n  \"Show Details\": \"Show Details\",\n  Server: \"Server\",\n\n  // ComponentItemsList translations\n  \"No items available\": \"No items available\",\n\n  // ParametersSection translations\n  \"Failed to resolve parameter:\": \"Failed to resolve parameter:\",\n\n  // RequestBodySection translations\n  \"Cannot resolve request body\": \"Cannot resolve request body\",\n  \"Request body has no content defined\": \"Request body has no content defined\",\n\n  // OpenApiLayout translations\n  \"Basic Information\": \"Basic Information\",\n  Servers: \"Servers\",\n  \"All Operations\": \"All Operations\",\n  'Operations \"%s\"': 'Operations \"%s\"',\n\n  // SchemaCompositionDisplay translations\n  \"All Of\": \"All Of\",\n  \"Any Of\": \"Any Of\",\n  \"One Of\": \"One Of\",\n  Not: \"Not\",\n  \"Reference:\": \"Reference:\",\n\n  // SchemaExampleView translations\n  \"Example Data\": \"Example Data\",\n  \"Schema not defined\": \"Schema not defined\",\n  \"Switched view mode to: %s\": \"Switched view mode to: %s\",\n\n  // ExampleDisplay translations\n  \"No example data provided\": \"No example data provided\",\n  \"XML formatting failed:\": \"XML formatting failed:\",\n\n  // ComponentDetail translations\n  \"Please select an item from the list.\":\n    \"Please select an item from the list.\",\n  \"Error: Selected item not found.\": \"Error: Selected item not found.\",\n  \"Cannot resolve security scheme reference.\":\n    \"Cannot resolve security scheme reference.\",\n  \"Error: Unknown component type\": \"Error: Unknown component type\",\n\n  // ResponseGroup translations\n  \"Response Headers\": \"Response Headers\",\n\n  // ResponseContentSection translations\n  Encoding: \"Encoding\",\n  \"Content Type\": \"Content Type\",\n  Style: \"Style\",\n  Explode: \"Explode\",\n  \"Allow Reserved\": \"Allow Reserved\",\n\n  // SchemaDisplay translations\n  \"Unknown or underspecified schema type.\":\n    \"Unknown or underspecified schema type.\",\n  \"Array 'items' definition is missing.\":\n    \"Array 'items' definition is missing.\",\n  \"Composition Schema\": \"Composition Schema\",\n\n  // ResponseItem translations\n  \"[unknown reference]\": \"[unknown reference]\",\n  \"Cannot display response %s: Reference %s failed to resolve.\":\n    \"Cannot display response %s: Reference %s failed to resolve.\",\n\n  // Additional generic translations\n  Webhook: \"Webhook\",\n  \"Additional information can be found here:\":\n    \"Additional information can be found here:\",\n  \"Specification Parse Error\": \"Specification Parse Error\",\n  \"Parsing specification...\": \"Parsing specification...\",\n  'No operations found with tag \"%s\"': 'No operations found with tag \"%s\"',\n  \"Reference Object\": \"Reference Object\",\n  \"API Documentation\": \"API Documentation\",\n  \"Search API...\": \"Search API...\",\n  Endpoints: \"Endpoints\",\n  \"Expand All\": \"Expand All\",\n  \"Collapse All\": \"Collapse All\",\n  \"Data Models\": \"Data Models\",\n\n  // Try It Out Panel translations\n  \"Request Parameters\": \"Request Parameters\",\n  \"Request Headers\": \"Request Headers\",\n  \"Sending...\": \"Sending...\",\n  \"Send Request\": \"Send Request\",\n  \"Add Header\": \"Add Header\",\n  Remove: \"Remove\",\n  \"Enter %s value\": \"Enter %s value\",\n  \"Header name\": \"Header name\",\n  Value: \"Value\",\n};\n\nexport default en;\n",
      "type": "registry:lib",
      "target": "lib/i18n/locales/en.ts"
    },
    {
      "path": "registry/default/lib/i18n/locales/zh.ts",
      "content": "const zh = {\n  Required: \"必填\",\n  \"Search...\": \"搜索...\",\n  Expand: \"展开\",\n  Collapse: \"收起\",\n  GET: \"获取\",\n  POST: \"提交\",\n  PUT: \"更新\",\n  DELETE: \"删除\",\n  PATCH: \"部分更新\",\n  OPTIONS: \"选项\",\n  HEAD: \"头部\",\n  Headers: \"请求头\",\n  \"Base URL\": \"基础URL\",\n  Parameters: \"参数\",\n  \"Query Parameters\": \"查询参数\",\n  \"Path Parameters\": \"路径参数\",\n  \"Cookie Parameters\": \"Cookie参数\",\n  \"Header Parameters\": \"请求头参数\",\n  \"Request Body\": \"请求体\",\n  Response: \"响应\",\n  Responses: \"响应\",\n  Security: \"安全设置\",\n  Components: \"数据模型\",\n  Schemas: \"架构\",\n  \"Security Schemes\": \"安全方案\",\n  Examples: \"示例\",\n  \"Try it out\": \"试一试\",\n  Send: \"发送\",\n  Cancel: \"取消\",\n  \"Loading...\": \"加载中...\",\n  Status: \"状态\",\n  Error: \"错误\",\n  \"No content defined\": \"未定义内容\",\n  \"Failed to resolve reference\": \"无法解析引用\",\n  Optional: \"可选\",\n  Default: \"默认值\",\n  Format: \"格式\",\n  Pattern: \"模式\",\n  Min: \"最小值\",\n  Max: \"最大值\",\n  Example: \"示例\",\n  Schema: \"数据结构\",\n  Type: \"类型\",\n  Unknown: \"未知\",\n  Authentication: \"认证\",\n  \"Select authentication method\": \"选择认证方式\",\n  \"No authentication\": \"不使用认证\",\n  \"Request error\": \"请求错误\",\n  \"Error sending request\": \"发送请求时出错\",\n  Version: \"版本\",\n  \"API Description\": \"接口说明\",\n  \"Terms of Service\": \"服务条款\",\n  Contact: \"联系方式\",\n  License: \"许可证\",\n  Name: \"名称\",\n  URL: \"链接\",\n  Email: \"邮箱\",\n  Identifier: \"标识符\",\n  \"External Documentation\": \"外部文档\",\n  deprecated: \"已弃用\",\n  \"Loading error\": \"加载错误\",\n  \"Enter OpenAPI spec URL\": \"输入OpenAPI规范URL\",\n  \"You can use the input box above to enter any valid OpenAPI spec URL, the system will load it automatically.\":\n    \"您可以使用上方的输入框输入任何有效的OpenAPI规范URL，系统会自动加载。\",\n  \"Select example API\": \"选择示例API\",\n  \"Request failed\": \"请求失败\",\n  \"Failed to load OpenAPI spec\": \"加载OpenAPI规范失败\",\n  \"Unknown error\": \"未知错误\",\n  \"GitHub repository\": \"GitHub 仓库\",\n\n  // Security scheme translations\n  \"OAuth2 Flows\": \"OAuth2 流程\",\n  \"API Key\": \"API 密钥\",\n  \"HTTP Authentication\": \"HTTP 认证\",\n  \"OpenID Connect\": \"OpenID 连接\",\n  \"Name:\": \"名称：\",\n  \"In:\": \"位置：\",\n  \"Scheme:\": \"方案：\",\n  \"Bearer Format:\": \"Bearer 格式：\",\n  \"OpenID Connect URL:\": \"OpenID 连接 URL：\",\n  \"Authorization URL:\": \"授权 URL：\",\n  \"Token URL:\": \"令牌 URL：\",\n  \"Refresh URL:\": \"刷新 URL：\",\n  Scopes: \"作用域\",\n  Scope: \"作用域\",\n  Description: \"描述\",\n  Flow: \"流程\",\n\n  // Security scheme types\n  apiKey: \"API 密钥\",\n  http: \"HTTP\",\n  oauth2: \"OAuth2\",\n  openIdConnect: \"OpenID 连接\",\n  mutualTLS: \"双向 TLS\",\n\n  // Server Variables translations\n  \"Default value:\": \"默认值：\",\n  \"Available values:\": \"可选值：\",\n\n  // Security Section translations\n  \"Global Requirements\": \"全局安全要求\",\n  \"API calls must satisfy ONE of the following security requirement sets:\":\n    \"API 调用必须满足以下安全要求集合之一：\",\n  \"Scopes:\": \"作用域：\",\n  \"(No specific scopes required)\": \"(不需要特定作用域)\",\n  \"Failed to resolve scheme:\": \"无法解析安全方案：\",\n  \"Security Requirements\": \"安全要求\",\n  \"Note: Multiple security requirements represent OR logic. Multiple schemes within a requirement represent AND logic.\":\n    \"注意：多个安全要求项表示可选择其中之一（OR 逻辑）。每个安全要求项内的多个方案表示需要全部满足（AND 逻辑）。\",\n\n  // Webhook Display translations\n  \"Webhook:\": \"Webhook：\",\n\n  // Parameter Item translations\n  required: \"必填\",\n  explode: \"展开\",\n  \"Hide details\": \"隐藏详情\",\n  \"Show details\": \"显示详情\",\n\n  // ExamplesDisplay translations\n  \"[ExamplesDisplay] Failed to resolve example ref: %s for key %s\":\n    \"[示例显示] 无法解析示例引用: %s，键名为 %s\",\n\n  // MediaTypeSelector translations\n  \"Switching media type to: %s\": \"切换媒体类型到: %s\",\n\n  // ServerDisplay translations\n  Variables: \"变量\",\n  \"Default:\": \"默认值:\",\n  \"Enum:\": \"枚举值:\",\n\n  // SchemaConstraints translations\n  Constraints: \"约束条件\",\n  Minimum: \"最小值\",\n  Maximum: \"最大值\",\n  \"Min Length\": \"最小长度\",\n  \"Max Length\": \"最大长度\",\n  \"Min Items\": \"最少项数\",\n  \"Max Items\": \"最多项数\",\n  \"Unique Items\": \"唯一项\",\n  \"Min Properties\": \"最少属性数\",\n  \"Max Properties\": \"最多属性数\",\n  \"(exclusive)\": \"(不含)\",\n\n  // Server component translations\n  \"Interpolated URL:\": \"插值后:\",\n  \"Server Variables:\": \"服务器变量:\",\n\n  // ResponsesSection translations\n  \"Missing component definitions required to resolve references\":\n    \"缺少解析引用所需的组件定义\",\n  \"No responses defined\": \"未定义响应\",\n  \"Could not resolve selected response\": \"无法解析所选响应\",\n\n  // CopyButton translations\n  \"Copy to clipboard\": \"复制到剪贴板\",\n  \"Copy failed:\": \"复制失败:\",\n\n  // Additional SecuritySchemeDisplay translations\n  \"Details for mutualTLS not specifically rendered.\":\n    \"互TLS的详细信息未特别渲染。\",\n  \"Unknown security scheme type:\": \"未知的安全方案类型：\",\n\n  // Component Type translations\n  schemas: \"数据模型\",\n  responses: \"响应\",\n  parameters: \"参数\",\n  examples: \"示例\",\n  requestBodies: \"请求体\",\n  headers: \"请求头\",\n  securitySchemes: \"安全方案\",\n  links: \"链接\",\n  callbacks: \"回调\",\n  pathItems: \"路径项\",\n\n  // LinksSection translations\n  Links: \"链接\",\n  \"Failed to resolve link:\": \"无法解析链接：\",\n\n  // LinkItem translations\n  operationId: \"操作ID\",\n  operationRef: \"操作引用\",\n  \"Hide Details\": \"隐藏详情\",\n  \"Show Details\": \"显示详情\",\n  Server: \"服务器\",\n\n  // ComponentItemsList translations\n  \"No items available\": \"无可用项目\",\n\n  // ParametersSection translations\n  \"Failed to resolve parameter:\": \"无法解析参数：\",\n\n  // RequestBodySection translations\n  \"Cannot resolve request body\": \"无法解析请求体\",\n  \"Request body has no content defined\": \"请求体无内容定义\",\n\n  // OpenApiLayout translations\n  \"Basic Information\": \"基本信息\",\n  Servers: \"服务器\",\n  \"All Operations\": \"所有接口\",\n  'Operations \"%s\"': '接口 \"%s\"',\n\n  // SchemaCompositionDisplay translations\n  \"All Of\": \"全部满足\",\n  \"Any Of\": \"任一满足\",\n  \"One Of\": \"仅一满足\",\n  Not: \"非\",\n  \"Reference:\": \"引用：\",\n\n  // SchemaExampleView translations\n  \"Schema not defined\": \"未定义模式\",\n  \"Switched view mode to: %s\": \"已切换视图模式到: %s\",\n\n  // ExampleDisplay translations\n  \"No example data provided\": \"未提供示例数据\",\n  \"XML formatting failed:\": \"XML格式化失败：\",\n\n  // ComponentDetail translations\n  \"Please select an item from the list.\": \"请从列表中选择一项。\",\n  \"Error: Selected item not found.\": \"错误：未找到所选项目。\",\n  \"Cannot resolve security scheme reference.\": \"无法解析安全方案引用。\",\n  \"Error: Unknown component type\": \"错误：未知组件类型\",\n\n  // ResponseGroup translations\n  \"Response Headers\": \"响应头\",\n\n  // ResponseContentSection translations\n  Encoding: \"编码\",\n  \"Content Type\": \"内容类型\",\n  Style: \"样式\",\n  Explode: \"展开\",\n  \"Allow Reserved\": \"允许保留字符\",\n\n  // SchemaDisplay translations\n  \"Unknown or underspecified schema type.\": \"未知或未指定的模式类型。\",\n  \"Array 'items' definition is missing.\": \"数组的 'items' 定义缺失。\",\n  \"Composition Schema\": \"组合模式\",\n\n  // ResponseItem translations\n  \"[unknown reference]\": \"[未知引用]\",\n  \"Cannot display response %s: Reference %s failed to resolve.\":\n    \"无法显示响应 %s: 引用 %s 未解析或解析失败。\",\n\n  // Additional generic translations\n  Webhook: \"Webhook\",\n  \"Additional information can be found here:\": \"可在此处找到额外信息：\",\n  \"Specification Parse Error\": \"规范解析错误\",\n  \"Parsing specification...\": \"正在解析规范...\",\n  'No operations found with tag \"%s\"': '没有找到标签为 \"%s\" 的操作',\n  \"Reference Object\": \"引用对象\",\n  \"API Documentation\": \"API 文档\",\n  \"Search API...\": \"搜索API...\",\n  Endpoints: \"接口\",\n  \"Expand All\": \"全部展开\",\n  \"Collapse All\": \"全部折叠\",\n  \"Data Models\": \"数据模型\",\n\n  // Try It Out Panel translations\n  \"Request Parameters\": \"请求参数\",\n  \"Request Headers\": \"请求头\",\n  \"Sending...\": \"发送中...\",\n  \"Send Request\": \"发送请求\",\n  \"Add Header\": \"添加请求头\",\n  Remove: \"删除\",\n  \"Enter %s value\": \"输入 %s 值\",\n  \"Header name\": \"请求头名称\",\n  Value: \"值\",\n};\n\nexport default zh;\n",
      "type": "registry:lib",
      "target": "lib/i18n/locales/zh.ts"
    },
    {
      "path": "registry/default/lib/resolve-ref.ts",
      "content": "import type { OpenAPIV3 } from \"openapi-types\";\n\n/**\n * 解析OpenAPI中的引用对象\n * @param obj 可能是引用对象的数据\n * @param components OpenAPI组件定义\n * @param category 可选的组件类别(schemas, parameters等)\n * @returns 解析后的对象或原始对象\n */\nexport function resolveRef<T>(\n  obj: T | OpenAPIV3.ReferenceObject | undefined,\n  components?: OpenAPIV3.ComponentsObject,\n  category?: string,\n): T | null {\n  if (!obj) return null;\n\n  // 检查是否是引用对象\n  if (typeof obj === \"object\" && obj !== null && \"$ref\" in obj) {\n    const refObj = obj as OpenAPIV3.ReferenceObject;\n    const refPath = refObj.$ref;\n\n    // 处理标准格式的引用 #/components/{category}/{name}\n    const refMatch = refPath.match(/^#\\/components\\/([^/]+)\\/(.+)$/);\n\n    if (refMatch && components) {\n      const [, refCategory, refName] = refMatch;\n\n      // 检查refName是否存在\n      if (!refName) {\n        console.warn(`引用名称为空: ${refPath}`);\n        return null;\n      }\n\n      // 如果指定了类别，并且与引用类别不一致，则发出警告\n      if (category && refCategory !== category) {\n        console.warn(`引用类别 ${refCategory} 与期望类别 ${category} 不一致`);\n      }\n\n      // 根据类别获取组件集合\n      const componentCollection =\n        components[refCategory as keyof OpenAPIV3.ComponentsObject];\n\n      if (componentCollection && typeof componentCollection === \"object\") {\n        // 解析引用对象\n        const resolved = componentCollection[refName];\n\n        if (resolved) {\n          // 检查是否是嵌套引用，如果是则递归解析\n          if (\n            typeof resolved === \"object\" &&\n            resolved !== null &&\n            \"$ref\" in resolved\n          ) {\n            return resolveRef<T>(\n              resolved as OpenAPIV3.ReferenceObject,\n              components,\n              category,\n            );\n          }\n          return resolved as unknown as T;\n        }\n      }\n\n      console.warn(`找不到引用 ${refPath}`);\n      return null;\n    }\n\n    console.warn(`不支持的引用格式 ${refPath}`);\n    return null;\n  }\n\n  // 如果不是引用对象，则返回原始对象\n  return obj as T;\n}\n",
      "type": "registry:lib",
      "target": "lib/resolve-ref.ts"
    },
    {
      "path": "registry/default/lib/schema-utils.ts",
      "content": "/**\n * Check if a schema is a reference object\n */\nexport function isReferenceObject(obj: unknown): obj is { $ref: string } {\n  return obj && typeof obj === \"object\" && \"$ref\" in obj;\n}\n\n/**\n * Check if a schema is a schema object\n */\nexport function isSchemaObjectNotRef(obj: unknown): boolean {\n  return obj && typeof obj === \"object\" && !(\"$ref\" in obj);\n}\n\n/**\n * Get the type of a schema\n */\nexport function getSchemaType(schema: Record<string, unknown>): string {\n  if (schema.type) {\n    return schema.type;\n  }\n  if (schema.allOf) {\n    return \"allOf\";\n  }\n  if (schema.oneOf) {\n    return \"oneOf\";\n  }\n  if (schema.anyOf) {\n    return \"anyOf\";\n  }\n  return \"object\";\n}\n\n/**\n * Check if a property is required in a schema\n */\nexport function isPropertyRequired(schema: Record<string, unknown>, propertyName: string): boolean {\n  return schema.required?.includes(propertyName) || false;\n}\n",
      "type": "registry:lib",
      "target": "lib/schema-utils.ts"
    },
    {
      "path": "registry/default/lib/type-utils.ts",
      "content": "/**\n * Type guards and utility functions for OpenAPI types\n */\n\nexport function isParameterObject(obj: unknown): boolean {\n  return obj && typeof obj === \"object\" && \"name\" in obj && \"in\" in obj;\n}\n\nexport function isRequestBodyObject(obj: unknown): boolean {\n  return obj && typeof obj === \"object\" && \"content\" in obj;\n}\n\nexport function isResponseObject(obj: unknown): boolean {\n  return obj && typeof obj === \"object\" && \"description\" in obj;\n}\n\nexport function isHeaderObject(obj: unknown): boolean {\n  return obj && typeof obj === \"object\" && !(\"name\" in obj) && !(\"in\" in obj);\n}\n\nexport function isSchemaObject(obj: unknown): boolean {\n  return obj && typeof obj === \"object\" && \"type\" in obj;\n}\n\nexport function isComponentObject(obj: unknown): boolean {\n  return obj && typeof obj === \"object\" && !(\"$ref\" in obj) && !(\"type\" in obj);\n}\n\nexport function isLinkObject(obj: unknown): boolean {\n  return (\n    obj &&\n    typeof obj === \"object\" &&\n    (\"operationRef\" in obj || \"operationId\" in obj)\n  );\n}\n\nexport function isExampleObject(obj: unknown): boolean {\n  return (\n    obj && typeof obj === \"object\" && (\"value\" in obj || \"externalValue\" in obj)\n  );\n}\n",
      "type": "registry:lib",
      "target": "lib/type-utils.ts"
    }
  ]
}