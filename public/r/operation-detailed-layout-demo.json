{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "operation-detailed-layout-demo",
  "type": "registry:example",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/operation-detailed-layout.json"
  ],
  "files": [
    {
      "path": "registry/default/example/operation-detailed-layout-demo.tsx",
      "content": "\"use client\";\n\nimport type { OpenAPIV3 } from 'openapi-types';\nimport { OperationDetailedLayout } from \"@/registry/default/ui/operation-detailed-layout\";\n\nimport { useState } from \"react\";\n\nconst sampleSpec: OpenAPIV3.Document = {\n  openapi: \"3.0.0\",\n  info: {\n    title: \"Sample API\",\n    version: \"1.0.0\",\n    description: \"A sample API for demonstration\"\n  },\n  servers: [\n    {\n      url: \"https://api.example.com/v1\",\n      description: \"Production server\"\n    }\n  ],\n  paths: {\n    \"/users\": {\n      get: {\n        operationId: \"getUsers\",\n        summary: \"Get all users\",\n        description: \"Retrieve a list of all users\",\n        tags: [\"Users\"],\n        parameters: [\n          {\n            name: \"limit\",\n            in: \"query\" as const,\n            description: \"Maximum number of users to return\",\n            schema: { type: \"integer\" as const, minimum: 1, maximum: 100, default: 10 }\n          },\n          {\n            name: \"offset\",\n            in: \"query\" as const,\n            description: \"Number of users to skip\",\n            schema: { type: \"integer\" as const, minimum: 0, default: 0 }\n          }\n        ],\n        responses: {\n          \"200\": {\n            description: \"Successful response\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\" as const,\n                  items: {\n                    type: \"object\" as const,\n                    properties: {\n                      id: { type: \"integer\" as const },\n                      name: { type: \"string\" as const },\n                      email: { type: \"string\" as const }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      post: {\n        operationId: \"createUser\",\n        summary: \"Create a new user\",\n        description: \"Create a new user account\",\n        tags: [\"Users\"],\n        requestBody: {\n          required: true,\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\" as const,\n                properties: {\n                  name: { type: \"string\" as const },\n                  email: { type: \"string\" as const }\n                },\n                required: [\"name\", \"email\"]\n              }\n            }\n          }\n        },\n        responses: {\n          \"201\": {\n            description: \"User created successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\" as const,\n                  properties: {\n                    id: { type: \"integer\" as const },\n                    name: { type: \"string\" as const },\n                    email: { type: \"string\" as const }\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            description: \"Bad request\"\n          }\n        }\n      }\n    },\n    \"/users/{id}\": {\n      get: {\n        operationId: \"getUserById\",\n        summary: \"Get user by ID\",\n        description: \"Retrieve a specific user by their ID\",\n        tags: [\"Users\"],\n        parameters: [\n          {\n            name: \"id\",\n            in: \"path\" as const,\n            required: true,\n            schema: { type: \"integer\" as const },\n            description: \"User ID\"\n          }\n        ],\n        responses: {\n          \"200\": {\n            description: \"Successful response\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\" as const,\n                  properties: {\n                    id: { type: \"integer\" as const },\n                    name: { type: \"string\" as const },\n                    email: { type: \"string\" as const }\n                  }\n                }\n              }\n            }\n          },\n          \"404\": {\n            description: \"User not found\"\n          }\n        }\n      }\n    }\n  }\n};\n\nexport default function OperationDetailedLayoutDemo() {\n  const [selectedPath, setSelectedPath] = useState<string | null>(\"/users\");\n  const [selectedMethod, setSelectedMethod] = useState<string | null>(\"GET\");\n\n  const handleSelectOperation = (path: string, method: string, operation: any) => {\n    setSelectedPath(path);\n    setSelectedMethod(method.toUpperCase());\n    console.log(\"Selected operation:\", { path, method, operation });\n  };\n\n  return (\n    <div className=\"w-full h-screen\">\n      <div className=\"mb-4 p-4 bg-muted rounded-lg\">\n        <h3 className=\"text-lg font-semibold mb-2\">当前选择的操作</h3>\n        <p className=\"text-sm text-muted-foreground\">\n          路径: <code className=\"bg-background px-1 rounded\">{selectedPath || \"无\"}</code>\n        </p>\n        <p className=\"text-sm text-muted-foreground\">\n          方法: <code className=\"bg-background px-1 rounded\">{selectedMethod || \"无\"}</code>\n        </p>\n        <div className=\"mt-2 flex gap-2\">\n          <button\n            onClick={() => handleSelectOperation(\"/users\", \"GET\", {})}\n            className=\"px-3 py-1 text-xs bg-primary text-primary-foreground rounded\"\n          >\n            选择 GET /users\n          </button>\n          <button\n            onClick={() => handleSelectOperation(\"/users\", \"POST\", {})}\n            className=\"px-3 py-1 text-xs bg-primary text-primary-foreground rounded\"\n          >\n            选择 POST /users\n          </button>\n          <button\n            onClick={() => handleSelectOperation(\"/users/{id}\", \"GET\", {})}\n            className=\"px-3 py-1 text-xs bg-primary text-primary-foreground rounded\"\n          >\n            选择 GET /users/&#123;id&#125;\n          </button>\n        </div>\n      </div>\n\n      <OperationDetailedLayout\n        spec={sampleSpec}\n        selectedPath={selectedPath}\n        selectedMethod={selectedMethod}\n        onSelectOperation={handleSelectOperation}\n        className=\"border rounded-lg\"\n      />\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": "components/example/operation-detailed-layout-demo.tsx"
    }
  ]
}