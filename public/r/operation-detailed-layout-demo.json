{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "operation-detailed-layout-demo",
  "type": "registry:example",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/operation-detailed-layout.json"
  ],
  "files": [
    {
      "path": "registry/default/example/operation-detailed-layout-demo.tsx",
      "content": "\"use client\";\n\nimport { OperationDetailedLayout } from \"@/registry/default/ui/operation-detailed-layout\";\nimport type { OpenAPIV3 } from \"openapi-types\";\nimport { useState } from \"react\";\n\n// Mock OpenAPI specification for demo\nconst mockSpec: OpenAPIV3.Document = {\n  openapi: \"3.0.0\",\n  info: {\n    title: \"E-commerce API\",\n    version: \"2.0.0\",\n    description: \"Advanced e-commerce platform API with comprehensive features\"\n  },\n  servers: [\n    {\n      url: \"https://api.ecommerce.example.com/v2\",\n      description: \"Production server\"\n    },\n    {\n      url: \"https://staging-api.ecommerce.example.com/v2\",\n      description: \"Staging server\"\n    }\n  ],\n  paths: {\n    \"/users/{id}\": {\n      get: {\n        tags: [\"User Management\"],\n        operationId: \"getUserById\",\n        summary: \"Get user details\",\n        description: \"Retrieve detailed information about a specific user by ID, including profile data, preferences, and activity records.\",\n        parameters: [\n          {\n            name: \"id\",\n            in: \"path\",\n            required: true,\n            schema: {\n              type: \"string\",\n              pattern: \"^[0-9]+$\"\n            },\n            description: \"The unique identifier of the user\",\n            example: \"12345\"\n          },\n          {\n            name: \"include\",\n            in: \"query\",\n            required: false,\n            schema: {\n              type: \"array\",\n              items: {\n                type: \"string\",\n                enum: [\"profile\", \"preferences\", \"activity\", \"statistics\"]\n              }\n            },\n            description: \"Additional data fields to include in the response\",\n            example: [\"profile\", \"preferences\"]\n          }\n        ],\n        responses: {\n          \"200\": {\n            description: \"Successfully retrieved user information\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    id: { type: \"string\" },\n                    name: { type: \"string\" },\n                    email: { type: \"string\", format: \"email\" },\n                    avatar: { type: \"string\", format: \"uri\" },\n                    profile: {\n                      type: \"object\",\n                      properties: {\n                        bio: { type: \"string\" },\n                        location: { type: \"string\" },\n                        website: { type: \"string\", format: \"uri\" }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"404\": {\n            description: \"User not found\"\n          }\n        }\n      },\n      put: {\n        tags: [\"User Management\"],\n        operationId: \"updateUser\",\n        summary: \"Update user information\",\n        description: \"Update user profile information and preferences\",\n        parameters: [\n          {\n            name: \"id\",\n            in: \"path\",\n            required: true,\n            schema: { type: \"string\" }\n          }\n        ],\n        requestBody: {\n          required: true,\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  name: { type: \"string\" },\n                  email: { type: \"string\", format: \"email\" },\n                  avatar: { type: \"string\", format: \"uri\" }\n                }\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"User updated successfully\"\n          },\n          \"404\": {\n            description: \"User not found\"\n          }\n        }\n      },\n      delete: {\n        tags: [\"User Management\"],\n        operationId: \"deleteUser\",\n        summary: \"Delete user account\",\n        description: \"Permanently delete a user account and all associated data\",\n        parameters: [\n          {\n            name: \"id\",\n            in: \"path\",\n            required: true,\n            schema: { type: \"string\" }\n          }\n        ],\n        responses: {\n          \"204\": {\n            description: \"User deleted successfully\"\n          },\n          \"404\": {\n            description: \"User not found\"\n          }\n        }\n      }\n    }\n  },\n  components: {\n    schemas: {\n      User: {\n        type: \"object\",\n        properties: {\n          id: { type: \"string\" },\n          name: { type: \"string\" },\n          email: { type: \"string\", format: \"email\" }\n        }\n      }\n    }\n  }\n};\n\nexport default function OperationDetailedLayoutDemo() {\n  const [selectedPath, setSelectedPath] = useState<string>(\"/users/{id}\");\n  const [selectedMethod, setSelectedMethod] = useState<string>(\"get\");\n\n  return (\n    <div className=\"w-full h-screen\">\n      <OperationDetailedLayout\n        spec={mockSpec}\n        selectedPath={selectedPath}\n        selectedMethod={selectedMethod}\n        onSelectOperation={(path, method, operation) => {\n          setSelectedPath(path);\n          setSelectedMethod(method);\n          console.log(\"Selected operation:\", path, method, operation);\n        }}\n        showCodegen={false}\n        showTryPanel={false}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": "components/example/operation-detailed-layout-demo.tsx"
    }
  ]
}