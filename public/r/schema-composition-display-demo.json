{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "schema-composition-display-demo",
  "type": "registry:example",
  "dependencies": [
    "openapi-types"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/schema-composition-display.json"
  ],
  "files": [
    {
      "path": "registry/default/example/schema-composition-display-demo.tsx",
      "content": "import { SchemaCompositionDisplay } from \"@/registry/default/ui/schema-composition-display\";\nimport type { OpenAPIV3 } from \"openapi-types\";\n\nexport default function SchemaCompositionDisplayDemo() {\n  // allOf 组合 - 用户完整信息\n  const userAllOfSchema = {\n    allOf: [\n      {\n        type: \"object\" as const,\n        properties: {\n          id: {\n            type: \"string\" as const,\n            description: \"用户唯一标识符\",\n            example: \"user_123e4567-e89b-12d3-a456-426614174000\",\n          },\n          email: {\n            type: \"string\" as const,\n            format: \"email\" as const,\n            description: \"用户邮箱地址\",\n            example: \"john.doe@example.com\",\n          },\n          name: {\n            type: \"string\" as const,\n            description: \"用户姓名\",\n            example: \"John Doe\",\n          },\n        },\n      },\n      {\n        type: \"object\" as const,\n        properties: {\n          profile: {\n            type: \"object\" as const,\n            properties: {\n              bio: {\n                type: \"string\" as const,\n                description: \"个人简介\",\n                example: \"资深软件工程师\",\n              },\n              avatar: {\n                type: \"string\" as const,\n                format: \"uri\" as const,\n                description: \"头像 URL\",\n                example: \"https://cdn.example.com/avatars/john-doe.jpg\",\n              },\n            },\n          },\n          preferences: {\n            type: \"object\" as const,\n            properties: {\n              language: {\n                type: \"string\" as const,\n                description: \"首选语言\",\n                example: \"zh-CN\",\n              },\n              timezone: {\n                type: \"string\" as const,\n                description: \"时区设置\",\n                example: \"Asia/Shanghai\",\n              },\n            },\n          },\n        },\n      },\n    ] as OpenAPIV3.SchemaObject[],\n  };\n\n  // oneOf 组合 - 支付方式\n  const paymentMethodOneOfSchema = {\n    oneOf: [\n      {\n        type: \"object\" as const,\n        title: \"信用卡支付\",\n        required: [\"type\", \"cardNumber\", \"expiryDate\", \"cvv\"],\n        properties: {\n          type: {\n            type: \"string\" as const,\n            enum: [\"credit_card\"],\n            example: \"credit_card\",\n          },\n          cardNumber: {\n            type: \"string\" as const,\n            pattern: \"^[0-9]{16}$\",\n            description: \"16位信用卡号\",\n            example: \"4242424242424242\",\n          },\n          expiryDate: {\n            type: \"string\" as const,\n            pattern: \"^(0[1-9]|1[0-2])/[0-9]{2}$\",\n            description: \"过期日期 MM/YY\",\n            example: \"12/27\",\n          },\n          cvv: {\n            type: \"string\" as const,\n            pattern: \"^[0-9]{3,4}$\",\n            description: \"安全码\",\n            example: \"123\",\n          },\n          holderName: {\n            type: \"string\" as const,\n            description: \"持卡人姓名\",\n            example: \"John Doe\",\n          },\n        },\n      },\n      {\n        type: \"object\" as const,\n        title: \"支付宝支付\",\n        required: [\"type\", \"alipayAccount\"],\n        properties: {\n          type: {\n            type: \"string\" as const,\n            enum: [\"alipay\"],\n            example: \"alipay\",\n          },\n          alipayAccount: {\n            type: \"string\" as const,\n            description: \"支付宝账号\",\n            example: \"john.doe@example.com\",\n          },\n          returnUrl: {\n            type: \"string\" as const,\n            format: \"uri\" as const,\n            description: \"支付完成后的回调 URL\",\n            example: \"https://example.com/payment/callback\",\n          },\n        },\n      },\n      {\n        type: \"object\" as const,\n        title: \"微信支付\",\n        required: [\"type\", \"openId\"],\n        properties: {\n          type: {\n            type: \"string\" as const,\n            enum: [\"wechat_pay\"],\n            example: \"wechat_pay\",\n          },\n          openId: {\n            type: \"string\" as const,\n            description: \"微信用户 OpenID\",\n            example: \"oUpF8uMuAJO_M2pxb1Q9zNjWeS6o\",\n          },\n          appId: {\n            type: \"string\" as const,\n            description: \"微信应用 ID\",\n            example: \"wx1234567890abcdef\",\n          },\n        },\n      },\n    ] as OpenAPIV3.SchemaObject[],\n  };\n\n  // anyOf 组合 - 联系方式\n  const contactAnyOfSchema = {\n    anyOf: [\n      {\n        type: \"object\" as const,\n        title: \"邮箱联系\",\n        properties: {\n          email: {\n            type: \"string\" as const,\n            format: \"email\" as const,\n            description: \"邮箱地址\",\n            example: \"contact@example.com\",\n          },\n          emailVerified: {\n            type: \"boolean\" as const,\n            description: \"邮箱是否已验证\",\n            example: true,\n          },\n        },\n      },\n      {\n        type: \"object\" as const,\n        title: \"电话联系\",\n        properties: {\n          phone: {\n            type: \"string\" as const,\n            pattern: \"^\\\\+?[1-9]\\\\d{1,14}$\",\n            description: \"电话号码\",\n            example: \"+86 138-0013-8000\",\n          },\n          phoneVerified: {\n            type: \"boolean\" as const,\n            description: \"电话是否已验证\",\n            example: true,\n          },\n        },\n      },\n      {\n        type: \"object\" as const,\n        title: \"地址联系\",\n        properties: {\n          address: {\n            type: \"object\" as const,\n            properties: {\n              street: {\n                type: \"string\" as const,\n                description: \"街道地址\",\n                example: \"中关村大街1号\",\n              },\n              city: {\n                type: \"string\" as const,\n                description: \"城市\",\n                example: \"北京市\",\n              },\n              postalCode: {\n                type: \"string\" as const,\n                description: \"邮政编码\",\n                example: \"100080\",\n              },\n            },\n          },\n        },\n      },\n    ] as OpenAPIV3.SchemaObject[],\n  };\n\n  // 复杂组合 - 产品变体\n  const productVariantComplexSchema = {\n    allOf: [\n      {\n        type: \"object\" as const,\n        title: \"基础产品信息\",\n        required: [\"id\", \"name\", \"price\"],\n        properties: {\n          id: {\n            type: \"string\" as const,\n            description: \"产品 ID\",\n            example: \"prod_clothing_001\",\n          },\n          name: {\n            type: \"string\" as const,\n            description: \"产品名称\",\n            example: \"经典棉质 T 恤\",\n          },\n          description: {\n            type: \"string\" as const,\n            description: \"产品描述\",\n            example: \"100% 纯棉材质，舒适透气，适合日常穿着\",\n          },\n          price: {\n            type: \"number\" as const,\n            description: \"产品价格（分）\",\n            example: 9900,\n          },\n          currency: {\n            type: \"string\" as const,\n            description: \"货币代码\",\n            example: \"CNY\",\n          },\n        },\n      },\n      {\n        oneOf: [\n          {\n            type: \"object\" as const,\n            title: \"服装变体\",\n            properties: {\n              category: {\n                type: \"string\" as const,\n                enum: [\"clothing\"],\n                example: \"clothing\",\n              },\n              size: {\n                type: \"string\" as const,\n                enum: [\"XS\", \"S\", \"M\", \"L\", \"XL\", \"XXL\"],\n                description: \"尺码\",\n                example: \"M\",\n              },\n              color: {\n                type: \"string\" as const,\n                description: \"颜色\",\n                example: \"黑色\",\n              },\n              material: {\n                type: \"string\" as const,\n                description: \"材质\",\n                example: \"100% 纯棉\",\n              },\n              careInstructions: {\n                type: \"array\" as const,\n                items: {\n                  type: \"string\" as const,\n                },\n                description: \"护理说明\",\n                example: [\"机洗\", \"低温烘干\", \"不可漂白\"],\n              },\n            },\n          },\n          {\n            type: \"object\" as const,\n            title: \"电子产品变体\",\n            properties: {\n              category: {\n                type: \"string\" as const,\n                enum: [\"electronics\"],\n                example: \"electronics\",\n              },\n              model: {\n                type: \"string\" as const,\n                description: \"型号\",\n                example: \"iPhone 15 Pro\",\n              },\n              storage: {\n                type: \"string\" as const,\n                enum: [\"128GB\", \"256GB\", \"512GB\", \"1TB\"],\n                description: \"存储容量\",\n                example: \"256GB\",\n              },\n              color: {\n                type: \"string\" as const,\n                description: \"颜色\",\n                example: \"深空黑色\",\n              },\n              warranty: {\n                type: \"object\" as const,\n                properties: {\n                  duration: {\n                    type: \"integer\" as const,\n                    description: \"保修期（月）\",\n                    example: 12,\n                  },\n                  type: {\n                    type: \"string\" as const,\n                    enum: [\"standard\", \"extended\"],\n                    description: \"保修类型\",\n                    example: \"standard\",\n                  },\n                },\n              },\n            },\n          },\n          {\n            type: \"object\" as const,\n            title: \"图书变体\",\n            properties: {\n              category: {\n                type: \"string\" as const,\n                enum: [\"books\"],\n                example: \"books\",\n              },\n              isbn: {\n                type: \"string\" as const,\n                pattern:\n                  \"^(?:ISBN(?:-1[03])?:? )?(?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})[- 0-9X]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)(?:97[89][- ]?)?[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]$\",\n                description: \"ISBN 编号\",\n                example: \"978-0-13-601970-1\",\n              },\n              author: {\n                type: \"string\" as const,\n                description: \"作者\",\n                example: \"Robert C. Martin\",\n              },\n              publisher: {\n                type: \"string\" as const,\n                description: \"出版社\",\n                example: \"Prentice Hall\",\n              },\n              language: {\n                type: \"string\" as const,\n                description: \"语言\",\n                example: \"中文\",\n              },\n              format: {\n                type: \"string\" as const,\n                enum: [\"hardcover\", \"paperback\", \"ebook\"],\n                description: \"版本格式\",\n                example: \"paperback\",\n              },\n            },\n          },\n        ],\n      },\n    ] as OpenAPIV3.SchemaObject[],\n  };\n\n  // 嵌套组合 - API 响应\n  const apiResponseNestedSchema = {\n    allOf: [\n      {\n        type: \"object\" as const,\n        title: \"基础响应结构\",\n        required: [\"success\", \"timestamp\"],\n        properties: {\n          success: {\n            type: \"boolean\" as const,\n            description: \"请求是否成功\",\n            example: true,\n          },\n          timestamp: {\n            type: \"string\" as const,\n            format: \"date-time\" as const,\n            description: \"响应时间戳\",\n            example: \"2024-03-15T14:30:00Z\",\n          },\n          requestId: {\n            type: \"string\" as const,\n            description: \"请求追踪 ID\",\n            example: \"req_789abc12-def3-4567\",\n          },\n        },\n      },\n      {\n        oneOf: [\n          {\n            type: \"object\" as const,\n            title: \"成功响应\",\n            properties: {\n              data: {\n                anyOf: [\n                  {\n                    type: \"object\" as const,\n                    title: \"单个对象\",\n                    description: \"返回单个数据对象\",\n                  },\n                  {\n                    type: \"array\" as const,\n                    title: \"对象数组\",\n                    description: \"返回数据对象数组\",\n                    items: {\n                      type: \"object\" as const,\n                    },\n                  },\n                ],\n              },\n              message: {\n                type: \"string\" as const,\n                description: \"成功消息\",\n                example: \"操作完成\",\n              },\n            },\n          },\n          {\n            type: \"object\" as const,\n            title: \"错误响应\",\n            properties: {\n              error: {\n                type: \"object\" as const,\n                required: [\"code\", \"message\"],\n                properties: {\n                  code: {\n                    type: \"string\" as const,\n                    description: \"错误代码\",\n                    example: \"VALIDATION_ERROR\",\n                  },\n                  message: {\n                    type: \"string\" as const,\n                    description: \"错误描述\",\n                    example: \"请求参数验证失败\",\n                  },\n                  details: {\n                    type: \"array\" as const,\n                    items: {\n                      type: \"object\" as const,\n                      properties: {\n                        field: {\n                          type: \"string\" as const,\n                          description: \"错误字段\",\n                          example: \"email\",\n                        },\n                        message: {\n                          type: \"string\" as const,\n                          description: \"字段错误描述\",\n                          example: \"邮箱格式不正确\",\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        ],\n      },\n    ] as OpenAPIV3.SchemaObject[],\n  };\n\n  return (\n    <div className=\"space-y-8 min-w-md\">\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">allOf 组合 - 用户完整信息</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          使用 allOf 组合多个 Schema，创建包含基础信息和扩展信息的完整用户模型\n        </p>\n        <SchemaCompositionDisplay\n          keyword=\"allOf\"\n          subschemas={userAllOfSchema.allOf}\n          currentDepth={0}\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">oneOf 组合 - 支付方式选择</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          使用 oneOf 定义多种互斥的支付方式，每种方式有不同的必需字段\n        </p>\n        <SchemaCompositionDisplay\n          keyword=\"oneOf\"\n          subschemas={paymentMethodOneOfSchema.oneOf}\n          currentDepth={0}\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">anyOf 组合 - 联系方式</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          使用 anyOf 定义多种可选的联系方式，可以同时提供多种联系方式\n        </p>\n        <SchemaCompositionDisplay\n          keyword=\"anyOf\"\n          subschemas={contactAnyOfSchema.anyOf}\n          currentDepth={0}\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">复杂组合 - 产品变体</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          结合 allOf 和 oneOf 创建复杂的产品变体模型，支持不同类别的产品规格\n        </p>\n        <SchemaCompositionDisplay\n          keyword=\"allOf\"\n          subschemas={productVariantComplexSchema.allOf}\n          currentDepth={0}\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">嵌套组合 - API 响应结构</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          多层嵌套的 Schema 组合，定义灵活的 API\n          响应格式，支持成功和错误两种情况\n        </p>\n        <SchemaCompositionDisplay\n          keyword=\"allOf\"\n          subschemas={apiResponseNestedSchema.allOf}\n          currentDepth={0}\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": "components/example/schema-composition-display-demo.tsx"
    }
  ]
}