{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "response-content-section-demo",
  "type": "registry:example",
  "dependencies": [
    "openapi-types"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/response-content-section"
  ],
  "files": [
    {
      "path": "registry/example/response-content-section-demo.tsx",
      "content": "\"use client\";\n\nimport type { OpenAPIV3 } from 'openapi-types';\nimport { I18nProvider } from \"@/lib/i18n/I18nProvider\";\nimport { ResponseContentSection } from \"@/registry/pivot/response-content-section\";\n\n// 示例 OpenAPI 规范\nconst exampleSpec: OpenAPIV3.Document = {\n  openapi: \"3.0.0\",\n  info: {\n    title: \"Example API\",\n    version: \"1.0.0\",\n  },\n  paths: {\n    \"/users/{id}\": {\n      get: {\n        summary: \"Get user by ID\",\n        parameters: [\n          {\n            name: \"id\",\n            in: \"path\",\n            required: true,\n            schema: { type: \"string\" as const },\n          },\n        ],\n        responses: {\n          \"200\": {\n            description: \"Successful response\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\" as const,\n                  properties: {\n                    id: { type: \"string\" as const },\n                    name: { type: \"string\" as const },\n                    email: { type: \"string\" as const },\n                  },\n                },\n                example: {\n                  id: \"123\",\n                  name: \"John Doe\",\n                  email: \"john@example.com\",\n                },\n              },\n              \"application/xml\": {\n                schema: {\n                  type: \"object\" as const,\n                  xml: { name: \"User\" },\n                },\n                example: `<?xml version=\"1.0\"?>\n<User>\n  <id>123</id>\n  <name>John Doe</name>\n  <email>john@example.com</email>\n</User>`,\n              },\n            },\n          },\n          \"400\": {\n            description: \"Bad request\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\" as const,\n                  properties: {\n                    error: { type: \"string\" as const },\n                    message: { type: \"string\" as const },\n                  },\n                },\n                examples: {\n                  \"invalid_id\": {\n                    summary: \"Invalid ID format\",\n                    value: {\n                      error: \"INVALID_ID\",\n                      message: \"User ID must be a valid UUID\",\n                    },\n                  },\n                  \"missing_id\": {\n                    summary: \"Missing ID\",\n                    value: {\n                      error: \"MISSING_ID\",\n                      message: \"User ID is required\",\n                    },\n                  },\n                },\n              },\n            },\n          },\n          \"500\": {\n            description: \"Internal server error\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\" as const,\n                  properties: {\n                    error: { type: \"string\" as const },\n                    message: { type: \"string\" as const },\n                    timestamp: { type: \"string\" as const },\n                  },\n                },\n                example: {\n                  error: \"INTERNAL_ERROR\",\n                  message: \"An unexpected error occurred\",\n                  timestamp: \"2024-03-15T10:30:00Z\",\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n} as OpenAPIV3.Document;\n\nexport default function ResponseContentSectionDemo() {\n  // 从 spec 中提取响应内容\n  const getResponseContent = (statusCode: string) => {\n    const operation = exampleSpec.paths[\"/users/{id}\"]?.get;\n    const response = operation?.responses?.[statusCode];\n\n    // 处理引用对象\n    if (response && typeof response === 'object' && '$ref' in response) {\n      // 这里应该解析引用，但为了简化 demo，我们返回空对象\n      return {};\n    }\n\n    return (response as any)?.content || {};\n  };\n\n  return (\n    <I18nProvider>\n      <div className=\"space-y-6 p-6\">\n        <h2 className=\"text-2xl font-bold\">Response Content Section Demo</h2>\n\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">200 Response</h3>\n          <ResponseContentSection\n            content={getResponseContent(\"200\")}\n            components={exampleSpec.components}\n          />\n        </div>\n\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">400 Response</h3>\n          <ResponseContentSection\n            content={getResponseContent(\"400\")}\n            components={exampleSpec.components}\n          />\n        </div>\n\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">500 Response</h3>\n          <ResponseContentSection\n            content={getResponseContent(\"500\")}\n            components={exampleSpec.components}\n          />\n        </div>\n      </div>\n    </I18nProvider>\n  );\n}\n",
      "type": "registry:example",
      "target": "components/example/response-content-section-demo.tsx"
    }
  ]
}