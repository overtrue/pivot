{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "headers-section",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/header-item.json",
    "https://pivotkit.vercel.app/r/style-badge.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/headers-section.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useI18n } from \"@/registry/default/lib/i18n\";\nimport type { OpenAPIV3 } from \"openapi-types\";\n\nimport { resolveRef } from \"@/registry/default/lib/resolve-ref\";\nimport { HeaderItem } from \"@/registry/default/ui/header-item\";\nimport { type StyleType } from \"@/registry/default/ui/style-badge\";\nimport React from \"react\";\n\n// Import types from the centralized types file\n\ninterface HeadersSectionProps {\n  headers?: Record<string, OpenAPIV3.HeaderObject | OpenAPIV3.ReferenceObject>;\n  components?: OpenAPIV3.ComponentsObject;\n  className?: string;\n}\n\nconst HeadersSection = React.forwardRef<HTMLDivElement, HeadersSectionProps>(\n  ({ headers, components, className }, ref) => {\n    const { t } = useI18n();\n\n    if (!headers) {\n      return null;\n    }\n\n    const headerEntries = Object.entries(headers);\n\n    if (headerEntries.length === 0) {\n      return null;\n    }\n\n    return (\n      <div ref={ref} className={cn(\"mb-4 dark:text-neutral-200\", className)}>\n        <h4 className=\"text-sm font-semibold uppercase text-neutral-500 dark:text-neutral-400 mb-2\">\n          {t(\"Headers\")}\n        </h4>\n        <div className=\"space-y-3\">\n          {headerEntries.map(([name, headerOrRef]) => {\n            // Resolve header ref\n            const header = resolveRef<OpenAPIV3.HeaderObject>(\n              headerOrRef,\n              components,\n              \"headers\",\n            );\n\n            if (!header) {\n              const refString =\n                headerOrRef &&\n                  typeof headerOrRef === \"object\" &&\n                  \"$ref\" in headerOrRef\n                  ? (headerOrRef as OpenAPIV3.ReferenceObject).$ref\n                  : t(\"[unknown reference]\");\n              console.warn(\n                `[HeadersSection] Failed to resolve header ref: ${refString} for key ${name}`,\n              );\n              // Optionally render an error state for this header\n              return (\n                <div\n                  key={name}\n                  className=\"text-xs text-red-500 dark:text-red-400 p-1 border border-dashed dark:border-red-700 rounded\"\n                >\n                  {t(\"Failed to resolve reference\")}: {name} ({refString})\n                </div>\n              );\n            }\n\n            return (\n              <HeaderItem\n                key={name}\n                name={name}\n                description={header.description}\n                required={header.required}\n                deprecated={header.deprecated}\n                schema={header.schema}\n                style={header.style as StyleType}\n                explode={header.explode}\n                examples={header.examples}\n                components={components}\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  },\n);\n\nHeadersSection.displayName = \"HeadersSection\";\n\nexport { HeadersSection, type HeadersSectionProps };\n",
      "type": "registry:ui",
      "target": "components/pivot/headers-section.tsx"
    }
  ]
}