{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "component-detail",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/callback-display.json",
    "https://pivotkit.vercel.app/r/examples-display.json",
    "https://pivotkit.vercel.app/r/header-item.json",
    "https://pivotkit.vercel.app/r/link-item.json",
    "https://pivotkit.vercel.app/r/parameter-item.json",
    "https://pivotkit.vercel.app/r/request-body-section.json",
    "https://pivotkit.vercel.app/r/response-item.json",
    "https://pivotkit.vercel.app/r/schema-display.json",
    "https://pivotkit.vercel.app/r/security-scheme-display.json",
    "https://pivotkit.vercel.app/r/webhook-display.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/component-detail.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport type { OpenAPIV3 } from \"openapi-types\";\n\nimport { resolveRef } from \"@/registry/default/lib/resolve-ref\";\nimport { CallbackDisplay } from \"@/registry/default/ui/callback-display\";\nimport { ExamplesDisplay } from \"@/registry/default/ui/examples-display\";\nimport { HeaderItem } from \"@/registry/default/ui/header-item\";\nimport { LinkItem } from \"@/registry/default/ui/link-item\";\nimport { ParameterItem } from \"@/registry/default/ui/parameter-item\";\nimport { RequestBodySection } from \"@/registry/default/ui/request-body-section\";\nimport { ResponseItem } from \"@/registry/default/ui/response-item\";\nimport { SchemaDisplay } from \"@/registry/default/ui/schema-display\";\nimport { SecuritySchemeDisplay } from \"@/registry/default/ui/security-scheme-display\";\nimport { WebhookDisplay } from \"@/registry/default/ui/webhook-display\";\nimport React from \"react\";\n\ninterface ComponentDetailProps {\n  activeType: keyof OpenAPIV3.ComponentsObject | \"webhooks\" | null;\n  selectedItemName: string | null;\n  components: OpenAPIV3.ComponentsObject;\n  className?: string;\n}\n\nconst ComponentDetail = React.forwardRef<HTMLDivElement, ComponentDetailProps>(\n  ({ activeType, selectedItemName, components, className }, ref) => {\n    if (\n      !activeType ||\n      !selectedItemName ||\n      !(components as any)[activeType] ||\n      !(components as any)[activeType]?.[selectedItemName]\n    ) {\n      return (\n        <div ref={ref} className={cn(\"text-neutral-500 italic p-4\", className)}>\n          Please select an item from the list.\n        </div>\n      );\n    }\n\n    const item = (components as any)[activeType]?.[selectedItemName];\n    if (!item)\n      return (\n        <div ref={ref} className={cn(\"text-red-500 p-4\", className)}>\n          Error: Selected item not found.\n        </div>\n      );\n\n    const content = (() => {\n      switch (activeType) {\n        case \"schemas\":\n          return <SchemaDisplay schema={item} components={components} />;\n\n        case \"responses\":\n          return (\n            <ResponseItem\n              code=\"Component\"\n              response={item}\n              components={components}\n            />\n          );\n\n        case \"parameters\": {\n          const paramItem = item;\n          const schema =\n            paramItem.schema && !(\"$ref\" in paramItem.schema)\n              ? paramItem.schema\n              : {};\n\n          return (\n            <ParameterItem\n              {...paramItem}\n              schema={schema}\n              components={components}\n            />\n          );\n        }\n\n        case \"examples\":\n          return (\n            <ExamplesDisplay\n              examples={{ [selectedItemName]: item }}\n              components={components}\n            />\n          );\n\n        case \"requestBodies\":\n          return (\n            <RequestBodySection requestBody={item} components={components} />\n          );\n\n        case \"headers\":\n          return (\n            <HeaderItem\n              name={selectedItemName}\n              {...item}\n              components={components}\n            />\n          );\n\n        case \"securitySchemes\":\n          const scheme = resolveRef(item, components, \"securitySchemes\");\n          if (!scheme)\n            return (\n              <div className=\"text-red-500 p-4\">\n                Cannot resolve security scheme reference.\n              </div>\n            );\n          return (\n            <SecuritySchemeDisplay name={selectedItemName} scheme={scheme} />\n          );\n\n        case \"links\":\n          return <LinkItem name={selectedItemName} {...item} />;\n\n        case \"callbacks\":\n          return (\n            <CallbackDisplay\n              name={selectedItemName}\n              callback={item}\n              components={components}\n            />\n          );\n\n        case \"webhooks\":\n          return (\n            <WebhookDisplay\n              name={selectedItemName}\n              pathItem={item}\n              components={components}\n            />\n          );\n\n        default:\n          return (\n            <div className=\"text-red-500 p-4\">\n              Error: Unknown component type '{activeType}'.\n            </div>\n          );\n      }\n    })();\n\n    return (\n      <div ref={ref} className={cn(\"p-4\", className)}>\n        <div className=\"mb-4 border-b border-neutral-200 dark:border-neutral-700 pb-2\">\n          <h3 className=\"text-lg font-semibold text-neutral-800 dark:text-neutral-200\">\n            {selectedItemName}\n          </h3>\n          <div className=\"text-xs text-neutral-500 dark:text-neutral-400 font-mono\">\n            Type: {activeType}\n          </div>\n        </div>\n        {content}\n      </div>\n    );\n  },\n);\n\nComponentDetail.displayName = \"ComponentDetail\";\n\nexport { ComponentDetail, type ComponentDetailProps };\n",
      "type": "registry:ui",
      "target": "components/pivot/component-detail.tsx"
    }
  ]
}