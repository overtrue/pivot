{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "openapi-viewer",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/error-boundary.json",
    "https://pivotkit.vercel.app/r/openapi-context.json",
    "https://pivotkit.vercel.app/r/hooks.json",
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/operation-detailed-layout.json",
    "https://pivotkit.vercel.app/r/operation-list-layout.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/openapi-viewer.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { OpenAPIErrorBoundary } from \"@/registry/default/components/error-boundary\";\nimport { OpenAPIProvider } from \"@/registry/default/contexts/openapi-context\";\nimport { useOpenAPILoader } from \"@/registry/default/hooks/use-openapi-loader\";\nimport { I18nProvider } from \"@/registry/default/lib/i18n\";\nimport { \n  PivotConfig, \n  defaultConfig, \n  mergeConfig, \n  validateConfig \n} from \"@/registry/default/lib/pivot-config\";\nimport { OperationDetailedLayout } from \"@/registry/default/ui/operation-detailed-layout\";\nimport { OperationListLayout } from \"@/registry/default/ui/operation-list-layout\";\nimport type { OpenAPIV3 } from \"openapi-types\";\nimport React, { useEffect, useMemo, useState } from \"react\";\n\n/**\n * OpenAPIViewer component props\n */\nexport interface OpenAPIViewerProps {\n  // Data source - can be URL, JSON string, or OpenAPI object\n  spec?: string | OpenAPIV3.Document;\n  url?: string;\n  \n  // Configuration\n  config?: Partial<PivotConfig>;\n  \n  // Layout type\n  layout?: 'detail' | 'list' | 'auto';\n  \n  // Style\n  className?: string;\n  style?: React.CSSProperties;\n  \n  // Callbacks\n  onReady?: (spec: OpenAPIV3.Document) => void;\n  onError?: (error: Error) => void;\n  onOperationSelect?: (path: string, method: string, operation: OpenAPIV3.OperationObject) => void;\n}\n\n/**\n * Internal viewer component (wrapped with providers)\n */\nconst OpenAPIViewerContent: React.FC<{\n  spec: string | OpenAPIV3.Document | undefined;\n  config: PivotConfig;\n  layout: 'detail' | 'list' | 'auto';\n  className?: string;\n  style?: React.CSSProperties;\n  onReady?: (spec: OpenAPIV3.Document) => void;\n  onError?: (error: Error) => void;\n  onOperationSelect?: (path: string, method: string, operation: OpenAPIV3.OperationObject) => void;\n}> = ({ \n  spec: inputSpec, \n  config, \n  layout, \n  className, \n  style,\n  onReady,\n  onError,\n  onOperationSelect\n}) => {\n  const { spec, loading, error } = useOpenAPILoader(inputSpec);\n  const [selectedPath, setSelectedPath] = useState<string | null>(null);\n  const [selectedMethod, setSelectedMethod] = useState<string | null>(null);\n  \n  // Determine actual layout\n  const actualLayout = useMemo(() => {\n    if (layout === 'auto') {\n      // Auto-detect based on screen size or spec complexity\n      const operationCount = spec ? Object.keys(spec.paths || {}).length : 0;\n      return operationCount > 20 ? 'list' : 'detail';\n    }\n    return layout;\n  }, [layout, spec]);\n  \n  // Handle ready callback\n  useEffect(() => {\n    if (spec && onReady) {\n      onReady(spec);\n    }\n  }, [spec, onReady]);\n  \n  // Handle error callback\n  useEffect(() => {\n    if (error && onError) {\n      onError(new Error(error));\n    }\n  }, [error, onError]);\n  \n  // Handle operation selection\n  const handleOperationSelect = (path: string, method: string, operation: OpenAPIV3.OperationObject) => {\n    setSelectedPath(path);\n    setSelectedMethod(method);\n    if (onOperationSelect) {\n      onOperationSelect(path, method, operation);\n    }\n    if (config.callbacks?.onOperationSelect) {\n      config.callbacks.onOperationSelect({ path, method, operation });\n    }\n  };\n  \n  // Loading state\n  if (loading) {\n    return (\n      <div className={cn(\"flex items-center justify-center min-h-[400px]\", className)} style={style}>\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-sm text-muted-foreground\">Loading OpenAPI specification...</p>\n        </div>\n      </div>\n    );\n  }\n  \n  // Error state\n  if (error) {\n    return (\n      <div className={cn(\"flex items-center justify-center min-h-[400px]\", className)} style={style}>\n        <div className=\"text-center max-w-md\">\n          <div className=\"text-destructive mb-2\">\n            <svg className=\"w-12 h-12 mx-auto\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          </div>\n          <h3 className=\"text-lg font-semibold mb-2\">Failed to load OpenAPI specification</h3>\n          <p className=\"text-sm text-muted-foreground\">{error}</p>\n        </div>\n      </div>\n    );\n  }\n  \n  // No spec state\n  if (!spec) {\n    return (\n      <div className={cn(\"flex items-center justify-center min-h-[400px]\", className)} style={style}>\n        <div className=\"text-center\">\n          <h3 className=\"text-lg font-semibold mb-2\">No OpenAPI specification</h3>\n          <p className=\"text-sm text-muted-foreground\">Please provide a valid OpenAPI specification URL or object</p>\n        </div>\n      </div>\n    );\n  }\n  \n  // Render based on layout\n  return (\n    <div className={cn(\"h-full\", className)} style={style}>\n      {actualLayout === 'list' ? (\n        <OperationListLayout\n          spec={spec}\n          selectedPath={selectedPath}\n          selectedMethod={selectedMethod}\n          onSelectOperation={handleOperationSelect}\n        />\n      ) : (\n        <OperationDetailedLayout\n          spec={spec}\n          selectedPath={selectedPath}\n          selectedMethod={selectedMethod}\n          onSelectOperation={handleOperationSelect}\n          showCodegen={config.features?.codeGeneration}\n          showTryPanel={config.features?.tryItOut}\n        />\n      )}\n    </div>\n  );\n};\n\n/**\n * Main OpenAPIViewer component\n * A standalone, easy-to-use component for displaying OpenAPI specifications\n * \n * @example\n * ```tsx\n * // Simple usage with URL\n * <OpenAPIViewer url=\"https://api.example.com/openapi.json\" />\n * \n * // With configuration\n * <OpenAPIViewer \n *   url=\"https://api.example.com/openapi.json\"\n *   config={{\n *     theme: { mode: 'dark' },\n *     features: { tryItOut: false }\n *   }}\n * />\n * \n * // With OpenAPI object\n * <OpenAPIViewer spec={openAPIDocument} layout=\"list\" />\n * ```\n */\nexport const OpenAPIViewer = React.forwardRef<HTMLDivElement, OpenAPIViewerProps>(\n  ({ \n    spec, \n    url, \n    config: userConfig, \n    layout = 'auto',\n    className,\n    style,\n    onReady,\n    onError,\n    onOperationSelect\n  }, ref) => {\n    // Merge configuration\n    const config = useMemo(() => {\n      const merged = mergeConfig(userConfig || {});\n      const errors = validateConfig(merged);\n      if (errors.length > 0) {\n        console.warn('OpenAPIViewer configuration warnings:', errors);\n      }\n      return merged;\n    }, [userConfig]);\n    \n    // Determine spec source\n    const specSource = spec || url;\n    \n    if (!specSource) {\n      return (\n        <div className={cn(\"flex items-center justify-center min-h-[400px]\", className)} style={style}>\n          <div className=\"text-center\">\n            <h3 className=\"text-lg font-semibold mb-2\">No specification provided</h3>\n            <p className=\"text-sm text-muted-foreground\">Please provide either a 'spec' or 'url' prop</p>\n          </div>\n        </div>\n      );\n    }\n    \n    return (\n      <div ref={ref} className={cn(\"pivot-viewer\", className)} style={style}>\n        <I18nProvider locale={config.locale === \"zh\" ? \"zh\" : \"en\"}>\n          <OpenAPIErrorBoundary>\n            {config.resolver?.cache ? (\n              <OpenAPIProvider spec={null}>\n                <OpenAPIViewerContent\n                  spec={specSource}\n                  config={config}\n                  layout={layout}\n                  onReady={onReady}\n                  onError={onError}\n                  onOperationSelect={onOperationSelect}\n                />\n              </OpenAPIProvider>\n            ) : (\n              <OpenAPIViewerContent\n                spec={specSource}\n                config={config}\n                layout={layout}\n                onReady={onReady}\n                onError={onError}\n                onOperationSelect={onOperationSelect}\n              />\n            )}\n          </OpenAPIErrorBoundary>\n        </I18nProvider>\n      </div>\n    );\n  }\n);\n\nOpenAPIViewer.displayName = \"OpenAPIViewer\";\n\n/**\n * Standalone components for specific use cases\n */\n\n// Response viewer for displaying only responses\nexport const ResponseViewer: React.FC<{\n  responses: OpenAPIV3.ResponsesObject;\n  components?: OpenAPIV3.ComponentsObject;\n  config?: Partial<PivotConfig>;\n  className?: string;\n}> = ({ responses, components, config: userConfig, className }) => {\n  const config = mergeConfig(userConfig || {});\n  \n  // Lazy load the ResponsesSection component\n  const ResponsesSection = React.lazy(() => import('./responses-section').then(m => ({ default: m.ResponsesSection })));\n  \n  return (\n    <I18nProvider locale={config.locale === \"zh\" ? \"zh\" : \"en\"}>\n      <React.Suspense fallback={<div>Loading...</div>}>\n        <ResponsesSection \n          responses={responses} \n          components={components}\n          className={className}\n        />\n      </React.Suspense>\n    </I18nProvider>\n  );\n};\n\n// Operation viewer for displaying a single operation\nexport const OperationViewer: React.FC<{\n  operation: OpenAPIV3.OperationObject;\n  path: string;\n  method: string;\n  components?: OpenAPIV3.ComponentsObject;\n  config?: Partial<PivotConfig>;\n  className?: string;\n}> = ({ operation, path, method, components, config: userConfig, className }) => {\n  const config = mergeConfig(userConfig || {});\n  \n  // Lazy load the OperationDetail component\n  const OperationDetail = React.lazy(() => import('./operation-detail').then(m => ({ default: m.OperationDetail })));\n  \n  return (\n    <I18nProvider locale={config.locale === \"zh\" ? \"zh\" : \"en\"}>\n      <React.Suspense fallback={<div>Loading...</div>}>\n        <OperationDetail\n          operation={operation}\n          path={path}\n          method={method}\n          components={components}\n          className={className}\n        />\n      </React.Suspense>\n    </I18nProvider>\n  );\n};",
      "type": "registry:ui",
      "target": "components/pivot/openapi-viewer.tsx"
    }
  ]
}