{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "security-scheme",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/description-display",
    "https://pivotkit.vercel.app/r/scheme-type"
  ],
  "files": [
    {
      "path": "registry/pivot/security-scheme.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport { DescriptionDisplay } from \"@/registry/pivot/description-display\";\nimport { SchemeType } from \"@/registry/pivot/scheme-type\";\nimport type { OpenAPIV3 } from 'openapi-types';\nimport React from \"react\";\n\n// Import types from the centralized types file\n\ninterface SecuritySchemeProps {\n  name: string;\n  scheme: OpenAPIV3.SecuritySchemeObject;\n  className?: string;\n}\n\nconst SecurityScheme = React.forwardRef<HTMLDivElement, SecuritySchemeProps>(\n  ({ name, scheme, className }, ref) => {\n    const {\n      type,\n      description,\n    } = scheme;\n\n    // Access type-specific properties safely\n    const paramIn = 'in' in scheme ? scheme.in : undefined;\n    const apiKeyName = 'name' in scheme ? scheme.name : undefined;\n    const httpScheme = 'scheme' in scheme ? scheme.scheme : undefined;\n    const bearerFormat = 'bearerFormat' in scheme ? scheme.bearerFormat : undefined;\n    const flows = 'flows' in scheme ? scheme.flows : undefined;\n    const openIdConnectUrl = 'openIdConnectUrl' in scheme ? scheme.openIdConnectUrl : undefined;\n\n    // OAuth2流类型的渲染\n    const renderOAuth2Flows = (flows?: any) => {\n      if (!flows) return null;\n\n      // 获取所有非空的flow\n      const availableFlows = Object.entries(flows)\n        .filter(([_, flow]) => flow !== undefined)\n        .map(([name, flow]) => ({ name, flow: flow! }));\n\n      if (availableFlows.length === 0) return null;\n\n      return (\n        <div className=\"space-y-4\">\n          <h4 className=\"text-sm font-semibold dark:text-neutral-200\">\n            OAuth2 Flows\n          </h4>\n          {availableFlows.map(({ name, flow }) => (\n            <div\n              key={name}\n              className=\"bg-neutral-50 dark:bg-neutral-800/70 p-3 rounded-md\"\n            >\n              <h5 className=\"text-sm font-medium mb-2 capitalize\">\n                {name} Flow\n              </h5>\n              <div className=\"space-y-2 text-sm\">\n                {(flow as any).authorizationUrl && (\n                  <div className=\"grid grid-cols-[max-content_1fr] gap-2\">\n                    <span className=\"font-semibold\">Authorization URL:</span>\n                    <a\n                      href={(flow as any).authorizationUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"text-blue-600 dark:text-blue-400 hover:underline break-all\"\n                    >\n                      {(flow as any).authorizationUrl}\n                    </a>\n                  </div>\n                )}\n                {(flow as any).tokenUrl && (\n                  <div className=\"grid grid-cols-[max-content_1fr] gap-2\">\n                    <span className=\"font-semibold\">Token URL:</span>\n                    <a\n                      href={(flow as any).tokenUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"text-blue-600 dark:text-blue-400 hover:underline break-all\"\n                    >\n                      {(flow as any).tokenUrl}\n                    </a>\n                  </div>\n                )}\n                {Object.keys((flow as any).scopes).length > 0 && (\n                  <div>\n                    <span className=\"font-semibold\">Scopes:</span>\n                    <ul className=\"list-disc list-inside ml-4 mt-1\">\n                      {(Object.entries((flow as any).scopes) as [string, string][]).map(\n                        ([scope, description]) => (\n                          <li key={scope} className=\"text-sm\">\n                            <code className=\"font-mono\">{scope}</code>\n                            {description && `: ${description}`}\n                          </li>\n                        ),\n                      )}\n                    </ul>\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      );\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\"rounded-md overflow-hidden shadow-sm\", className)}\n      >\n        <div className=\"bg-blue-50 dark:bg-blue-900/30 p-3 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"font-mono font-medium text-blue-800 dark:text-blue-300\">\n              {name}\n            </span>\n            <SchemeType type={type} />\n          </div>\n        </div>\n\n        <div className=\"p-4 space-y-4 dark:text-neutral-200\">\n          {description && <DescriptionDisplay description={description} />}\n\n          {/* ApiKey 类型 */}\n          {type === \"apiKey\" && (\n            <div className=\"bg-neutral-50 dark:bg-neutral-800/70 p-3 rounded-md\">\n              <h4 className=\"text-sm font-semibold mb-2\">API Key</h4>\n              <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                <div className=\"font-semibold\">Name:</div>\n                <div className=\"font-mono dark:text-neutral-300\">\n                  {apiKeyName}\n                </div>\n                <div className=\"font-semibold\">In:</div>\n                <div className=\"dark:text-neutral-300\">{paramIn}</div>\n              </div>\n            </div>\n          )}\n\n          {/* HTTP 类型 */}\n          {type === \"http\" && (\n            <div className=\"bg-neutral-50 dark:bg-neutral-800/70 p-3 rounded-md\">\n              <h4 className=\"text-sm font-semibold mb-2\">\n                HTTP Authentication\n              </h4>\n              <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                <div className=\"font-semibold\">Scheme:</div>\n                <div className=\"font-mono dark:text-neutral-300\">\n                  {httpScheme}\n                </div>\n                {bearerFormat && (\n                  <>\n                    <div className=\"font-semibold\">Bearer Format:</div>\n                    <div className=\"dark:text-neutral-300\">{bearerFormat}</div>\n                  </>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* OAuth2 类型 */}\n          {type === \"oauth2\" && renderOAuth2Flows(flows)}\n\n          {/* OpenID Connect 类型 */}\n          {type === \"openIdConnect\" && openIdConnectUrl && (\n            <div className=\"bg-neutral-50 dark:bg-neutral-800/70 p-3 rounded-md\">\n              <h4 className=\"text-sm font-semibold mb-2\">OpenID Connect</h4>\n              <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                <div className=\"font-semibold\">OpenID Connect URL:</div>\n                <div className=\"font-mono break-all dark:text-neutral-300\">\n                  <a\n                    href={openIdConnectUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"text-blue-600 dark:text-blue-400 hover:underline\"\n                  >\n                    {openIdConnectUrl}\n                  </a>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n\nSecurityScheme.displayName = \"SecurityScheme\";\n\nexport { SecurityScheme };\n\n",
      "type": "registry:component",
      "target": "components/pivot/security-scheme.tsx"
    }
  ]
}