{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "operation-detailed-layout",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "sidebar",
    "https://pivotkit.vercel.app/r/hooks.json",
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/codegen.json",
    "https://pivotkit.vercel.app/r/navigation-sidebar.json",
    "https://pivotkit.vercel.app/r/operation-detail.json",
    "https://pivotkit.vercel.app/r/try-it-out-panel.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/operation-detailed-layout.tsx",
      "content": "\"use client\";\n\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { useOpenAPILoader, type OpenAPISource } from \"@/registry/default/hooks/use-openapi-loader\";\nimport { useI18n } from \"@/registry/default/lib/i18n\";\nimport { Codegen } from \"@/registry/default/ui/codegen\";\nimport { NavigationSidebar } from \"@/registry/default/ui/navigation-sidebar\";\nimport { OperationDetail } from \"@/registry/default/ui/operation-detail\";\nimport { TryItOutPanel } from \"@/registry/default/ui/try-it-out-panel\";\nimport type { OpenAPIV3 } from \"openapi-types\";\nimport React, { useEffect, useMemo, useState } from \"react\";\n\n// 统一的接口定义\ninterface OperationDetailedLayoutProps {\n  // 支持多种输入方式 - 向后兼容\n  spec?: OpenAPIV3.Document | string | null;\n  url?: string;\n  selectedPath?: string | null;\n  selectedMethod?: string | null;\n  onSelectOperation?: (\n    path: string,\n    method: string,\n    operation: OpenAPIV3.OperationObject,\n  ) => void;\n  className?: string;\n  // 新增开关控制\n  showNavigation?: boolean;\n  showCodegen?: boolean;\n  showTryPanel?: boolean;\n  navigationWidth?: string;\n}\n\nconst OperationDetailedLayout = React.forwardRef<\n  HTMLDivElement,\n  OperationDetailedLayoutProps\n>(\n  (\n    {\n      spec: inputSpec,\n      url,\n      selectedPath = null,\n      selectedMethod = null,\n      onSelectOperation = () => { },\n      className,\n      showNavigation = true,\n      showCodegen = true,\n      showTryPanel = true,\n      navigationWidth = \"320px\",\n    },\n    ref,\n  ) => {\n    const { t } = useI18n();\n    const [localSelectedPath, setLocalSelectedPath] = useState<string | null>(\n      selectedPath,\n    );\n    const [localSelectedMethod, setLocalSelectedMethod] = useState<\n      string | null\n    >(selectedMethod);\n\n    // 智能数据源选择：URL > 字符串 > 对象\n    const dataSource: OpenAPISource | undefined = useMemo(() => {\n      if (url) {\n        return { type: \"url\", data: url };\n      }\n      if (typeof inputSpec === \"string\") {\n        return { type: \"string\", data: inputSpec };\n      }\n      if (inputSpec && typeof inputSpec === \"object\") {\n        return { type: \"object\", data: inputSpec };\n      }\n      return undefined;\n    }, [url, inputSpec]);\n\n    // 使用统一的数据加载器\n    const { spec, loading, error, loadFromUrl, loadFromString, loadFromObject } =\n      useOpenAPILoader(dataSource);\n\n    // 同步外部状态变化\n    useEffect(() => {\n      setLocalSelectedPath(selectedPath);\n    }, [selectedPath]);\n\n    useEffect(() => {\n      setLocalSelectedMethod(selectedMethod);\n    }, [selectedMethod]);\n\n    // 操作选择处理\n    const handleSelectOperation = (\n      path: string,\n      method: string,\n      operation: OpenAPIV3.OperationObject,\n    ) => {\n      setLocalSelectedPath(path);\n      setLocalSelectedMethod(method);\n      onSelectOperation(path, method, operation);\n    };\n\n    // 获取当前选择的操作\n    const currentOperation = useMemo(() => {\n      if (!spec || !localSelectedPath || !localSelectedMethod) return null;\n\n      const pathItem = spec.paths?.[localSelectedPath];\n      if (!pathItem) return null;\n\n      const operation = pathItem[localSelectedMethod.toLowerCase() as keyof typeof pathItem];\n      if (!operation || typeof operation !== \"object\" || !(\"responses\" in operation)) {\n        return null;\n      }\n\n      return operation as OpenAPIV3.OperationObject;\n    }, [spec, localSelectedPath, localSelectedMethod]);\n\n    // 构建服务器 URL\n    const baseUrl = useMemo(() => {\n      if (!spec?.servers || spec.servers.length === 0) return \"\";\n      return spec.servers[0]?.url || \"\";\n    }, [spec]);\n\n    // 错误状态\n    if (error) {\n      return (\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <h3 className=\"text-lg font-medium text-destructive mb-2\">\n              {t(\"Error loading OpenAPI specification\")}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">{error}</p>\n          </div>\n        </div>\n      );\n    }\n\n    // 加载状态\n    if (loading) {\n      return (\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-2\"></div>\n            <p className=\"text-sm text-muted-foreground\">\n              {t(\"Loading OpenAPI specification...\")}\n            </p>\n          </div>\n        </div>\n      );\n    }\n\n    // 无数据状态\n    if (!spec) {\n      return (\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <h3 className=\"text-lg font-medium mb-2\">\n              {t(\"No OpenAPI specification\")}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {t(\"Please provide a valid OpenAPI specification\")}\n            </p>\n          </div>\n        </div>\n      );\n    }\n\n    // 计算布局类名\n    const showRightPanel = showCodegen || showTryPanel;\n\n    // 如果不显示导航，则不使用 SidebarProvider\n    if (!showNavigation) {\n      return (\n        <div\n          ref={ref}\n          className={`flex h-full ${className || \"\"}`}\n        >\n          {/* 内容布局 */}\n          <div className=\"flex-1 flex\">\n            {/* 操作详情区域 */}\n            <div\n              className={`flex-1 ${showRightPanel ? \"border-r\" : \"max-w-4xl mx-auto\"\n                }`}\n            >\n              {currentOperation && localSelectedPath && localSelectedMethod ? (\n                <OperationDetail\n                  operation={currentOperation}\n                  path={localSelectedPath}\n                  method={localSelectedMethod}\n                  components={spec.components}\n                  className=\"h-full\"\n                />\n              ) : (\n                <div className=\"flex items-center justify-center h-full\">\n                  <div className=\"text-center\">\n                    <h3 className=\"text-lg font-medium mb-2\">\n                      {t(\"Select an operation\")}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {t(\n                        \"Choose an operation from the sidebar to view its details\",\n                      )}\n                    </p>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* 右侧面板 */}\n            {showRightPanel && (\n              <div className=\"w-96 flex flex-col border-l\">\n                {/* 代码生成面板 */}\n                {showCodegen && (\n                  <div className=\"flex-1 border-b\">\n                    {currentOperation && localSelectedPath && localSelectedMethod ? (\n                      <Codegen\n                        endpoint={`${baseUrl}${localSelectedPath}`}\n                        method={localSelectedMethod.toLowerCase() as\n                          | \"get\"\n                          | \"post\"\n                          | \"put\"\n                          | \"delete\"\n                          | \"patch\"\n                          | \"head\"\n                          | \"options\"\n                          | \"trace\"\n                        }\n                        parameters={currentOperation.parameters}\n                        requestBody={currentOperation.requestBody}\n                        components={spec.components}\n                        collapsible={false}\n                      />\n                    ) : (\n                      <div className=\"flex items-center justify-center h-32\">\n                        <p className=\"text-sm text-muted-foreground\">\n                          {t(\"Select an operation to generate code\")}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* 试用面板 */}\n                {showTryPanel && (\n                  <div className=\"flex-1\">\n                    {currentOperation && localSelectedPath && localSelectedMethod ? (\n                      <TryItOutPanel\n                        operation={currentOperation}\n                        path={localSelectedPath}\n                        method={localSelectedMethod}\n                        baseUrl={baseUrl}\n                        components={spec.components}\n                        collapsible={false}\n                        className=\"h-full\"\n                      />\n                    ) : (\n                      <div className=\"flex items-center justify-center h-32\">\n                        <p className=\"text-sm text-muted-foreground\">\n                          {t(\"Select an operation to try it out\")}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      );\n    }\n\n    // 显示导航时使用 SidebarProvider\n    return (\n      <SidebarProvider defaultOpen={true}>\n        {/* 导航侧边栏 - 始终渲染 */}\n        <NavigationSidebar\n          openapi={spec}\n          activePath={localSelectedPath}\n          activeMethod={localSelectedMethod}\n          onSelectOperation={handleSelectOperation}\n        />\n\n        {/* 主内容区域 */}\n        <main\n          ref={ref}\n          className={`flex-1 flex flex-col h-full ${className || \"\"}`}\n        >\n          {/* Sidebar 控制按钮 - 始终显示 */}\n          <div className=\"p-2 border-b\">\n            <SidebarTrigger />\n          </div>\n\n          {/* 内容布局 */}\n          <div className=\"flex-1 flex\">\n            {/* 操作详情区域 */}\n            <div\n              className={`flex-1 ${showRightPanel ? \"border-r\" : \"max-w-4xl mx-auto\"\n                }`}\n            >\n              {currentOperation && localSelectedPath && localSelectedMethod ? (\n                <OperationDetail\n                  operation={currentOperation}\n                  path={localSelectedPath}\n                  method={localSelectedMethod}\n                  components={spec.components}\n                  className=\"h-full\"\n                />\n              ) : (\n                <div className=\"flex items-center justify-center h-full\">\n                  <div className=\"text-center\">\n                    <h3 className=\"text-lg font-medium mb-2\">\n                      {t(\"Select an operation\")}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {t(\n                        \"Choose an operation from the sidebar to view its details\",\n                      )}\n                    </p>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* 右侧面板 */}\n            {showRightPanel && (\n              <div className=\"w-96 flex flex-col border-l\">\n                {/* 代码生成面板 */}\n                {showCodegen && (\n                  <div className=\"flex-1 border-b\">\n                    {currentOperation && localSelectedPath && localSelectedMethod ? (\n                      <Codegen\n                        endpoint={`${baseUrl}${localSelectedPath}`}\n                        method={localSelectedMethod.toLowerCase() as\n                          | \"get\"\n                          | \"post\"\n                          | \"put\"\n                          | \"delete\"\n                          | \"patch\"\n                          | \"head\"\n                          | \"options\"\n                          | \"trace\"\n                        }\n                        parameters={currentOperation.parameters}\n                        requestBody={currentOperation.requestBody}\n                        components={spec.components}\n                        collapsible={false}\n                      />\n                    ) : (\n                      <div className=\"flex items-center justify-center h-32\">\n                        <p className=\"text-sm text-muted-foreground\">\n                          {t(\"Select an operation to generate code\")}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* 试用面板 */}\n                {showTryPanel && (\n                  <div className=\"flex-1\">\n                    {currentOperation && localSelectedPath && localSelectedMethod ? (\n                      <TryItOutPanel\n                        operation={currentOperation}\n                        path={localSelectedPath}\n                        method={localSelectedMethod}\n                        baseUrl={baseUrl}\n                        components={spec.components}\n                        collapsible={false}\n                        className=\"h-full\"\n                      />\n                    ) : (\n                      <div className=\"flex items-center justify-center h-32\">\n                        <p className=\"text-sm text-muted-foreground\">\n                          {t(\"Select an operation to try it out\")}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </main>\n      </SidebarProvider>\n    );\n  },\n);\n\nOperationDetailedLayout.displayName = \"OperationDetailedLayout\";\n\nexport { OperationDetailedLayout, type OperationDetailedLayoutProps };\n",
      "type": "registry:ui",
      "target": "components/ui/operation-detailed-layout.tsx"
    }
  ]
}