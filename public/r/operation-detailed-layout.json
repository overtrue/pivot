{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "operation-detailed-layout",
  "type": "registry:ui",
  "dependencies": [
    "js-yaml",
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/codegen.json",
    "https://pivotkit.vercel.app/r/operation-detail.json",
    "https://pivotkit.vercel.app/r/try-it-out-panel.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/operation-detailed-layout.tsx",
      "content": "\"use client\";\n\nimport { useI18n } from \"@/registry/default/lib/i18n\";\nimport { Codegen } from \"@/registry/default/ui/codegen\";\nimport { OperationDetail } from \"@/registry/default/ui/operation-detail\";\nimport { TryItOutPanel } from \"@/registry/default/ui/try-it-out-panel\";\nimport * as yaml from \"js-yaml\";\nimport type { OpenAPIV3 } from \"openapi-types\";\nimport React, { useEffect, useState } from \"react\";\n\n// Import types from the centralized types file\n\n// 统一的接口定义\ninterface OperationDetailedLayoutProps {\n  spec: OpenAPIV3.Document | string | null;\n  selectedPath?: string | null;\n  selectedMethod?: string | null;\n  onSelectOperation?: (\n    path: string,\n    method: string,\n    operation: OpenAPIV3.OperationObject,\n  ) => void;\n  className?: string;\n}\n\nexport const OperationDetailedLayout = React.forwardRef<\n  HTMLDivElement,\n  OperationDetailedLayoutProps\n>(\n  (\n    {\n      spec: inputSpec,\n      selectedPath,\n      selectedMethod,\n      onSelectOperation,\n      className,\n    },\n    ref,\n  ) => {\n    const { t } = useI18n();\n\n    const [parsedSpec, setParsedSpec] = useState<OpenAPIV3.Document | null>(\n      null,\n    );\n    const [parseError, setParseError] = useState<string | null>(null);\n    const [selectedServer, setSelectedServer] = useState<string>(\"\");\n\n    // Parse string to OpenAPI object\n    useEffect(() => {\n      if (typeof inputSpec === \"string\") {\n        try {\n          // Try to parse as JSON\n          try {\n            const jsonData = JSON.parse(inputSpec);\n            setParsedSpec(jsonData);\n            setParseError(null);\n            return;\n          } catch (jsonError) {\n            // JSON parsing failed, try parsing as YAML\n            try {\n              const yamlData = yaml.load(inputSpec);\n              if (typeof yamlData === \"object\" && yamlData !== null) {\n                setParsedSpec(yamlData as OpenAPIV3.Document);\n                setParseError(null);\n                return;\n              } else {\n                throw new Error(\"Parsed YAML is not a valid object\");\n              }\n            } catch (yamlError) {\n              setParseError(\n                `Failed to parse OpenAPI spec: ${yamlError instanceof Error ? yamlError.message : \"Unknown error\"}`,\n              );\n              setParsedSpec(null);\n            }\n          }\n        } catch (error) {\n          setParseError(\n            `Failed to parse OpenAPI spec: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n          );\n          setParsedSpec(null);\n        }\n      } else {\n        // Input is already an object\n        setParsedSpec(inputSpec);\n        setParseError(null);\n      }\n    }, [inputSpec]);\n\n    // 初始化服务器选择\n    useEffect(() => {\n      if (\n        parsedSpec?.servers &&\n        parsedSpec.servers.length > 0 &&\n        !selectedServer\n      ) {\n        const firstServer = parsedSpec.servers[0];\n        if (firstServer?.url) {\n          setSelectedServer(firstServer.url);\n        }\n      }\n    }, [parsedSpec, selectedServer]);\n\n    // If there's a parsing error, display the error message\n    if (parseError) {\n      return (\n        <div ref={ref} className=\"flex items-center justify-center h-full p-8\">\n          <div className=\"bg-white dark:bg-neutral-800 p-8 rounded-lg shadow-md text-center\">\n            <h2 className=\"text-2xl font-semibold text-red-600 dark:text-red-400 mb-4\">\n              {t(\"Specification Parse Error\")}\n            </h2>\n            <p className=\"text-neutral-700 dark:text-neutral-300\">\n              {parseError}\n            </p>\n          </div>\n        </div>\n      );\n    }\n\n    // If the spec is not yet parsed, display loading state\n    if (!parsedSpec) {\n      return (\n        <div\n          ref={ref}\n          className=\"flex justify-center items-center min-h-[60vh] dark:text-neutral-200\"\n        >\n          <div className=\"animate-spin rounded-full h-12 w-12 border-2 border-neutral-500 dark:border-neutral-400\"></div>\n          <p className=\"ml-4 text-neutral-500 dark:text-neutral-400\">\n            {t(\"Parsing specification...\")}\n          </p>\n        </div>\n      );\n    }\n\n    if (!parsedSpec || !selectedPath || !selectedMethod) {\n      return (\n        <div ref={ref} className=\"flex items-center justify-center h-full p-8\">\n          <div className=\"text-center\">\n            <h3 className=\"text-lg font-medium text-muted-foreground mb-2\">\n              {t(\"Please select an API endpoint\")}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {t(\n                \"Select a path and method from the navigation to view details\",\n              )}\n            </p>\n          </div>\n        </div>\n      );\n    }\n\n    const pathItem = parsedSpec.paths?.[selectedPath];\n    if (!pathItem) {\n      return (\n        <div ref={ref} className=\"flex items-center justify-center h-full p-8\">\n          <div className=\"text-center\">\n            <h3 className=\"text-lg font-medium text-destructive mb-2\">\n              {t(\"Path not found\")}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {t(\"The selected path does not exist in the specification\")}\n            </p>\n          </div>\n        </div>\n      );\n    }\n\n    const operation =\n      pathItem[selectedMethod.toLowerCase() as keyof typeof pathItem];\n\n    if (\n      !operation ||\n      typeof operation !== \"object\" ||\n      !(\n        \"summary\" in operation ||\n        \"description\" in operation ||\n        \"parameters\" in operation\n      )\n    ) {\n      return (\n        <div ref={ref} className=\"flex items-center justify-center h-full p-8\">\n          <div className=\"text-center\">\n            <h3 className=\"text-lg font-medium text-destructive mb-2\">\n              {t(\"Operation not found\")}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {t(\"The selected path and method combination does not exist\")}\n            </p>\n          </div>\n        </div>\n      );\n    }\n\n    // 确保 selectedMethod 是有效的 HTTP 方法\n    const normalizedMethod = selectedMethod.toUpperCase() as\n      | \"GET\"\n      | \"POST\"\n      | \"PUT\"\n      | \"DELETE\"\n      | \"PATCH\"\n      | \"OPTIONS\"\n      | \"HEAD\";\n    const normalizedMethodLowercase = selectedMethod.toLowerCase() as\n      | \"get\"\n      | \"post\"\n      | \"put\"\n      | \"delete\"\n      | \"patch\"\n      | \"options\"\n      | \"head\";\n\n    const resolvedComponents = parsedSpec.components;\n\n    return (\n      <div ref={ref} className=\"h-full overflow-auto\">\n        <div className=\"flex gap-6 p-6\">\n          {/* 左侧内容面板 */}\n          <div className=\"flex-1\">\n            <OperationDetail\n              operation={operation as OpenAPIV3.OperationObject}\n              path={selectedPath}\n              method={normalizedMethod}\n              components={resolvedComponents}\n            />\n          </div>\n\n          {/* 右侧面板 - 代码示例和Try It Out */}\n          <div className=\"max-w-md flex-shrink-0\">\n            <div className=\"sticky top-6 space-y-6\">\n              {/* 代码生成器面板 */}\n              <Codegen\n                endpoint={`${selectedServer}${selectedPath}`}\n                method={normalizedMethodLowercase}\n                parameters={operation.parameters || []}\n                requestBody={operation.requestBody}\n                components={resolvedComponents}\n              />\n\n              {/* Try It Out面板 */}\n              <TryItOutPanel\n                operation={operation as any}\n                method={normalizedMethod}\n                path={selectedPath}\n                baseUrl={selectedServer}\n                components={resolvedComponents}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\n\nOperationDetailedLayout.displayName = \"OperationDetailedLayout\";\n\nexport { type OperationDetailedLayoutProps };\nexport default OperationDetailedLayout;\n",
      "type": "registry:ui",
      "target": "components/ui/operation-detailed-layout.tsx"
    }
  ]
}