{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "operation-detailed-layout",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "sidebar",
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/codegen.json",
    "https://pivotkit.vercel.app/r/language-switcher.json",
    "https://pivotkit.vercel.app/r/method-label.json",
    "https://pivotkit.vercel.app/r/navigation-sidebar.json",
    "https://pivotkit.vercel.app/r/operation-detail.json",
    "https://pivotkit.vercel.app/r/operation-path.json",
    "https://pivotkit.vercel.app/r/theme-toggle.json",
    "https://pivotkit.vercel.app/r/try-it-out-panel.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/operation-detailed-layout.tsx",
      "content": "\"use client\";\n\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { cn } from \"@/lib/utils\";\nimport { useI18n } from \"@/registry/default/lib/i18n\";\nimport { Codegen } from \"@/registry/default/ui/codegen\";\nimport { LanguageSwitcher } from \"@/registry/default/ui/language-switcher\";\nimport { MethodLabel } from \"@/registry/default/ui/method-label\";\nimport { NavigationSidebar } from \"@/registry/default/ui/navigation-sidebar\";\nimport { OperationDetail } from \"@/registry/default/ui/operation-detail\";\nimport { OperationPath } from \"@/registry/default/ui/operation-path\";\nimport { ThemeToggle } from \"@/registry/default/ui/theme-toggle\";\nimport { TryItOutPanel } from \"@/registry/default/ui/try-it-out-panel\";\nimport type { OpenAPIV3 } from \"openapi-types\";\nimport React, { useEffect, useMemo, useState } from \"react\";\n\n// 统一的接口定义\ninterface OperationDetailedLayoutProps {\n  // 支持多种输入方式 - 自动检测 URL、JSON 字符串或对象\n  spec?: OpenAPIV3.Document | string | null;\n  selectedPath?: string | null;\n  selectedMethod?: string | null;\n  onSelectOperation?: (\n    path: string,\n    method: string,\n    operation: OpenAPIV3.OperationObject,\n  ) => void;\n  className?: string;\n  navigationWidth?: string;\n}\n\nconst OperationDetailedLayout = React.forwardRef<\n  HTMLDivElement,\n  OperationDetailedLayoutProps\n>(\n  (\n    {\n      spec: inputSpec,\n      selectedPath = null,\n      selectedMethod = null,\n      onSelectOperation = () => { },\n      className,\n      navigationWidth,\n    },\n    ref,\n  ) => {\n    const { t } = useI18n();\n    const [localSelectedPath, setLocalSelectedPath] = useState<string | null>(\n      selectedPath,\n    );\n    const [localSelectedMethod, setLocalSelectedMethod] = useState<\n      string | null\n    >(selectedMethod);\n\n    // 直接使用传入的 spec 参数\n    const spec = inputSpec;\n\n    // 同步外部状态变化\n    useEffect(() => {\n      setLocalSelectedPath(selectedPath);\n    }, [selectedPath]);\n\n    useEffect(() => {\n      setLocalSelectedMethod(selectedMethod);\n    }, [selectedMethod]);\n\n    // 自动选择第一个操作\n    useEffect(() => {\n      if (spec && typeof spec === 'object' && !localSelectedPath && !localSelectedMethod && !selectedPath && !selectedMethod) {\n        // 找到第一个可用的操作\n        for (const [path, pathItem] of Object.entries(spec.paths || {})) {\n          const methods = [\"get\", \"post\", \"put\", \"delete\", \"patch\", \"options\", \"head\"];\n          for (const method of methods) {\n            const operation = (pathItem as OpenAPIV3.PathItemObject)?.[method as keyof OpenAPIV3.PathItemObject];\n            if (operation && typeof operation === \"object\" && \"responses\" in operation) {\n              setLocalSelectedPath(path);\n              setLocalSelectedMethod(method);\n              onSelectOperation(path, method, operation);\n              return;\n            }\n          }\n        }\n      }\n    }, [spec, selectedPath, selectedMethod, onSelectOperation, localSelectedPath, localSelectedMethod]); // 添加 selectedPath 和 selectedMethod 依赖\n\n    // 操作选择处理\n    const handleSelectOperation = (\n      path: string,\n      method: string,\n      operation: OpenAPIV3.OperationObject,\n    ) => {\n      setLocalSelectedPath(path);\n      setLocalSelectedMethod(method);\n      onSelectOperation(path, method, operation);\n    };\n\n    // 获取当前选择的操作\n    const currentOperation = useMemo(() => {\n      if (!spec || typeof spec !== 'object' || !localSelectedPath || !localSelectedMethod) return null;\n\n      const pathItem = spec.paths?.[localSelectedPath];\n      if (!pathItem) return null;\n\n      const operation = pathItem[localSelectedMethod.toLowerCase() as keyof typeof pathItem];\n      if (!operation || typeof operation !== \"object\" || !(\"responses\" in operation)) {\n        return null;\n      }\n\n      return operation as OpenAPIV3.OperationObject;\n    }, [spec, localSelectedPath, localSelectedMethod]);\n\n    // 构建服务器 URL\n    const baseUrl = useMemo(() => {\n      if (!spec || typeof spec !== 'object' || !spec.servers || spec.servers.length === 0) return \"\";\n      return spec.servers[0]?.url || \"\";\n    }, [spec]);\n\n    // 无数据状态\n    if (!spec || typeof spec !== 'object') {\n      return (\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <h3 className=\"text-lg font-medium mb-2\">\n              {t(\"No OpenAPI specification\")}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {t(\"Please provide a valid OpenAPI specification\")}\n            </p>\n          </div>\n        </div>\n      );\n    }\n\n    // 计算布局类名\n    const showRightPanel = true; // Always show right panel for now\n\n    return (\n      <SidebarProvider defaultOpen={true}>\n        {/* 导航侧边栏 - 始终渲染 */}\n        <NavigationSidebar\n          spec={spec}\n          activePath={localSelectedPath}\n          activeMethod={localSelectedMethod}\n          onSelectOperation={handleSelectOperation}\n        />\n\n        {/* 主内容区域 */}\n        <main\n          ref={ref}\n          className={cn(`flex-1 flex flex-col h-full`, className)}\n        >\n          {/* 顶部工具栏 */}\n          <div className=\"p-2 border-b flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <SidebarTrigger />\n              {/* 当前选中的操作信息 */}\n              {localSelectedPath && localSelectedMethod && (\n                <div className=\"flex items-center gap-2\">\n                  <MethodLabel variant=\"compact\" method={localSelectedMethod.toUpperCase() as \"GET\" | \"POST\" | \"PUT\" | \"DELETE\" | \"PATCH\" | \"OPTIONS\" | \"HEAD\"} />\n                  <OperationPath path={localSelectedPath} />\n                  {currentOperation && (currentOperation.summary || currentOperation.description) && (\n                    <span className=\"text-sm text-muted-foreground truncate max-w-md\">\n                      - {currentOperation.summary || currentOperation.description}\n                    </span>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <LanguageSwitcher />\n              <ThemeToggle />\n            </div>\n          </div>\n\n          {/* 内容布局 */}\n          <div className=\"flex-1 flex\">\n            {/* 操作详情区域 */}\n            <div\n              className={cn('p-4', `flex-1 ${showRightPanel ? \"border-r\" : \"max-w-4xl mx-auto\"}`)}\n            >\n              {currentOperation && localSelectedPath && localSelectedMethod ? (\n                <OperationDetail\n                  operation={currentOperation}\n                  path={localSelectedPath}\n                  method={localSelectedMethod}\n                  spec={spec as OpenAPIV3.Document}\n                  components={spec.components}\n                  className=\"h-full\"\n                />\n              ) : (\n                <div className=\"flex items-center justify-center h-full\">\n                  <div className=\"text-center\">\n                    <h3 className=\"text-lg font-medium mb-2\">\n                      {t(\"Select an operation\")}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {t(\n                        \"Choose an operation from the sidebar to view its details\",\n                      )}\n                    </p>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* 右侧面板 */}\n            {showRightPanel && (\n              <div className=\"w-1/3 max-w-128 flex flex-col items-start p-4 gap-6\">\n                {/* 代码生成面板 */}\n                {true && (\n                  <div className=\"w-full\">\n                    {currentOperation && localSelectedPath && localSelectedMethod ? (\n                      <Codegen\n                        endpoint={`${baseUrl}${localSelectedPath}`}\n                        method={localSelectedMethod.toLowerCase() as\n                          | \"get\"\n                          | \"post\"\n                          | \"put\"\n                          | \"delete\"\n                          | \"patch\"\n                          | \"head\"\n                          | \"options\"\n                          | \"trace\"\n                        }\n                        parameters={currentOperation.parameters}\n                        requestBody={currentOperation.requestBody}\n                        components={(spec as OpenAPIV3.Document).components}\n                        collapsible={false}\n                      />\n                    ) : (\n                      <div className=\"flex items-center justify-center h-32\">\n                        <p className=\"text-sm text-muted-foreground\">\n                          {t(\"Select an operation to generate code\")}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* 试用面板 */}\n                {true && (\n                  <div className=\"\">\n                    {currentOperation && localSelectedPath && localSelectedMethod ? (\n                      <TryItOutPanel\n                        operation={currentOperation}\n                        path={localSelectedPath}\n                        method={localSelectedMethod}\n                        baseUrl={baseUrl}\n                        components={(spec as OpenAPIV3.Document).components}\n                        className=\"h-full\"\n                      />\n                    ) : (\n                      <div className=\"flex items-center justify-center h-32\">\n                        <p className=\"text-sm text-muted-foreground\">\n                          {t(\"Select an operation to try it out\")}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </main>\n      </SidebarProvider>\n    );\n  },\n);\n\nOperationDetailedLayout.displayName = \"OperationDetailedLayout\";\n\nexport { OperationDetailedLayout, type OperationDetailedLayoutProps };\n",
      "type": "registry:ui",
      "target": "components/pivot/operation-detailed-layout.tsx"
    }
  ]
}