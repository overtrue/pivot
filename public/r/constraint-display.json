{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "constraint-display",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "files": [
    {
      "path": "registry/pivot/constraint-display.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport type { OpenAPIV3 } from 'openapi-types';\nimport React from \"react\";\n\n// Import types from the centralized types file\n\ninterface ConstraintDisplayProps {\n  schema: OpenAPIV3.SchemaObject;\n  className?: string;\n}\n\nconst ConstraintDisplay = React.forwardRef<\n  HTMLDivElement,\n  ConstraintDisplayProps\n>(({ schema, className }, ref) => {\n  const constraints: Array<{ label: string; value: any }> = [];\n\n  // 数字约束\n  if (schema.minimum !== undefined) {\n    constraints.push({\n      label: schema.exclusiveMinimum ? \"min (exclusive)\" : \"min\",\n      value: schema.minimum,\n    });\n  }\n  if (schema.maximum !== undefined) {\n    constraints.push({\n      label: schema.exclusiveMaximum ? \"max (exclusive)\" : \"max\",\n      value: schema.maximum,\n    });\n  }\n  if (schema.multipleOf !== undefined) {\n    constraints.push({ label: \"multiple of\", value: schema.multipleOf });\n  }\n\n  // 字符串约束\n  if (schema.minLength !== undefined) {\n    constraints.push({ label: \"min length\", value: schema.minLength });\n  }\n  if (schema.maxLength !== undefined) {\n    constraints.push({ label: \"max length\", value: schema.maxLength });\n  }\n  if (schema.pattern) {\n    constraints.push({ label: \"pattern\", value: schema.pattern });\n  }\n\n  // 数组约束\n  if (schema.minItems !== undefined) {\n    constraints.push({ label: \"min items\", value: schema.minItems });\n  }\n  if (schema.maxItems !== undefined) {\n    constraints.push({ label: \"max items\", value: schema.maxItems });\n  }\n  if (schema.uniqueItems) {\n    constraints.push({ label: \"unique items\", value: \"true\" });\n  }\n\n  if (constraints.length === 0) {\n    return null;\n  }\n\n  return (\n    <div ref={ref} className={cn(className)}>\n      <h5 className=\"text-xs font-semibold mb-1 text-neutral-500 dark:text-neutral-400\">\n        Constraints\n      </h5>\n      <div className=\"text-xs space-y-1\">\n        {constraints.map(({ label, value }, index) => (\n          <div key={index} className=\"flex items-center gap-2\">\n            <span className=\"font-medium text-neutral-600 dark:text-neutral-400\">\n              {label}:\n            </span>\n            <span className=\"font-mono text-neutral-800 dark:text-neutral-200\">\n              {String(value)}\n            </span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n});\n\nConstraintDisplay.displayName = \"ConstraintDisplay\";\n\nexport { ConstraintDisplay, type ConstraintDisplayProps };\n",
      "type": "registry:ui",
      "target": "registry/pivot/constraint-display.tsx"
    }
  ]
}