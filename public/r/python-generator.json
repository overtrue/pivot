{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "python-generator",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "react"
  ],
  "files": [
    {
      "path": "registry/pivot/python-generator.tsx",
      "content": "import type { CodeGenerator, CodeGeneratorParams } from \"@/types/project\";\nimport { Code2 } from \"lucide-react\";\nimport React from \"react\";\n\n// PythonGenerator implementation\nexport class PythonGeneratorClass implements CodeGenerator {\n  id = \"python\";\n  label = \"Python\";\n\n  getIcon() {\n    return <Code2 size={16} />;\n  }\n\n  generateCode(params: CodeGeneratorParams): string {\n    const { endpoint, method, requestBodyExample, requestBody } = params;\n\n    return `# Using requests library\nimport requests\n\ndef call_${method.toLowerCase()}():\n    url = \"${endpoint}\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    ${[\"POST\", \"PUT\", \"PATCH\"].includes(method) && requestBody\n        ? `\n    payload = ${JSON.stringify(requestBodyExample, null, 4)\n          .split(\"\\n\")\n          .map((line) => \"    \" + line)\n          .join(\"\\n\")}\n\n    response = requests.${method.toLowerCase()}(url, json=payload, headers=headers)\n    `\n        : `\n    response = requests.${method.toLowerCase()}(url, headers=headers)\n    `\n      }\n    return response.json()`;\n  }\n}\n\n// React component wrapper\ninterface PythonGeneratorProps {\n  params?: CodeGeneratorParams;\n  className?: string;\n}\n\nconst PythonGeneratorComponent = React.forwardRef<HTMLDivElement, PythonGeneratorProps>(\n  ({ params, className }, ref) => {\n    if (!params) {\n      return (\n        <div ref={ref} className={className}>\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Code2 size={16} />\n            <span className=\"font-medium\">Python</span>\n          </div>\n          <div className=\"bg-neutral-100 dark:bg-neutral-800 p-4 rounded-md text-neutral-500 dark:text-neutral-400\">\n            No parameters provided for code generation\n          </div>\n        </div>\n      );\n    }\n\n    const generator = new PythonGeneratorClass();\n    const code = generator.generateCode(params);\n\n    return (\n      <div ref={ref} className={className}>\n        <div className=\"flex items-center gap-2 mb-2\">\n          {generator.getIcon()}\n          <span className=\"font-medium\">{generator.label}</span>\n        </div>\n        <pre className=\"bg-neutral-100 dark:bg-neutral-800 p-4 rounded-md overflow-x-auto\">\n          <code className=\"text-sm language-python\">{code}</code>\n        </pre>\n      </div>\n    );\n  },\n);\n\nPythonGeneratorComponent.displayName = \"PythonGenerator\";\n\nexport {\n  PythonGeneratorComponent as PythonGenerator,\n  type PythonGeneratorProps\n};\n\n",
      "type": "registry:component",
      "target": "components/pivot/python-generator.tsx"
    }
  ]
}