{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "link-item",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/i18n.json",
    "https://pivotkit.vercel.app/r/description-display.json",
    "https://pivotkit.vercel.app/r/expand-collapse.json",
    "https://pivotkit.vercel.app/r/server-display.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/link-item.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useI18n } from \"@/registry/default/lib/i18n\";\nimport { DescriptionDisplay } from \"@/registry/default/ui/description-display\";\nimport { ExpandCollapse } from \"@/registry/default/ui/expand-collapse\";\nimport { ServerDisplay } from \"@/registry/default/ui/server-display\";\nimport type { OpenAPIV3 } from \"openapi-types\";\nimport React, { useState } from \"react\";\n\ninterface LinkItemProps {\n  name: string;\n  operationId?: string;\n  operationRef?: string;\n  parameters?: Record<string, any>;\n  requestBody?: any;\n  description?: string;\n  server?: OpenAPIV3.ServerObject;\n  className?: string;\n}\n\nconst LinkItem = React.forwardRef<HTMLDivElement, LinkItemProps>(\n  (\n    {\n      name,\n      operationId,\n      operationRef,\n      parameters,\n      requestBody,\n      description,\n      server,\n      className,\n    },\n    ref,\n  ) => {\n    const { t } = useI18n();\n    const [isExpanded, setIsExpanded] = useState(false);\n    const hasDetails = description || parameters || requestBody || server;\n\n    const primaryIdentifier = operationId\n      ? { type: \"operationId\", value: operationId }\n      : operationRef\n        ? { type: \"operationRef\", value: operationRef }\n        : null;\n\n    return (\n      <div ref={ref} className={cn(\"mb-2 p-3 rounded\", className)}>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"font-mono font-medium\">{name}</span>\n            {primaryIdentifier && (\n              <span\n                className={cn(\n                  \"px-2 py-1 text-xs rounded\",\n                  primaryIdentifier.type === \"operationId\"\n                    ? \"bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200\"\n                    : \"bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200\",\n                )}\n              >\n                {t(primaryIdentifier.type)}: {primaryIdentifier.value}\n              </span>\n            )}\n          </div>\n\n          {hasDetails && (\n            <ExpandCollapse\n              isExpanded={isExpanded}\n              onToggle={() => setIsExpanded(!isExpanded)}\n              expandedLabel={t(\"Hide Details\")}\n              collapsedLabel={t(\"Show Details\")}\n            />\n          )}\n        </div>\n\n        {description && !isExpanded && (\n          <div className=\"text-sm text-neutral-600 dark:text-neutral-400 mt-1 truncate\">\n            <DescriptionDisplay description={description} />\n          </div>\n        )}\n\n        {isExpanded && hasDetails && (\n          <div className=\"mt-3 pl-2 border-l-2 border-neutral-200 dark:border-neutral-700 space-y-4\">\n            {description && (\n              <div>\n                <h4 className=\"text-xs font-semibold mb-1 text-neutral-700 dark:text-neutral-300\">\n                  {t(\"Description\")}\n                </h4>\n                <DescriptionDisplay\n                  description={description}\n                  className=\"text-sm\"\n                />\n              </div>\n            )}\n\n            {parameters && Object.keys(parameters).length > 0 && (\n              <div>\n                <h4 className=\"text-xs font-semibold mb-1 text-neutral-700 dark:text-neutral-300\">\n                  {t(\"Parameters\")}\n                </h4>\n                <div className=\"bg-neutral-50 dark:bg-neutral-800 p-2 rounded text-xs space-y-1\">\n                  {Object.entries(parameters).map(([paramName, paramValue]) => (\n                    <div\n                      key={paramName}\n                      className=\"grid grid-cols-[max-content_1fr] gap-x-2\"\n                    >\n                      <span className=\"font-mono font-medium text-neutral-700 dark:text-neutral-300\">\n                        {paramName}:\n                      </span>\n                      <pre className=\"font-mono bg-neutral-100 dark:bg-neutral-700 px-1.5 py-0.5 rounded overflow-x-auto break-all\">\n                        <code>\n                          {typeof paramValue === \"string\"\n                            ? paramValue\n                            : JSON.stringify(paramValue)}\n                        </code>\n                      </pre>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {requestBody && (\n              <div>\n                <h4 className=\"text-xs font-semibold mb-1 text-neutral-700 dark:text-neutral-300\">\n                  {t(\"Request Body\")}\n                </h4>\n                <div className=\"bg-neutral-50 dark:bg-neutral-800 p-2 rounded text-xs\">\n                  <pre className=\"font-mono bg-neutral-100 dark:bg-neutral-700 px-1.5 py-0.5 rounded overflow-x-auto break-all\">\n                    <code>\n                      {typeof requestBody === \"string\"\n                        ? requestBody\n                        : JSON.stringify(requestBody, null, 2)}\n                    </code>\n                  </pre>\n                </div>\n              </div>\n            )}\n\n            {server && (\n              <div>\n                <h4 className=\"text-xs font-semibold mb-1 text-neutral-700 dark:text-neutral-300\">\n                  {t(\"Server\")}\n                </h4>\n                <ServerDisplay server={server} />\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n\nLinkItem.displayName = \"LinkItem\";\n\nexport { LinkItem, type LinkItemProps };\n",
      "type": "registry:ui",
      "target": "components/ui/link-item.tsx"
    }
  ]
}