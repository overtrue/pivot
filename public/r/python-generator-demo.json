{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "python-generator-demo",
  "type": "registry:example",
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/python-generator.json"
  ],
  "files": [
    {
      "path": "registry/default/example/python-generator-demo.tsx",
      "content": "import { PythonGenerator } from \"@/registry/default/ui/python-generator\";\n\nexport default function PythonGeneratorDemo() {\n  // 用户认证 API 示例\n  const authParams = {\n    endpoint: \"https://api.example.com/v1/auth/login\",\n    method: \"POST\" as const,\n    parameters: [],\n    requestBodyExample: {\n      email: \"user@example.com\",\n      password: \"SecurePass123\",\n      rememberMe: true,\n    },\n    requestBody: {\n      content: {\n        \"application/json\": {\n          schema: {\n            type: \"object\" as const,\n            required: [\"email\", \"password\"],\n            properties: {\n              email: { type: \"string\" as const, format: \"email\" as const },\n              password: { type: \"string\" as const, minLength: 8 },\n              rememberMe: { type: \"boolean\" as const, default: false },\n            },\n          },\n        },\n      },\n      required: true,\n    },\n  };\n\n  // 数据分析 API 示例\n  const analyticsParams = {\n    endpoint: \"https://api.example.com/v1/analytics/reports\",\n    method: \"GET\" as const,\n    parameters: [\n      {\n        name: \"startDate\",\n        in: \"query\" as const,\n        required: true,\n        schema: { type: \"string\" as const, format: \"date\" as const },\n      },\n      {\n        name: \"endDate\",\n        in: \"query\" as const,\n        required: true,\n        schema: { type: \"string\" as const, format: \"date\" as const },\n      },\n      {\n        name: \"metrics\",\n        in: \"query\" as const,\n        required: false,\n        schema: {\n          type: \"array\" as const,\n          items: {\n            type: \"string\" as const,\n            enum: [\"views\", \"clicks\", \"conversions\", \"revenue\"],\n          },\n        },\n      },\n      {\n        name: \"groupBy\",\n        in: \"query\" as const,\n        required: false,\n        schema: { type: \"string\" as const, enum: [\"day\", \"week\", \"month\"] },\n      },\n      {\n        name: \"Authorization\",\n        in: \"header\" as const,\n        required: true,\n        schema: { type: \"string\" as const },\n      },\n    ],\n    requestBodyExample: null,\n    requestBody: undefined,\n  };\n\n  // 机器学习模型预测 API 示例\n  const mlPredictionParams = {\n    endpoint: \"https://api.example.com/v1/ml/predict\",\n    method: \"POST\" as const,\n    parameters: [\n      {\n        name: \"model-version\",\n        in: \"header\" as const,\n        required: false,\n        schema: { type: \"string\" as const, default: \"v1.0\" },\n      },\n      {\n        name: \"X-API-Key\",\n        in: \"header\" as const,\n        required: true,\n        schema: { type: \"string\" as const },\n      },\n    ],\n    requestBodyExample: {\n      features: {\n        age: 35,\n        income: 75000,\n        creditScore: 720,\n        employmentYears: 8,\n        hasProperty: true,\n      },\n      options: {\n        includeConfidence: true,\n        explainPrediction: false,\n      },\n    },\n    requestBody: {\n      content: {\n        \"application/json\": {\n          schema: {\n            type: \"object\" as const,\n            required: [\"features\"],\n            properties: {\n              features: {\n                type: \"object\" as const,\n                description: \"输入特征数据\",\n                properties: {\n                  age: { type: \"integer\" as const, minimum: 18, maximum: 100 },\n                  income: { type: \"number\" as const, minimum: 0 },\n                  creditScore: {\n                    type: \"integer\" as const,\n                    minimum: 300,\n                    maximum: 850,\n                  },\n                  employmentYears: { type: \"number\" as const, minimum: 0 },\n                  hasProperty: { type: \"boolean\" as const },\n                },\n              },\n              options: {\n                type: \"object\" as const,\n                description: \"预测选项\",\n                properties: {\n                  includeConfidence: {\n                    type: \"boolean\" as const,\n                    default: false,\n                  },\n                  explainPrediction: {\n                    type: \"boolean\" as const,\n                    default: false,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      required: true,\n    },\n  };\n\n  // 批量数据处理 API 示例\n  const batchProcessParams = {\n    endpoint: \"https://api.example.com/v1/data/batch-process\",\n    method: \"POST\" as const,\n    parameters: [\n      {\n        name: \"async\",\n        in: \"query\" as const,\n        required: false,\n        schema: { type: \"boolean\" as const, default: true },\n      },\n      {\n        name: \"priority\",\n        in: \"query\" as const,\n        required: false,\n        schema: {\n          type: \"string\" as const,\n          enum: [\"low\", \"normal\", \"high\"],\n          default: \"normal\",\n        },\n      },\n      {\n        name: \"Authorization\",\n        in: \"header\" as const,\n        required: true,\n        schema: { type: \"string\" as const },\n      },\n    ],\n    requestBodyExample: {\n      operation: \"transform\",\n      inputFormat: \"csv\",\n      outputFormat: \"json\",\n      data: [\n        { id: 1, name: \"Alice\", score: 95 },\n        { id: 2, name: \"Bob\", score: 87 },\n        { id: 3, name: \"Charlie\", score: 92 },\n      ],\n      transformations: [\n        { type: \"filter\", condition: \"score > 90\" },\n        { type: \"sort\", field: \"score\", order: \"desc\" },\n      ],\n    },\n    requestBody: {\n      content: {\n        \"application/json\": {\n          schema: {\n            type: \"object\" as const,\n            required: [\"operation\", \"data\"],\n            properties: {\n              operation: {\n                type: \"string\" as const,\n                enum: [\"transform\", \"validate\", \"aggregate\"],\n              },\n              inputFormat: {\n                type: \"string\" as const,\n                enum: [\"csv\", \"json\", \"xml\"],\n              },\n              outputFormat: {\n                type: \"string\" as const,\n                enum: [\"csv\", \"json\", \"xml\"],\n              },\n              data: {\n                type: \"array\" as const,\n                items: { type: \"object\" as const },\n                maxItems: 1000,\n              },\n              transformations: {\n                type: \"array\" as const,\n                items: {\n                  type: \"object\" as const,\n                  properties: {\n                    type: { type: \"string\" as const },\n                    condition: { type: \"string\" as const },\n                    field: { type: \"string\" as const },\n                    order: { type: \"string\" as const, enum: [\"asc\", \"desc\"] },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      required: true,\n    },\n  };\n\n  // 图像处理 API 示例\n  const imageProcessParams = {\n    endpoint: \"https://api.example.com/v1/images/process\",\n    method: \"POST\" as const,\n    parameters: [\n      {\n        name: \"format\",\n        in: \"query\" as const,\n        required: false,\n        schema: {\n          type: \"string\" as const,\n          enum: [\"jpeg\", \"png\", \"webp\"],\n          default: \"jpeg\",\n        },\n      },\n      {\n        name: \"quality\",\n        in: \"query\" as const,\n        required: false,\n        schema: {\n          type: \"integer\" as const,\n          minimum: 1,\n          maximum: 100,\n          default: 80,\n        },\n      },\n      {\n        name: \"X-Processing-Token\",\n        in: \"header\" as const,\n        required: true,\n        schema: { type: \"string\" as const },\n      },\n    ],\n    requestBodyExample: {\n      imageUrl: \"https://example.com/images/sample.jpg\",\n      operations: [\n        { type: \"resize\", width: 800, height: 600 },\n        { type: \"filter\", name: \"brightness\", value: 1.2 },\n        { type: \"crop\", x: 100, y: 100, width: 400, height: 300 },\n      ],\n      metadata: {\n        preserveExif: false,\n        addWatermark: true,\n        watermarkText: \"© Example Corp\",\n      },\n    },\n    requestBody: {\n      content: {\n        \"application/json\": {\n          schema: {\n            type: \"object\" as const,\n            required: [\"imageUrl\", \"operations\"],\n            properties: {\n              imageUrl: { type: \"string\" as const, format: \"uri\" as const },\n              operations: {\n                type: \"array\" as const,\n                items: {\n                  type: \"object\" as const,\n                  properties: {\n                    type: {\n                      type: \"string\" as const,\n                      enum: [\"resize\", \"crop\", \"filter\", \"rotate\"],\n                    },\n                    width: { type: \"integer\" as const },\n                    height: { type: \"integer\" as const },\n                    x: { type: \"integer\" as const },\n                    y: { type: \"integer\" as const },\n                    name: { type: \"string\" as const },\n                    value: { type: \"number\" as const },\n                    angle: { type: \"number\" as const },\n                  },\n                },\n              },\n              metadata: {\n                type: \"object\" as const,\n                properties: {\n                  preserveExif: { type: \"boolean\" as const, default: true },\n                  addWatermark: { type: \"boolean\" as const, default: false },\n                  watermarkText: { type: \"string\" as const },\n                },\n              },\n            },\n          },\n        },\n      },\n      required: true,\n    },\n  };\n\n  return (\n    <div className=\"space-y-8 min-w-md\">\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">用户认证 API</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          用户登录接口的 Python requests 代码生成\n        </p>\n        <PythonGenerator params={authParams} />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">数据分析 API</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          包含多个查询参数的数据分析接口 Python 代码\n        </p>\n        <PythonGenerator params={analyticsParams} />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">机器学习预测 API</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          ML 模型预测接口的 Python 代码，包含复杂的特征数据\n        </p>\n        <PythonGenerator params={mlPredictionParams} />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">批量数据处理 API</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          大数据批量处理接口的 Python 代码生成\n        </p>\n        <PythonGenerator params={batchProcessParams} />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">图像处理 API</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          图像处理和变换接口的 Python 代码生成\n        </p>\n        <PythonGenerator params={imageProcessParams} />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": "components/example/python-generator-demo.tsx"
    }
  ]
}