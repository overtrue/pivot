{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "schema-with-example-viewer",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/example-display.json",
    "https://pivotkit.vercel.app/r/media-type-selector.json",
    "https://pivotkit.vercel.app/r/schema-display.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/schema-with-example-viewer.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useI18n } from \"@/registry/default/lib/i18n\";\nimport type { OpenAPIV3 } from \"openapi-types\";\n\nimport { generateExample } from \"@/registry/default/lib/generate-example\";\nimport { resolveRef } from \"@/registry/default/lib/resolve-ref\";\nimport { ExampleDisplay } from \"@/registry/default/ui/example-display\";\nimport { MediaTypeSelector } from \"@/registry/default/ui/media-type-selector\";\nimport { SchemaDisplay } from \"@/registry/default/ui/schema-display\";\nimport React, { useEffect, useMemo, useState } from \"react\";\n\n// 简化的视图模式类型\ntype ViewMode = \"schema\" | \"example\";\n\n// 提取媒体类型语言检测逻辑\nconst getLanguageForMediaType = (mediaTypeName: string): string => {\n  if (mediaTypeName.includes(\"json\")) return \"json\";\n  if (mediaTypeName.includes(\"xml\")) return \"xml\";\n  if (mediaTypeName.includes(\"yaml\") || mediaTypeName.includes(\"yml\")) return \"yaml\";\n  return \"text\";\n};\n\n// 提取示例选择器组件\nconst ExampleSelector = ({\n  examples,\n  selectedExample,\n  onSelect\n}: {\n  examples: Record<string, OpenAPIV3.ExampleObject | OpenAPIV3.ReferenceObject>;\n  selectedExample: string;\n  onSelect: (value: string) => void;\n}) => {\n  const { t } = useI18n();\n\n  if (Object.keys(examples).length <= 1) return null;\n\n  return (\n    <div className=\"ml-2 relative\">\n      <select\n        className=\"text-sm border rounded-md px-2 py-1 bg-white dark:bg-neutral-700 dark:text-neutral-200 dark:border-neutral-600\"\n        value={selectedExample}\n        onChange={(e) => onSelect(e.target.value)}\n        onClick={(e) => e.stopPropagation()}\n      >\n        {Object.keys(examples).map((key) => (\n          <option key={key} value={key} className=\"dark:bg-neutral-700\">\n            {key}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n};\n\n// 简化的 Schema 和示例视图组件\ninterface SchemaExampleViewProps {\n  mediaType: OpenAPIV3.MediaTypeObject;\n  mediaTypeName?: string;\n  components?: OpenAPIV3.ComponentsObject;\n  className?: string;\n  buttonClassName?: string;\n  contentClassName?: string;\n}\n\nconst SchemaExampleView = React.forwardRef<\n  HTMLDivElement,\n  SchemaExampleViewProps\n>(({\n  mediaType,\n  mediaTypeName = \"application/json\",\n  components,\n  className = \"\",\n  buttonClassName = \"\",\n  contentClassName = \"\",\n}, ref) => {\n  const { t } = useI18n();\n  const [viewMode, setViewMode] = useState<ViewMode>(\"example\");\n  const [selectedExample, setSelectedExample] = useState<string>(\"\");\n\n  // 获取 schema 和示例\n  const schema = mediaType.schema;\n  if (!schema) {\n    return (\n      <div className=\"text-yellow-500 dark:text-yellow-400\">\n        {t(\"Schema not defined\")}\n      </div>\n    );\n  }\n\n  const examples = mediaType.examples || {};\n  const hasExamples = Object.keys(examples).length > 0;\n\n  // 设置初始示例\n  useEffect(() => {\n    if (hasExamples && !selectedExample) {\n      setSelectedExample(Object.keys(examples)[0]);\n    }\n  }, [hasExamples, selectedExample, examples]);\n\n  // 获取当前示例值\n  const exampleValue = useMemo(() => {\n    if (hasExamples && selectedExample) {\n      const example = resolveRef<OpenAPIV3.ExampleObject>(\n        examples[selectedExample],\n        components,\n        \"examples\"\n      );\n      return example?.value || mediaType.example;\n    }\n    return mediaType.example || generateExample(schema, components);\n  }, [hasExamples, selectedExample, examples, mediaType.example, schema, components]);\n\n  // 切换视图模式\n  const toggleViewMode = (mode: ViewMode) => {\n    if (mode !== viewMode) {\n      setViewMode(mode);\n    }\n  };\n\n  return (\n    <div ref={ref} className={className}>\n      {/* 视图切换器 */}\n      <div className=\"mb-4 flex items-center justify-between\">\n        <div className={cn(\n          \"flex bg-neutral-100 dark:bg-neutral-700 rounded-lg p-0.5 relative\",\n          buttonClassName\n        )}>\n          <button\n            onClick={() => toggleViewMode(\"example\")}\n            className={cn(\n              \"px-3 py-1 text-sm rounded-md transition-colors\",\n              viewMode === \"example\"\n                ? \"bg-white dark:bg-neutral-800 shadow text-blue-700 dark:text-blue-400\"\n                : \"text-neutral-700 dark:text-neutral-300 hover:bg-neutral-200 dark:hover:bg-neutral-600\"\n            )}\n            type=\"button\"\n          >\n            {t(\"Example\")}\n          </button>\n          <button\n            onClick={() => toggleViewMode(\"schema\")}\n            className={cn(\n              \"px-3 py-1 text-sm rounded-md transition-colors\",\n              viewMode === \"schema\"\n                ? \"bg-white dark:bg-neutral-800 shadow text-blue-700 dark:text-blue-400\"\n                : \"text-neutral-700 dark:text-neutral-300 hover:bg-neutral-200 dark:hover:bg-neutral-600\"\n            )}\n            type=\"button\"\n          >\n            {t(\"Schema\")}\n          </button>\n        </div>\n\n        {/* 示例选择器 */}\n        {viewMode === \"example\" && hasExamples && (\n          <ExampleSelector\n            examples={examples}\n            selectedExample={selectedExample}\n            onSelect={setSelectedExample}\n          />\n        )}\n      </div>\n\n      {/* 内容显示区域 */}\n      <div className={contentClassName}>\n        {viewMode === \"example\" ? (\n          <ExampleDisplay\n            example={exampleValue}\n            className=\"rounded overflow-hidden bg-neutral-50 dark:bg-neutral-800\"\n            language={getLanguageForMediaType(mediaTypeName)}\n          />\n        ) : (\n          <SchemaDisplay\n            schema={schema}\n            components={components}\n            className=\"rounded p-3 bg-neutral-50 dark:bg-neutral-800\"\n          />\n        )}\n      </div>\n    </div>\n  );\n});\n\nSchemaExampleView.displayName = \"SchemaExampleView\";\n\n// 简化的主组件接口\ninterface SchemaWithExampleViewerProps {\n  content: OpenAPIV3.RequestBodyObject | OpenAPIV3.ReferenceObject | OpenAPIV3.ResponseObject | Record<string, OpenAPIV3.MediaTypeObject>;\n  components?: OpenAPIV3.ComponentsObject;\n  className?: string;\n  title?: string;\n  showTitle?: boolean;\n  contentType?: \"requestBody\" | \"response\" | \"mediaTypes\";\n  renderHeader?: () => React.ReactNode;\n  renderFooter?: (mediaType: OpenAPIV3.MediaTypeObject) => React.ReactNode;\n}\n\n// 提取媒体类型获取逻辑\nconst getMediaTypes = (\n  content: any,\n  contentType: string,\n  components?: OpenAPIV3.ComponentsObject\n): Record<string, OpenAPIV3.MediaTypeObject> => {\n  if (contentType === \"mediaTypes\" && typeof content === \"object\") {\n    return content;\n  }\n\n  if (contentType === \"requestBody\") {\n    const resolvedBody = resolveRef<OpenAPIV3.RequestBodyObject>(\n      content,\n      components,\n      \"requestBodies\"\n    );\n    return resolvedBody?.content || {};\n  }\n\n  if (contentType === \"response\") {\n    const resolvedResponse = resolveRef<OpenAPIV3.ResponseObject>(\n      content,\n      components,\n      \"responses\"\n    );\n    return resolvedResponse?.content || {};\n  }\n\n  return {};\n};\n\nconst SchemaWithExampleViewer = React.forwardRef<\n  HTMLDivElement,\n  SchemaWithExampleViewerProps\n>(({\n  content,\n  components,\n  className = \"\",\n  title,\n  showTitle = false,\n  contentType = \"mediaTypes\",\n  renderHeader,\n  renderFooter,\n}, ref) => {\n  const { t } = useI18n();\n\n  // 获取媒体类型\n  const mediaTypesContent = useMemo(() =>\n    getMediaTypes(content, contentType, components),\n    [content, contentType, components]\n  );\n\n  const mediaTypes = Object.keys(mediaTypesContent);\n  const [activeMediaType, setActiveMediaType] = useState<string | null>(null);\n\n  // 设置初始媒体类型\n  useEffect(() => {\n    if (mediaTypes.length > 0 && !activeMediaType) {\n      const jsonType = mediaTypes.find(type => type.includes(\"json\"));\n      setActiveMediaType(jsonType || mediaTypes[0]);\n    }\n  }, [mediaTypes, activeMediaType]);\n\n  // 如果没有媒体类型\n  if (mediaTypes.length === 0) {\n    return (\n      <div ref={ref} className={className}>\n        {showTitle && title && (\n          <h3 className=\"text-lg font-semibold mb-4\">{title}</h3>\n        )}\n        <div className=\"text-neutral-500 dark:text-neutral-400 text-sm\">\n          {t(\"No content types available\")}\n        </div>\n      </div>\n    );\n  }\n\n  // 如果只有一个媒体类型，直接显示\n  if (mediaTypes.length === 1) {\n    const mediaType = mediaTypesContent[mediaTypes[0]];\n    return (\n      <div ref={ref} className={className}>\n        {showTitle && title && (\n          <h3 className=\"text-lg font-semibold mb-4\">{title}</h3>\n        )}\n        {renderHeader?.()}\n        <SchemaExampleView\n          mediaType={mediaType}\n          mediaTypeName={mediaTypes[0]}\n          components={components}\n        />\n        {renderFooter?.(mediaType)}\n      </div>\n    );\n  }\n\n  // 多个媒体类型，显示选择器\n  return (\n    <div ref={ref} className={className}>\n      {showTitle && title && (\n        <h3 className=\"text-lg font-semibold mb-4\">{title}</h3>\n      )}\n      {renderHeader?.()}\n\n      <MediaTypeSelector\n        mediaTypes={mediaTypes}\n        activeMediaType={activeMediaType}\n        onSelectMediaType={setActiveMediaType}\n      />\n\n      {activeMediaType && (\n        <>\n          <SchemaExampleView\n            mediaType={mediaTypesContent[activeMediaType]}\n            mediaTypeName={activeMediaType}\n            components={components}\n          />\n          {renderFooter?.(mediaTypesContent[activeMediaType])}\n        </>\n      )}\n    </div>\n  );\n});\n\nSchemaWithExampleViewer.displayName = \"SchemaWithExampleViewer\";\n\nexport { SchemaWithExampleViewer, type SchemaWithExampleViewerProps };\n\n",
      "type": "registry:ui",
      "target": "components/pivot/schema-with-example-viewer.tsx"
    }
  ]
}