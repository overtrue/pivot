{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "schema-with-example-viewer",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/lib.json",
    "https://pivotkit.vercel.app/r/description-display.json",
    "https://pivotkit.vercel.app/r/example-display.json",
    "https://pivotkit.vercel.app/r/media-type-selector.json",
    "https://pivotkit.vercel.app/r/schema-display.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/schema-with-example-viewer.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useI18n } from \"@/registry/default/lib/i18n\";\nimport type { OpenAPIV3 } from \"openapi-types\";\n\nimport { generateExample } from \"@/registry/default/lib/generate-example\";\nimport { resolveRef } from \"@/registry/default/lib/resolve-ref\";\nimport { DescriptionDisplay } from \"@/registry/default/ui/description-display\";\nimport { ExampleDisplay } from \"@/registry/default/ui/example-display\";\nimport { MediaTypeSelector } from \"@/registry/default/ui/media-type-selector\";\nimport { SchemaDisplay } from \"@/registry/default/ui/schema-display\";\nimport React, { useEffect, useState } from \"react\";\n\n// Define view modes\ntype ViewMode = \"schema\" | \"example\";\n\n// ===== SchemaExampleView Component Section =====\n\ninterface SchemaExampleViewProps {\n  mediaType: OpenAPIV3.MediaTypeObject;\n  mediaTypeName?: string;\n  components?: OpenAPIV3.ComponentsObject;\n  className?: string;\n  buttonClassName?: string;\n  contentClassName?: string;\n}\n\n/**\n * Generic Schema and Example Data View Component\n * Can display schema and its corresponding example data, with ability to toggle between them\n */\nconst SchemaExampleView = React.forwardRef<\n  HTMLDivElement,\n  SchemaExampleViewProps\n>(\n  (\n    {\n      mediaType,\n      mediaTypeName = \"application/json\",\n      components,\n      className = \"\",\n      buttonClassName = \"\",\n      contentClassName = \"\",\n    },\n    ref,\n  ) => {\n    const { t } = useI18n();\n\n    // View mode state - defaults to example\n    const [viewMode, setViewMode] = useState<ViewMode>(\"example\");\n    // Currently selected example name\n    const [selectedExample, setSelectedExample] = useState<string>(\"\");\n\n    // Get schema\n    const schema = mediaType.schema;\n    if (!schema) {\n      return (\n        <div className=\"text-yellow-500 dark:text-yellow-400\">\n          {t(\"Schema not defined\")}\n        </div>\n      );\n    }\n\n    // Get example data\n    const hasExample = !!mediaType.example;\n    const hasExamples = !!(\n      mediaType.examples && Object.keys(mediaType.examples || {}).length > 0\n    );\n    const examplesKeys = hasExamples\n      ? Object.keys(mediaType.examples || {})\n      : [];\n\n    // Ensure an example is selected\n    useEffect(() => {\n      if (hasExamples && !selectedExample && examplesKeys.length > 0) {\n        const firstKey = examplesKeys[0];\n        if (firstKey) {\n          setSelectedExample(firstKey);\n        }\n      }\n    }, [hasExamples, selectedExample, examplesKeys]);\n\n    // Get current selected example\n    const currentExample =\n      selectedExample && hasExamples\n        ? resolveRef<OpenAPIV3.ExampleObject>(\n            mediaType.examples![selectedExample],\n            components,\n            \"examples\",\n          )\n        : null;\n\n    // Example display content - prefer provided example, otherwise generate from schema\n    const providedExample = currentExample?.value || mediaType.example;\n    const generatedExample = generateExample(schema, components);\n    const exampleValue = providedExample || generatedExample;\n\n    // Toggle view mode\n    const toggleViewMode = (mode: ViewMode) => {\n      if (mode === viewMode) return; // If already in this mode, do nothing\n      setViewMode(mode);\n      console.log(t(\"Switched view mode to: %s\").replace(\"%s\", mode));\n    };\n\n    // Get language based on media type\n    function getLanguageForMediaType(): string {\n      if (mediaTypeName.includes(\"json\")) {\n        return \"json\";\n      } else if (mediaTypeName.includes(\"xml\")) {\n        return \"xml\";\n      } else if (\n        mediaTypeName.includes(\"yaml\") ||\n        mediaTypeName.includes(\"yml\")\n      ) {\n        return \"yaml\";\n      } else {\n        return \"text\";\n      }\n    }\n\n    return (\n      <div ref={ref} className={className}>\n        {/* View switcher */}\n        <div className=\"mb-4 flex items-center justify-between\">\n          <div\n            className={cn(\n              \"flex bg-neutral-100 dark:bg-neutral-700 rounded-lg p-0.5 relative\",\n              buttonClassName,\n            )}\n          >\n            <button\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                toggleViewMode(\"example\");\n              }}\n              className={cn(\n                \"px-3 py-1 text-sm rounded-md transition-colors\",\n                viewMode === \"example\"\n                  ? \"bg-white dark:bg-neutral-800 shadow text-blue-700 dark:text-blue-400\"\n                  : \"text-neutral-700 dark:text-neutral-300 hover:bg-neutral-200 dark:hover:bg-neutral-600\",\n              )}\n              type=\"button\"\n            >\n              {t(\"Example\")}\n            </button>\n            <button\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                toggleViewMode(\"schema\");\n              }}\n              className={cn(\n                \"px-3 py-1 text-sm rounded-md transition-colors\",\n                viewMode === \"schema\"\n                  ? \"bg-white dark:bg-neutral-800 shadow text-blue-700 dark:text-blue-400\"\n                  : \"text-neutral-700 dark:text-neutral-300 hover:bg-neutral-200 dark:hover:bg-neutral-600\",\n              )}\n              type=\"button\"\n            >\n              {t(\"Schema\")}\n            </button>\n          </div>\n\n          {/* Multiple examples selector */}\n          {viewMode === \"example\" && hasExamples && examplesKeys.length > 1 && (\n            <div className=\"ml-2 relative\">\n              <select\n                className=\"text-sm border rounded-md px-2 py-1 bg-white dark:bg-neutral-700 dark:text-neutral-200 dark:border-neutral-600\"\n                value={selectedExample}\n                onChange={(e) => setSelectedExample(e.target.value)}\n                onClick={(e) => e.stopPropagation()}\n              >\n                {examplesKeys.map((key) => {\n                  const example = resolveRef<OpenAPIV3.ExampleObject>(\n                    mediaType.examples![key],\n                    components,\n                    \"examples\",\n                  );\n                  const displayName = example?.summary || key;\n                  return (\n                    <option\n                      key={key}\n                      value={key}\n                      className=\"dark:bg-neutral-700\"\n                    >\n                      {displayName}\n                    </option>\n                  );\n                })}\n              </select>\n            </div>\n          )}\n        </div>\n\n        {/* Content display area */}\n        <div className={contentClassName}>\n          {/* Display different content based on view mode */}\n          {viewMode === \"example\" ? (\n            /* Example data view */\n            <ExampleDisplay\n              example={exampleValue}\n              className=\"rounded overflow-hidden bg-neutral-50 dark:bg-neutral-800\"\n              language={getLanguageForMediaType()}\n            />\n          ) : (\n            /* Schema structure view */\n            <SchemaDisplay\n              schema={schema}\n              components={components}\n              className=\"rounded p-3 bg-neutral-50 dark:bg-neutral-800\"\n            />\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n\nSchemaExampleView.displayName = \"SchemaExampleView\";\n\n// ===== SchemaWithExampleViewer Component Section =====\n\ninterface SchemaWithExampleViewerProps {\n  // Content can be a request body or response body\n  content:\n    | OpenAPIV3.RequestBodyObject\n    | OpenAPIV3.ReferenceObject\n    | OpenAPIV3.ResponseObject\n    | Record<string, OpenAPIV3.MediaTypeObject>;\n  components?: OpenAPIV3.ComponentsObject;\n  className?: string;\n  title?: string;\n  showTitle?: boolean;\n  contentType?: \"requestBody\" | \"response\" | \"mediaTypes\";\n  renderHeader?: () => React.ReactNode;\n  renderFooter?: (mediaType: OpenAPIV3.MediaTypeObject) => React.ReactNode;\n}\n\n/**\n * Schema and Example Viewer Component\n * Used to display schema and its example data, supporting switching between different media type formats\n */\nconst SchemaWithExampleViewer = React.forwardRef<\n  HTMLDivElement,\n  SchemaWithExampleViewerProps\n>(\n  (\n    {\n      content,\n      components,\n      className = \"\",\n      contentType = \"mediaTypes\",\n      renderHeader,\n      renderFooter,\n    },\n    ref,\n  ) => {\n    const { t } = useI18n();\n\n    // Based on content type, get the media type mapping\n    const getMediaTypes = (): Record<string, OpenAPIV3.MediaTypeObject> => {\n      if (contentType === \"mediaTypes\" && typeof content === \"object\") {\n        return content as Record<string, OpenAPIV3.MediaTypeObject>;\n      }\n\n      if (contentType === \"requestBody\") {\n        const resolvedBody = resolveRef<OpenAPIV3.RequestBodyObject>(\n          content as OpenAPIV3.RequestBodyObject | OpenAPIV3.ReferenceObject,\n          components,\n          \"requestBodies\",\n        );\n        return resolvedBody?.content || {};\n      }\n\n      if (contentType === \"response\") {\n        const resolvedResponse = resolveRef<OpenAPIV3.ResponseObject>(\n          content as OpenAPIV3.ResponseObject | OpenAPIV3.ReferenceObject,\n          components,\n          \"responses\",\n        );\n        return resolvedResponse?.content || {};\n      }\n\n      return {};\n    };\n\n    const mediaTypesContent = getMediaTypes();\n    const mediaTypes = Object.keys(mediaTypesContent);\n    const [activeMediaType, setActiveMediaType] = useState<string | null>(null);\n\n    // Set initial media type, prefer application/json\n    useEffect(() => {\n      if (mediaTypes.length > 0 && activeMediaType === null) {\n        const jsonType = mediaTypes.find((type) => type.includes(\"json\"));\n        const firstType = mediaTypes[0];\n        setActiveMediaType(jsonType || firstType || null);\n      } else if (mediaTypes.length === 0) {\n        setActiveMediaType(null);\n      }\n    }, [mediaTypes, activeMediaType]);\n\n    // Check if the current media type selection is valid when the list changes\n    useEffect(() => {\n      if (\n        activeMediaType &&\n        !mediaTypes.includes(activeMediaType) &&\n        mediaTypes.length > 0\n      ) {\n        const jsonType = mediaTypes.find((type) => type.includes(\"json\"));\n        const firstType = mediaTypes[0];\n        setActiveMediaType(jsonType || firstType || null);\n      }\n      if (mediaTypes.length === 0) {\n        setActiveMediaType(null);\n      }\n    }, [mediaTypes, activeMediaType]);\n\n    if (mediaTypes.length === 0) {\n      return (\n        <div ref={ref} className=\"text-yellow-500 dark:text-yellow-400 p-3\">\n          {t(\"No content defined\")}\n        </div>\n      );\n    }\n\n    const selectedMediaTypeObject = activeMediaType\n      ? mediaTypesContent[activeMediaType]\n      : null;\n\n    // Handle media type switching\n    const handleSelectMediaType = (mediaType: string) => {\n      setActiveMediaType(mediaType);\n    };\n\n    // Get description (if available)\n    const getDescription = () => {\n      if (contentType === \"requestBody\") {\n        const resolvedBody = resolveRef<OpenAPIV3.RequestBodyObject>(\n          content as OpenAPIV3.RequestBodyObject | OpenAPIV3.ReferenceObject,\n          components,\n          \"requestBodies\",\n        );\n        return resolvedBody?.description;\n      }\n\n      if (contentType === \"response\") {\n        const resolvedResponse = resolveRef<OpenAPIV3.ResponseObject>(\n          content as OpenAPIV3.ResponseObject | OpenAPIV3.ReferenceObject,\n          components,\n          \"responses\",\n        );\n        return resolvedResponse?.description;\n      }\n\n      return undefined;\n    };\n\n    const description = getDescription();\n\n    return (\n      <div ref={ref} className={cn(\"mb-4\", \"dark:text-neutral-200\", className)}>\n        {/* Custom header area */}\n        {renderHeader && renderHeader()}\n\n        {/* Description information */}\n        {description && (\n          <div className=\"mb-3\">\n            <DescriptionDisplay description={description} />\n          </div>\n        )}\n\n        {/* Media type selector */}\n        {mediaTypes.length > 1 && (\n          <div className=\"mb-3\">\n            <MediaTypeSelector\n              mediaTypes={mediaTypes}\n              activeMediaType={activeMediaType}\n              onSelectMediaType={handleSelectMediaType}\n            />\n          </div>\n        )}\n\n        {/* Content display area */}\n        {activeMediaType && selectedMediaTypeObject && (\n          <div className=\"space-y-4\">\n            {/* Use SchemaExampleView component to display schema and example data */}\n            <SchemaExampleView\n              key={activeMediaType}\n              mediaType={selectedMediaTypeObject}\n              mediaTypeName={activeMediaType}\n              components={components}\n              contentClassName=\"mt-2\"\n            />\n\n            {/* Custom footer area */}\n            {renderFooter && renderFooter(selectedMediaTypeObject)}\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n\nSchemaWithExampleViewer.displayName = \"SchemaWithExampleViewer\";\n\nexport {\n  SchemaExampleView,\n  SchemaWithExampleViewer,\n  type SchemaWithExampleViewerProps,\n};\n",
      "type": "registry:ui",
      "target": "components/ui/schema-with-example-viewer.tsx"
    }
  ]
}