{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "operation-path",
  "type": "registry:ui",
  "dependencies": [
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/path-segment.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/operation-path.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport React from \"react\";\nimport { PathSegment } from \"@/registry/default/ui/path-segment\";\n\ninterface OperationPathProps {\n  path: string;\n  className?: string;\n}\n\n/**\n * 将一个完整的 OpenAPI 路径分割为多个 PathSegment 组件\n * 自动识别路径中的参数（形如 {param}）并高亮显示\n */\nconst OperationPath = React.forwardRef<HTMLDivElement, OperationPathProps>(\n  ({ path, className }, ref) => {\n    // 将路径按照 / 分割，但保留 /\n    const segments = path.split(/(?=\\/)/g);\n\n    // 检测路径中的参数模式 {param}\n    const isParameterSegment = (segment: string) => {\n      return /{([^}]+)}/.test(segment);\n    };\n\n    // 将路径中的 {param} 替换为高亮显示\n    const renderSegment = (segment: string, index: number) => {\n      const isParam = isParameterSegment(segment);\n\n      if (isParam) {\n        // 拆分包含参数的片段\n        const parts = segment.split(/{([^}]+)}/);\n\n        return (\n          <React.Fragment key={index}>\n            {parts.map((part, partIndex) => {\n              if (partIndex % 2 === 0) {\n                // 非参数部分\n                return part ? (\n                  <PathSegment key={`${index}-${partIndex}`} path={part} />\n                ) : null;\n              } else {\n                // 参数部分\n                return (\n                  <PathSegment\n                    key={`${index}-${partIndex}`}\n                    path={`{${part}}`}\n                    isParameter\n                  />\n                );\n              }\n            })}\n          </React.Fragment>\n        );\n      }\n\n      // 普通路径片段\n      return <PathSegment key={index} path={segment} />;\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex flex-wrap items-center text-neutral-600 dark:text-neutral-400\",\n          className,\n        )}\n      >\n        {segments.map((segment, index) => renderSegment(segment, index))}\n      </div>\n    );\n  },\n);\n\nOperationPath.displayName = \"OperationPath\";\n\nexport { OperationPath };\n",
      "type": "registry:ui",
      "target": "components/pivot/operation-path.tsx"
    }
  ]
}