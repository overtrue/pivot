{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "security-scheme-display",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/description-display.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/security-scheme-display.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport { DescriptionDisplay } from \"@/registry/default/ui/description-display\";\nimport type { OpenAPIV3 } from \"openapi-types\";\nimport React from \"react\";\n\n// Import types from the centralized types file\n\ninterface SecuritySchemeDisplayProps {\n  name: string;\n  scheme?: OpenAPIV3.SecuritySchemeObject;\n  className?: string;\n}\n\nconst SecuritySchemeDisplay = React.forwardRef<\n  HTMLDivElement,\n  SecuritySchemeDisplayProps\n>(({ name, scheme, className }, ref) => {\n  if (!scheme) {\n    return (\n      <div\n        ref={ref}\n        className={cn(\"p-3 rounded dark:bg-neutral-800/30\", className)}\n      >\n        <div className=\"flex items-center gap-2 mb-2\">\n          <span className=\"font-mono font-semibold dark:text-neutral-200\">\n            {name}\n          </span>\n          <span className=\"text-xs bg-neutral-200 dark:bg-neutral-700 px-2 py-0.5 rounded dark:text-neutral-300\">\n            unknown\n          </span>\n        </div>\n        <div className=\"text-sm text-neutral-500 dark:text-neutral-400 italic\">\n          No security scheme data available\n        </div>\n      </div>\n    );\n  }\n\n  const renderDetails = () => {\n    switch (scheme.type) {\n      case \"apiKey\":\n        return (\n          <div className=\"grid grid-cols-[max-content_1fr] gap-x-2 gap-y-1\">\n            <span className=\"text-neutral-600 dark:text-neutral-400\">In:</span>{\" \"}\n            <span className=\"dark:text-neutral-300\">{scheme.in}</span>\n            <span className=\"text-neutral-600 dark:text-neutral-400\">\n              Name:\n            </span>{\" \"}\n            <span className=\"dark:text-neutral-300\">{scheme.name}</span>\n          </div>\n        );\n      case \"http\":\n        return (\n          <div className=\"grid grid-cols-[max-content_1fr] gap-x-2 gap-y-1\">\n            <span className=\"text-neutral-600 dark:text-neutral-400\">\n              Scheme:\n            </span>{\" \"}\n            <span className=\"dark:text-neutral-300\">{scheme.scheme}</span>\n            {scheme.bearerFormat && (\n              <>\n                <span className=\"text-neutral-600 dark:text-neutral-400\">\n                  Bearer Format:\n                </span>{\" \"}\n                <span className=\"dark:text-neutral-300\">\n                  {scheme.bearerFormat}\n                </span>\n              </>\n            )}\n          </div>\n        );\n      case \"oauth2\":\n        return (\n          <div>\n            <div className=\"space-y-2\">\n              {scheme.flows &&\n                Object.entries(scheme.flows).map(([flowType, flow]) => (\n                  <div\n                    key={flowType}\n                    className=\"p-2 rounded bg-neutral-100 dark:bg-neutral-800/70\"\n                  >\n                    <h6 className=\"font-semibold capitalize mb-1 dark:text-neutral-200\">\n                      {flowType}\n                    </h6>\n                    <div className=\"grid grid-cols-[max-content_1fr] gap-x-2 gap-y-1 text-xs dark:text-neutral-300\">\n                      {\"authorizationUrl\" in flow && flow.authorizationUrl && (\n                        <>\n                          <span className=\"text-neutral-600 dark:text-neutral-400\">\n                            Authorization URL:\n                          </span>{\" \"}\n                          <code className=\"break-all\">\n                            {flow.authorizationUrl}\n                          </code>\n                        </>\n                      )}\n                      {\"tokenUrl\" in flow && flow.tokenUrl && (\n                        <>\n                          <span className=\"text-neutral-600 dark:text-neutral-400\">\n                            Token URL:\n                          </span>{\" \"}\n                          <code className=\"break-all\">{flow.tokenUrl}</code>\n                        </>\n                      )}\n                      {\"refreshUrl\" in flow && flow.refreshUrl && (\n                        <>\n                          <span className=\"text-neutral-600 dark:text-neutral-400\">\n                            Refresh URL:\n                          </span>{\" \"}\n                          <code className=\"break-all\">{flow.refreshUrl}</code>\n                        </>\n                      )}\n                      {flow?.scopes && Object.keys(flow.scopes).length > 0 && (\n                        <>\n                          <span className=\"text-neutral-600 dark:text-neutral-400 self-start\">\n                            Scopes:\n                          </span>\n                          <div className=\"space-y-0.5\">\n                            {Object.entries(flow.scopes).map(\n                              ([scope, description]) => (\n                                <div key={scope}>\n                                  <code className=\"font-mono px-1 rounded\">\n                                    {scope}:\n                                  </code>{\" \"}\n                                  <span className=\"dark:text-neutral-300\">\n                                    {description as string}\n                                  </span>\n                                </div>\n                              ),\n                            )}\n                          </div>\n                        </>\n                      )}\n                    </div>\n                  </div>\n                ))}\n            </div>\n          </div>\n        );\n      case \"openIdConnect\":\n        return (\n          <div className=\"grid grid-cols-[max-content_1fr] gap-x-2 gap-y-1\">\n            <span className=\"text-neutral-600 dark:text-neutral-400\">\n              OpenID Connect URL:\n            </span>\n            <a\n              href={scheme.openIdConnectUrl}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"text-blue-600 dark:text-blue-400 hover:underline break-all\"\n            >\n              {scheme.openIdConnectUrl}\n            </a>\n          </div>\n        );\n      default:\n        return (\n          <p className=\"text-red-500 dark:text-red-400\">\n            Unknown security scheme type: {(scheme as any).type}\n          </p>\n        );\n    }\n  };\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\"p-3 rounded dark:bg-neutral-800/30\", className)}\n    >\n      <div className=\"flex items-center gap-2 mb-2\">\n        <span className=\"font-mono font-semibold dark:text-neutral-200\">\n          {name}\n        </span>\n        <span className=\"text-xs bg-neutral-200 dark:bg-neutral-700 px-2 py-0.5 rounded capitalize dark:text-neutral-300\">\n          {scheme.type}\n        </span>\n      </div>\n      {scheme.description && (\n        <DescriptionDisplay\n          description={scheme.description}\n          className=\"text-sm mb-3 dark:text-neutral-300\"\n        />\n      )}\n      <div className=\"text-sm\">{renderDetails()}</div>\n    </div>\n  );\n});\n\nSecuritySchemeDisplay.displayName = \"SecuritySchemeDisplay\";\n\nexport { SecuritySchemeDisplay };\n",
      "type": "registry:ui",
      "target": "components/pivot/security-scheme-display.tsx"
    }
  ]
}