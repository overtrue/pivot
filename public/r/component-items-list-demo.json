{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "component-items-list-demo",
  "type": "registry:example",
  "dependencies": [
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/component-items-list.json"
  ],
  "files": [
    {
      "path": "registry/default/example/component-items-list-demo.tsx",
      "content": "\"use client\";\n\nimport { ComponentItemsList } from \"@/registry/default/ui/component-items-list\";\nimport { useState } from \"react\";\n\nexport default function ComponentItemsListDemo() {\n  const [selectedItems, setSelectedItems] = useState<Record<string, string | null>>({\n    userManagement: null,\n    ecommerce: null,\n    payment: null,\n    notification: null,\n    fileManagement: null,\n  });\n  // 用户管理 API 组件列表\n  const userManagementComponents = {\n    schemas: {\n      \"User\": {\n        type: \"object\" as const,\n        required: [\"id\", \"email\", \"name\"],\n        properties: {\n          id: { type: \"string\" as const, description: \"用户唯一标识符\" },\n          email: { type: \"string\" as const, format: \"email\" as const, description: \"用户邮箱地址\" },\n          name: { type: \"string\" as const, description: \"用户姓名\" },\n          avatar: { type: \"string\" as const, format: \"uri\" as const, description: \"用户头像 URL\" },\n          role: {\n            type: \"string\" as const,\n            enum: [\"admin\", \"user\", \"moderator\"],\n            description: \"用户角色\"\n          },\n          createdAt: { type: \"string\" as const, format: \"date-time\" as const, description: \"注册时间\" }\n        }\n      },\n      \"UserProfile\": {\n        type: \"object\" as const,\n        properties: {\n          bio: { type: \"string\" as const, description: \"个人简介\" },\n          phone: { type: \"string\" as const, description: \"电话号码\" },\n          address: { $ref: \"#/components/schemas/Address\" },\n          preferences: {\n            type: \"object\" as const,\n            properties: {\n              language: { type: \"string\" as const, description: \"首选语言\" },\n              timezone: { type: \"string\" as const, description: \"时区设置\" }\n            }\n          }\n        }\n      },\n      \"Address\": {\n        type: \"object\" as const,\n        properties: {\n          country: { type: \"string\" as const, description: \"国家\" },\n          city: { type: \"string\" as const, description: \"城市\" },\n          street: { type: \"string\" as const, description: \"街道地址\" },\n          zipCode: { type: \"string\" as const, description: \"邮政编码\" }\n        }\n      }\n    },\n    responses: {\n      \"UserResponse\": {\n        description: \"用户信息响应\",\n        content: {\n          \"application/json\": {\n            schema: { $ref: \"#/components/schemas/User\" }\n          }\n        }\n      },\n      \"UserListResponse\": {\n        description: \"用户列表响应\",\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\" as const,\n              properties: {\n                data: {\n                  type: \"array\" as const,\n                  items: { $ref: \"#/components/schemas/User\" }\n                },\n                pagination: { $ref: \"#/components/schemas/Pagination\" }\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  // 电商产品 API 组件列表\n  const ecommerceComponents = {\n    schemas: {\n      \"Product\": {\n        type: \"object\" as const,\n        required: [\"id\", \"name\", \"price\"],\n        properties: {\n          id: { type: \"string\" as const, description: \"产品 ID\" },\n          name: { type: \"string\" as const, description: \"产品名称\" },\n          description: { type: \"string\" as const, description: \"产品描述\" },\n          price: { type: \"number\" as const, description: \"产品价格\" },\n          currency: { type: \"string\" as const, description: \"货币代码\" },\n          category: { type: \"string\" as const, description: \"产品分类\" },\n          brand: { type: \"string\" as const, description: \"品牌名称\" },\n          images: {\n            type: \"array\" as const,\n            items: { type: \"string\" as const, format: \"uri\" as const },\n            description: \"产品图片列表\"\n          },\n          inStock: { type: \"boolean\" as const, description: \"是否有库存\" },\n          stockQuantity: { type: \"integer\" as const, description: \"库存数量\" }\n        }\n      },\n      \"Category\": {\n        type: \"object\" as const,\n        properties: {\n          id: { type: \"string\" as const, description: \"分类 ID\" },\n          name: { type: \"string\" as const, description: \"分类名称\" },\n          description: { type: \"string\" as const, description: \"分类描述\" },\n          parentId: { type: \"string\" as const, description: \"父分类 ID\" },\n          level: { type: \"integer\" as const, description: \"分类层级\" }\n        }\n      },\n      \"Review\": {\n        type: \"object\" as const,\n        properties: {\n          id: { type: \"string\" as const, description: \"评价 ID\" },\n          productId: { type: \"string\" as const, description: \"产品 ID\" },\n          userId: { type: \"string\" as const, description: \"用户 ID\" },\n          rating: { type: \"integer\" as const, minimum: 1, maximum: 5, description: \"评分\" },\n          comment: { type: \"string\" as const, description: \"评价内容\" },\n          createdAt: { type: \"string\" as const, format: \"date-time\" as const, description: \"评价时间\" }\n        }\n      }\n    },\n    responses: {\n      \"ProductResponse\": {\n        description: \"产品详情响应\",\n        content: {\n          \"application/json\": {\n            schema: { $ref: \"#/components/schemas/Product\" }\n          }\n        }\n      },\n      \"ProductListResponse\": {\n        description: \"产品列表响应\",\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\" as const,\n              properties: {\n                data: {\n                  type: \"array\" as const,\n                  items: { $ref: \"#/components/schemas/Product\" }\n                },\n                filters: {\n                  type: \"object\" as const,\n                  properties: {\n                    category: { type: \"string\" as const },\n                    priceRange: { type: \"object\" as const },\n                    brand: { type: \"string\" as const }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    parameters: {\n      \"ProductId\": {\n        name: \"productId\",\n        in: \"path\",\n        required: true,\n        schema: { type: \"string\" as const },\n        description: \"产品唯一标识符\"\n      },\n      \"CategoryFilter\": {\n        name: \"category\",\n        in: \"query\",\n        schema: { type: \"string\" as const },\n        description: \"按分类筛选产品\"\n      }\n    }\n  };\n\n  // 支付系统组件列表\n  const paymentComponents = {\n    schemas: {\n      \"Payment\": {\n        type: \"object\" as const,\n        required: [\"id\", \"amount\", \"currency\", \"status\"],\n        properties: {\n          id: { type: \"string\" as const, description: \"支付 ID\" },\n          orderId: { type: \"string\" as const, description: \"订单 ID\" },\n          amount: { type: \"number\" as const, description: \"支付金额\" },\n          currency: { type: \"string\" as const, description: \"货币代码\" },\n          method: {\n            type: \"string\" as const,\n            enum: [\"credit_card\", \"paypal\", \"bank_transfer\", \"alipay\", \"wechat_pay\"],\n            description: \"支付方式\"\n          },\n          status: {\n            type: \"string\" as const,\n            enum: [\"pending\", \"processing\", \"completed\", \"failed\", \"refunded\"],\n            description: \"支付状态\"\n          },\n          gateway: { type: \"string\" as const, description: \"支付网关\" },\n          transactionId: { type: \"string\" as const, description: \"交易 ID\" },\n          createdAt: { type: \"string\" as const, format: \"date-time\" as const, description: \"创建时间\" }\n        }\n      },\n      \"PaymentMethod\": {\n        type: \"object\" as const,\n        properties: {\n          id: { type: \"string\" as const, description: \"支付方式 ID\" },\n          type: { type: \"string\" as const, description: \"支付类型\" },\n          cardLast4: { type: \"string\" as const, description: \"卡号后四位\" },\n          expiryMonth: { type: \"integer\" as const, description: \"过期月份\" },\n          expiryYear: { type: \"integer\" as const, description: \"过期年份\" },\n          isDefault: { type: \"boolean\" as const, description: \"是否为默认支付方式\" }\n        }\n      },\n      \"Refund\": {\n        type: \"object\" as const,\n        properties: {\n          id: { type: \"string\" as const, description: \"退款 ID\" },\n          paymentId: { type: \"string\" as const, description: \"原支付 ID\" },\n          amount: { type: \"number\" as const, description: \"退款金额\" },\n          reason: { type: \"string\" as const, description: \"退款原因\" },\n          status: {\n            type: \"string\" as const,\n            enum: [\"pending\", \"processing\", \"completed\", \"failed\"],\n            description: \"退款状态\"\n          }\n        }\n      }\n    },\n    securitySchemes: {\n      \"PaymentAuth\": {\n        type: \"oauth2\",\n        flows: {\n          authorizationCode: {\n            authorizationUrl: \"https://payment.example.com/oauth/authorize\",\n            tokenUrl: \"https://payment.example.com/oauth/token\",\n            scopes: {\n              \"payment:read\": \"读取支付信息\",\n              \"payment:write\": \"创建和修改支付\",\n              \"refund:create\": \"创建退款\"\n            }\n          }\n        }\n      }\n    }\n  };\n\n  // 通知系统组件列表\n  const notificationComponents = {\n    schemas: {\n      \"Notification\": {\n        type: \"object\" as const,\n        properties: {\n          id: { type: \"string\" as const, description: \"通知 ID\" },\n          userId: { type: \"string\" as const, description: \"接收用户 ID\" },\n          title: { type: \"string\" as const, description: \"通知标题\" },\n          message: { type: \"string\" as const, description: \"通知内容\" },\n          type: {\n            type: \"string\" as const,\n            enum: [\"info\", \"warning\", \"error\", \"success\"],\n            description: \"通知类型\"\n          },\n          channel: {\n            type: \"string\" as const,\n            enum: [\"email\", \"sms\", \"push\", \"in_app\"],\n            description: \"发送渠道\"\n          },\n          isRead: { type: \"boolean\" as const, description: \"是否已读\" },\n          createdAt: { type: \"string\" as const, format: \"date-time\" as const, description: \"创建时间\" }\n        }\n      },\n      \"NotificationTemplate\": {\n        type: \"object\" as const,\n        properties: {\n          id: { type: \"string\" as const, description: \"模板 ID\" },\n          name: { type: \"string\" as const, description: \"模板名称\" },\n          subject: { type: \"string\" as const, description: \"邮件主题\" },\n          content: { type: \"string\" as const, description: \"模板内容\" },\n          variables: {\n            type: \"array\" as const,\n            items: { type: \"string\" as const },\n            description: \"模板变量\"\n          }\n        }\n      }\n    },\n    responses: {\n      \"NotificationResponse\": {\n        description: \"通知详情响应\",\n        content: {\n          \"application/json\": {\n            schema: { $ref: \"#/components/schemas/Notification\" }\n          }\n        }\n      }\n    }\n  };\n\n  // 文件管理组件列表\n  const fileManagementComponents = {\n    schemas: {\n      \"File\": {\n        type: \"object\" as const,\n        properties: {\n          id: { type: \"string\" as const, description: \"文件 ID\" },\n          originalName: { type: \"string\" as const, description: \"原始文件名\" },\n          fileName: { type: \"string\" as const, description: \"存储文件名\" },\n          mimeType: { type: \"string\" as const, description: \"文件 MIME 类型\" },\n          size: { type: \"integer\" as const, description: \"文件大小（字节）\" },\n          url: { type: \"string\" as const, format: \"uri\" as const, description: \"文件访问 URL\" },\n          thumbnailUrl: { type: \"string\" as const, format: \"uri\" as const, description: \"缩略图 URL\" },\n          uploadedBy: { type: \"string\" as const, description: \"上传用户 ID\" },\n          uploadedAt: { type: \"string\" as const, format: \"date-time\" as const, description: \"上传时间\" },\n          metadata: {\n            type: \"object\" as const,\n            description: \"文件元数据\"\n          }\n        }\n      },\n      \"UploadSession\": {\n        type: \"object\" as const,\n        properties: {\n          id: { type: \"string\" as const, description: \"上传会话 ID\" },\n          status: {\n            type: \"string\" as const,\n            enum: [\"pending\", \"uploading\", \"completed\", \"failed\"],\n            description: \"上传状态\"\n          },\n          progress: { type: \"number\" as const, description: \"上传进度（0-100）\" },\n          totalSize: { type: \"integer\" as const, description: \"总文件大小\" },\n          uploadedSize: { type: \"integer\" as const, description: \"已上传大小\" }\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"space-y-8 min-w-md\">\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">用户管理 API 组件列表</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          用户管理系统的完整组件定义，包含用户、资料和地址等数据模型\n        </p>\n        <ComponentItemsList\n          items={Object.keys(userManagementComponents.schemas || {})}\n          selectedItem={selectedItems.userManagement || null}\n          onSelectItem={(item) => setSelectedItems(prev => ({ ...prev, userManagement: item }))}\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">电商产品 API 组件列表</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          电商平台的产品管理组件，包含产品、分类、评价等完整数据结构\n        </p>\n        <ComponentItemsList\n          items={Object.keys(ecommerceComponents.schemas || {})}\n          selectedItem={selectedItems.ecommerce || null}\n          onSelectItem={(item) => setSelectedItems(prev => ({ ...prev, ecommerce: item }))}\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">支付系统组件列表</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          支付处理系统的组件定义，包含支付、退款和安全认证等功能\n        </p>\n        <ComponentItemsList\n          items={Object.keys(paymentComponents.schemas || {})}\n          selectedItem={selectedItems.payment || null}\n          onSelectItem={(item) => setSelectedItems(prev => ({ ...prev, payment: item }))}\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">通知系统组件列表</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          消息通知系统的组件定义，支持多种通知类型和发送渠道\n        </p>\n        <ComponentItemsList\n          items={Object.keys(notificationComponents.schemas || {})}\n          selectedItem={selectedItems.notification || null}\n          onSelectItem={(item) => setSelectedItems(prev => ({ ...prev, notification: item }))}\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">文件管理组件列表</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          文件上传和管理系统的组件定义，包含文件信息和上传会话\n        </p>\n        <ComponentItemsList\n          items={Object.keys(fileManagementComponents.schemas || {})}\n          selectedItem={selectedItems.fileManagement || null}\n          onSelectItem={(item) => setSelectedItems(prev => ({ ...prev, fileManagement: item }))}\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": "components/example/component-items-list-demo.tsx"
    }
  ]
}