{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "examples-display",
  "type": "registry:ui",
  "dependencies": [
    "openapi-types",
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/description-display"
  ],
  "files": [
    {
      "path": "registry/pivot/examples-display.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useI18n } from \"@/registry/lib/i18n\";\nimport { resolveRef } from \"@/registry/lib/utils/resolve-ref\";\nimport { DescriptionDisplay } from \"@/registry/pivot/description-display\";\nimport type { OpenAPIV3 } from 'openapi-types';\nimport React from \"react\";\n\n// Import types from the centralized types file\n\ninterface ExamplesDisplayProps {\n  examples: Record<string, OpenAPIV3.ExampleObject | OpenAPIV3.ReferenceObject>;\n  components?: OpenAPIV3.ComponentsObject;\n  className?: string;\n}\n\nconst ExamplesDisplay = React.forwardRef<HTMLDivElement, ExamplesDisplayProps>(\n  ({ examples, components, className }, ref) => {\n    const { t } = useI18n();\n\n    const resolvedExamples = Object.entries(examples)\n      .map(([key, exampleOrRef]) => {\n        // Use the generic resolver\n        const resolved = resolveRef<OpenAPIV3.ExampleObject>(\n          exampleOrRef,\n          components,\n          \"examples\",\n        );\n        // Add error handling or logging if resolveRef returns null\n        if (!resolved) {\n          const refString =\n            exampleOrRef &&\n              typeof exampleOrRef === \"object\" &&\n              \"$ref\" in exampleOrRef\n              ? (exampleOrRef as OpenAPIV3.ReferenceObject).$ref\n              : t(\"[unknown reference]\");\n          console.warn(\n            t(\"[ExamplesDisplay] Failed to resolve example ref: %s for key %s\").replace(\"%s\", refString).replace(\"%s\", key),\n          );\n          return null;\n        }\n        return { key, ...resolved };\n      })\n      .filter(\n        (example): example is OpenAPIV3.ExampleObject & { key: string } =>\n          example !== null,\n      );\n\n    if (resolvedExamples.length === 0) {\n      return null;\n    }\n\n    return (\n      <div ref={ref} className={cn(\"space-y-3\", className)}>\n        {resolvedExamples.map((example) => (\n          <div\n            key={example.key}\n            className=\"border border-neutral-200 dark:border-neutral-700 rounded p-3 bg-white dark:bg-neutral-800\"\n          >\n            <div className=\"flex justify-between items-start mb-1\">\n              <span className=\"font-semibold text-sm text-neutral-800 dark:text-neutral-200\">\n                {example.key}\n              </span>\n              {example.summary && (\n                <span className=\"text-xs text-neutral-600 dark:text-neutral-400 text-right\">\n                  {example.summary}\n                </span>\n              )}\n            </div>\n            {example.description && (\n              <DescriptionDisplay\n                description={example.description}\n                className=\"text-xs mb-2\"\n              />\n            )}\n            {example.value !== undefined && (\n              <div>\n                <pre className=\"bg-neutral-100 dark:bg-neutral-700 p-2 rounded font-mono text-xs overflow-x-auto text-neutral-800 dark:text-neutral-200\">\n                  <code>{JSON.stringify(example.value, null, 2)}</code>\n                </pre>\n              </div>\n            )}\n            {example.externalValue && (\n              <div className=\"text-xs text-neutral-600 dark:text-neutral-400 mt-2\">\n                <span className=\"font-medium\">External Value: </span>\n                <a\n                  href={example.externalValue}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"text-blue-600 dark:text-blue-400 hover:underline\"\n                >\n                  {example.externalValue}\n                </a>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    );\n  },\n);\n\nExamplesDisplay.displayName = \"ExamplesDisplay\";\n\nexport { ExamplesDisplay, type ExamplesDisplayProps };\n\n",
      "type": "registry:ui",
      "target": "registry/pivot/examples-display.tsx"
    }
  ]
}