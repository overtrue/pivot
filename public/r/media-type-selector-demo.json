{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "media-type-selector-demo",
  "type": "registry:example",
  "dependencies": [
    "react"
  ],
  "registryDependencies": [
    "https://pivotkit.vercel.app/r/media-type-selector.json"
  ],
  "files": [
    {
      "path": "registry/default/example/media-type-selector-demo.tsx",
      "content": "\"use client\";\n\nimport { MediaTypeSelector } from \"@/registry/default/ui/media-type-selector\";\nimport { useState } from \"react\";\n\nexport default function MediaTypeSelectorDemo() {\n  const [selectedMediaTypes, setSelectedMediaTypes] = useState<Record<string, string | null>>({\n    apiResponse: null,\n    fileUpload: null,\n    imageProcessing: null,\n    documentExport: null,\n    dataExchange: null,\n    contentManagement: null,\n    paymentProcessing: null,\n    realtime: null,\n    multimedia: null,\n    archive: null,\n  });\n  // API 响应媒体类型\n  const apiResponseMediaTypes = [\n    \"application/json\",\n    \"application/xml\",\n    \"text/plain\"\n  ];\n\n  // 文件上传媒体类型\n  const fileUploadMediaTypes = [\n    \"multipart/form-data\",\n    \"application/json\",\n    \"application/octet-stream\"\n  ];\n\n  // 图像处理媒体类型\n  const imageProcessingMediaTypes = [\n    \"image/jpeg\",\n    \"image/png\",\n    \"image/webp\",\n    \"image/gif\",\n    \"image/svg+xml\"\n  ];\n\n  // 文档导出媒体类型\n  const documentExportMediaTypes = [\n    \"application/json\",\n    \"text/csv\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n    \"application/pdf\",\n    \"text/plain\"\n  ];\n\n  // 数据交换媒体类型\n  const dataExchangeMediaTypes = [\n    \"application/json\",\n    \"application/xml\",\n    \"application/yaml\",\n    \"text/csv\",\n    \"application/x-protobuf\"\n  ];\n\n  // 内容管理媒体类型\n  const contentManagementMediaTypes = [\n    \"application/json\",\n    \"text/html\",\n    \"text/markdown\",\n    \"text/plain\",\n    \"application/xml\"\n  ];\n\n  // 支付处理媒体类型\n  const paymentProcessingMediaTypes = [\n    \"application/json\",\n    \"application/x-www-form-urlencoded\",\n    \"text/plain\"\n  ];\n\n  // 实时通信媒体类型\n  const realtimeMediaTypes = [\n    \"application/json\",\n    \"text/plain\",\n    \"application/octet-stream\"\n  ];\n\n  // 多媒体内容媒体类型\n  const multimediaMediaTypes = [\n    \"video/mp4\",\n    \"video/webm\",\n    \"audio/mpeg\",\n    \"audio/wav\",\n    \"audio/ogg\",\n    \"image/jpeg\",\n    \"image/png\"\n  ];\n\n  // 压缩文件媒体类型\n  const archiveMediaTypes = [\n    \"application/zip\",\n    \"application/x-tar\",\n    \"application/gzip\",\n    \"application/x-7z-compressed\",\n    \"application/x-rar-compressed\"\n  ];\n\n  return (\n    <div className=\"space-y-8 min-w-md\">\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">API 响应媒体类型选择</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          标准 API 响应支持的媒体类型，包含 JSON、XML 和纯文本格式\n        </p>\n        <MediaTypeSelector\n          mediaTypes={apiResponseMediaTypes}\n          activeMediaType={selectedMediaTypes.apiResponse || null}\n          onSelectMediaType={(type) => setSelectedMediaTypes(prev => ({ ...prev, apiResponse: type }))}\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">文件上传媒体类型选择</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          文件上传接口支持的媒体类型，包含表单数据和二进制流\n        </p>\n        <MediaTypeSelector\n          mediaTypes={fileUploadMediaTypes}\n          activeMediaType={selectedMediaTypes.fileUpload || null}\n          onSelectMediaType={(type) => setSelectedMediaTypes(prev => ({ ...prev, fileUpload: type }))}\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">图像处理媒体类型选择</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          图像处理 API 支持的图片格式，包含常见的 Web 图像格式\n        </p>\n        <MediaTypeSelector\n          mediaTypes={imageProcessingMediaTypes}\n          activeMediaType={selectedMediaTypes.imageProcessing || null}\n          onSelectMediaType={(type) => setSelectedMediaTypes(prev => ({ ...prev, imageProcessing: type }))}\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">文档导出媒体类型选择</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          数据导出功能支持的文档格式，包含 Excel、PDF、CSV 等\n        </p>\n        <MediaTypeSelector\n          mediaTypes={documentExportMediaTypes}\n          activeMediaType={selectedMediaTypes.documentExport || null}\n          onSelectMediaType={(type) => setSelectedMediaTypes(prev => ({ ...prev, documentExport: type }))}\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">数据交换媒体类型选择</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          系统间数据交换支持的格式，包含结构化和二进制数据\n        </p>\n        <MediaTypeSelector\n          mediaTypes={dataExchangeMediaTypes}\n          activeMediaType={selectedMediaTypes.dataExchange || null}\n          onSelectMediaType={(type) => setSelectedMediaTypes(prev => ({ ...prev, dataExchange: type }))}\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">内容管理媒体类型选择</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          内容管理系统支持的内容格式，包含 HTML、Markdown 等\n        </p>\n        <MediaTypeSelector\n          mediaTypes={contentManagementMediaTypes}\n          activeMediaType={selectedMediaTypes.contentManagement || null}\n          onSelectMediaType={(type) => setSelectedMediaTypes(prev => ({ ...prev, contentManagement: type }))}\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">支付处理媒体类型选择</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          支付接口支持的数据格式，包含 JSON 和表单编码格式\n        </p>\n        <MediaTypeSelector\n          mediaTypes={paymentProcessingMediaTypes}\n          activeMediaType={selectedMediaTypes.paymentProcessing || null}\n          onSelectMediaType={(type) => setSelectedMediaTypes(prev => ({ ...prev, paymentProcessing: type }))}\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">实时通信媒体类型选择</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          WebSocket 和实时通信支持的数据格式\n        </p>\n        <MediaTypeSelector\n          mediaTypes={realtimeMediaTypes}\n          activeMediaType={selectedMediaTypes.realtime || null}\n          onSelectMediaType={(type) => setSelectedMediaTypes(prev => ({ ...prev, realtime: type }))}\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">多媒体内容媒体类型选择</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          多媒体处理 API 支持的音视频和图像格式\n        </p>\n        <MediaTypeSelector\n          mediaTypes={multimediaMediaTypes}\n          activeMediaType={selectedMediaTypes.multimedia || null}\n          onSelectMediaType={(type) => setSelectedMediaTypes(prev => ({ ...prev, multimedia: type }))}\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-sm font-medium mb-3\">压缩文件媒体类型选择</h4>\n        <p className=\"text-xs text-neutral-600 dark:text-neutral-400 mb-3\">\n          文件压缩和归档功能支持的压缩格式\n        </p>\n        <MediaTypeSelector\n          mediaTypes={archiveMediaTypes}\n          activeMediaType={selectedMediaTypes.archive || null}\n          onSelectMediaType={(type) => setSelectedMediaTypes(prev => ({ ...prev, archive: type }))}\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": "components/example/media-type-selector-demo.tsx"
    }
  ]
}