{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "resolve-ref",
  "type": "registry:lib",
  "dependencies": [
    "openapi-types"
  ],
  "files": [
    {
      "path": "registry/lib/resolve-ref.ts",
      "content": "import type { OpenAPIV3 } from 'openapi-types';\n\n/**\n * 解析OpenAPI中的引用对象\n * @param obj 可能是引用对象的数据\n * @param components OpenAPI组件定义\n * @param category 可选的组件类别(schemas, parameters等)\n * @returns 解析后的对象或原始对象\n */\nexport function resolveRef<T>(\n  obj: T | OpenAPIV3.ReferenceObject | undefined,\n  components?: OpenAPIV3.ComponentsObject,\n  category?: string,\n): T | null {\n  if (!obj) return null;\n\n  // 检查是否是引用对象\n  if (typeof obj === \"object\" && obj !== null && \"$ref\" in obj) {\n    const refObj = obj as OpenAPIV3.ReferenceObject;\n    const refPath = refObj.$ref;\n\n    // 处理标准格式的引用 #/components/{category}/{name}\n    const refMatch = refPath.match(/^#\\/components\\/([^/]+)\\/(.+)$/);\n\n    if (refMatch && components) {\n      const [, refCategory, refName] = refMatch;\n\n      // 检查refName是否存在\n      if (!refName) {\n        console.warn(`引用名称为空: ${refPath}`);\n        return null;\n      }\n\n      // 如果指定了类别，并且与引用类别不一致，则发出警告\n      if (category && refCategory !== category) {\n        console.warn(`引用类别 ${refCategory} 与期望类别 ${category} 不一致`);\n      }\n\n      // 根据类别获取组件集合\n      const componentCollection =\n        components[refCategory as keyof OpenAPIV3.ComponentsObject];\n\n      if (componentCollection && typeof componentCollection === \"object\") {\n        // 解析引用对象\n        const resolved = componentCollection[refName];\n\n        if (resolved) {\n          // 检查是否是嵌套引用，如果是则递归解析\n          if (\n            typeof resolved === \"object\" &&\n            resolved !== null &&\n            \"$ref\" in resolved\n          ) {\n            return resolveRef<T>(\n              resolved as OpenAPIV3.ReferenceObject,\n              components,\n              category,\n            );\n          }\n          return resolved as unknown as T;\n        }\n      }\n\n      console.warn(`找不到引用 ${refPath}`);\n      return null;\n    }\n\n    console.warn(`不支持的引用格式 ${refPath}`);\n    return null;\n  }\n\n  // 如果不是引用对象，则返回原始对象\n  return obj as T;\n}\n",
      "type": "registry:lib"
    }
  ]
}